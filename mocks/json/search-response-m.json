{
  "results": [
    {
      "hits": [
        {
          "url": "https://til.swfz.io//entries/mui_inputprops/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/mui_inputprops/index.md",
          "text": "\n仕事でMUIを使ったコードを読んでたらTextFieldのプロパティに`inputProps`, `InputProps`と`i`,`I`で両方あることに気付いた\n\n違いは何だと言うことで調べた\n\n[TextField API - Material UI](https://mui.com/material-ui/api/text-field/)\n\n## InputProps\n\nInput要素に適用されるプロパティ\n\n> variant prop の値に応じて、FilledInput、OutlinedInput、Inputコンポーネントのいずれかになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなるほど、TextFieldはFilledInput,OutlinedInput,Inputをより抽象化したコンポーネントで、この3つのコンポーネントのどれかに適用させるプロパティを指定するということのよう\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n試しにFilledInputのAPIドキュメントを見に行くと`inputProps`のみしかないのでなるほどとなった\n\n[FilledInput API - Material UI](https://mui.com/material-ui/api/filled-input/)\n\nこのページでのPropsの中で指定したいものがあれば指定するとういことと理解した\n\nたとえば`color`とか\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nあとはTextFieldを使って汎用的なカスタムコンポーネントを作った場合なども`InputProps`を受け取ってそのまま`TextField`に流すことでカスタマイズ可能で汎用的なカスタムコンポーネントを作れる\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n## inputProps\n\ninput要素に適用するプロパティを指定する\n\nお馴染みの`input`タグに指定するプロパティを指定する\n\nたとえば`value`とか\n\n\nどのタグやコンポーネントに作用させたいかでPropsの大文字小文字を切り替えると理解した\n\nよく考えられているなーと感じたが初見ではとっつきづらいしややこしいな…と感じた\n",
          "date": "2023-02-16",
          "title": "MUI TextFieldのInputPropsとinputPropsの違い",
          "tags": [
            "MUI",
            "MaterialUI",
            "React"
          ],
          "description": "適用させるコンポーネントが違う",
          "slug": "/entries/mui_inputprops/",
          "internal": {
            "contentDigest": "c221d46b31ee3059e13c1dc0a51c6117"
          },
          "timeToRead": 1,
          "objectID": "f2290c6a-65ba-5bcb-96a5-aa68fbaa5db0",
          "_snippetResult": {
            "text": {
              "value": "… あることに気付いた\n\n違いは何だと言うことで調べた\n\n[TextField API - <em>M</em>aterial UI](https://<em>m</em>ui.com/<em>m</em>aterial-ui/api/text-field/)\n\n## InputProps\n\nInput要素に適用されるプロパティ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ui_inputprops/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>ui_inputprops/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n仕事で<em>M</em>UIを使ったコードを読んでたらTextFieldのプロパティに`inputProps`, `InputProps`と`i`,`I`で両方あることに気付いた\n\n違いは何だと言うことで調べた\n\n[TextField API - <em>M</em>aterial UI](https://<em>m</em>ui.com/<em>m</em>aterial-ui/api/text-field/)\n\n## InputProps\n\nInput要素に適用されるプロパティ\n\n> variant prop の値に応じて、FilledInput、OutlinedInput、Inputコンポーネントのいずれかになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなるほど、TextFieldはFilledInput,OutlinedInput,Inputをより抽象化したコンポーネントで、この3つのコンポーネントのどれかに適用させるプロパティを指定するということのよう\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n試しにFilledInputのAPIドキュメントを見に行くと`inputProps`のみしかないのでなるほどとなった\n\n[FilledInput API - <em>M</em>aterial UI](https://<em>m</em>ui.com/<em>m</em>aterial-ui/api/filled-input/)\n\nこのページでのPropsの中で指定したいものがあれば指定するとういことと理解した\n\nたとえば`color`とか\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nあとはTextFieldを使って汎用的なカスタムコンポーネントを作った場合なども`InputProps`を受け取ってそのまま`TextField`に流すことでカスタマイズ可能で汎用的なカスタムコンポーネントを作れる\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n## inputProps\n\ninput要素に適用するプロパティを指定する\n\nお馴染みの`input`タグに指定するプロパティを指定する\n\nたとえば`value`とか\n\n\nどのタグやコンポーネントに作用させたいかでPropsの大文字小文字を切り替えると理解した\n\nよく考えられているなーと感じたが初見ではとっつきづらいしややこしいな…と感じた\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-02-16",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>M</em>UI TextFieldのInputPropsとinputPropsの違い",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "<em>M</em>UI",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "<em>M</em>aterialUI",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "React",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "適用させるコンポーネントが違う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ui_inputprops/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "c221d46b31ee3059e13c1dc0a51c6117",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/multi_ssh_command/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/multi_ssh_command/index.md",
          "text": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
          "date": "2020-06-20",
          "title": "多段SSHをワンライナーで行う",
          "tags": [
            "ssh",
            "ワンライナー",
            "ShellScript"
          ],
          "description": "ssh -o ProxyCommand",
          "slug": "/entries/multi_ssh_command/",
          "internal": {
            "contentDigest": "3aa3b715105a091c49e8ce4fd60d2003"
          },
          "timeToRead": 1,
          "objectID": "e24e524b-eda9-5ddc-bc25-8dc38ab552a9",
          "_snippetResult": {
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>ulti_ssh_command/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2020-06-20",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "多段SSHをワンライナーで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "ssh",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ワンライナー",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ShellScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ssh -o ProxyCommand",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "3aa3b715105a091c49e8ce4fd60d2003",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysqldump_in_docker_compose/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/mysqldump_in_docker_compose/index.md",
          "text": "\ndocker-composeからmysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database mysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database mysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
          "date": "2020-09-18",
          "title": "docker-composeからmysqldumpコマンドを実行する",
          "tags": [
            "Docker",
            "MySQL"
          ],
          "description": "exec -Tを使う",
          "slug": "/entries/mysqldump_in_docker_compose/",
          "internal": {
            "contentDigest": "d350921da69740ca29b745d912081fd4"
          },
          "timeToRead": 1,
          "objectID": "cf7cdb23-92db-5307-9054-f492bec0d258",
          "_snippetResult": {
            "text": {
              "value": "\ndocker-composeから<em>m</em>ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database <em>m</em>ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database <em>m</em>ysql -u root -phoge hoge < hoge_dump …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>ysqldump_in_docker_compose/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\ndocker-composeから<em>m</em>ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database <em>m</em>ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database <em>m</em>ysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2020-09-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "docker-composeから<em>m</em>ysqldumpコマンドを実行する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Docker",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "<em>M</em>ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "exec -Tを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "d350921da69740ca29b745d912081fd4",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysql_direct_gz/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/mysql_direct_gz/index.md",
          "text": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\nmysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接MySQLに流し込む\n\n```shell\nzcat dump.gz | mysql -u user -p password dbname \n```\n",
          "date": "2021-01-22",
          "title": "MySQLでgzipをそのまま流し込む",
          "tags": [
            "MySQL"
          ],
          "description": "",
          "slug": "/entries/mysql_direct_gz/",
          "internal": {
            "contentDigest": "88f1bf9cf31fb96bb3bc39b582cc0111"
          },
          "timeToRead": 1,
          "objectID": "94c6b4da-c8bb-5f36-a0b9-ab003ce8091c",
          "_snippetResult": {
            "text": {
              "value": "… したファイルを生成する\n\n```shell\n<em>m</em>ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接<em>M</em>ySQLに流し込む\n\n```shell\nzcat dump.gz | <em>m</em>ysql -u user -p password dbname \n```\n",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>ysql_direct_gz/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\n<em>m</em>ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接<em>M</em>ySQLに流し込む\n\n```shell\nzcat dump.gz | <em>m</em>ysql -u user -p password dbname \n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-01-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>M</em>ySQLでgzipをそのまま流し込む",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "<em>M</em>ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "88f1bf9cf31fb96bb3bc39b582cc0111",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/msw_mock_svg/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/msw_mock_svg/index.md",
          "text": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.me/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\nmswを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということでmswを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - Mock Service Worker Docs](https://mswjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev msw\nmkdir src/mocks\ntouch src/mocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx msw init static/ --save\n```\n\nすると`static/mockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/mocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-mock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/mocks/browser.js\n\n```javascript\n// src/mocks/browser.js\nimport { setupWorker } from 'msw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/mocks/handler.ts\n\n```typescript\nimport { rest } from 'msw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to mock an img src url? · Issue #461 · mswjs/msw](https://github.com/mswjs/msw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\nmswを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
          "date": "2021-12-29",
          "title": "mswでSVGをモックする",
          "tags": [
            "JavaScript",
            "TypeScript",
            "Gatsby",
            "msw"
          ],
          "description": "Pixelaを題材としてモックしてみた",
          "slug": "/entries/msw_mock_svg/",
          "internal": {
            "contentDigest": "71397493f188ec4f06b2ff7879cacb1b"
          },
          "timeToRead": 3,
          "objectID": "93160714-a398-50c1-8c1a-bdbf52be4d8c",
          "_snippetResult": {
            "text": {
              "value": "… にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev <em>m</em>sw\n<em>m</em>kdir src/<em>m</em>ocks\ntouch src/<em>m</em>ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx <em>m</em>sw …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>sw_<em>m</em>ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>sw_<em>m</em>ock_svg/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.<em>m</em>e/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\n<em>m</em>swを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということで<em>m</em>swを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - <em>M</em>ock Service Worker Docs](https://<em>m</em>swjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev <em>m</em>sw\n<em>m</em>kdir src/<em>m</em>ocks\ntouch src/<em>m</em>ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx <em>m</em>sw init static/ --save\n```\n\nすると`static/<em>m</em>ockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/<em>m</em>ocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-<em>m</em>ock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/<em>m</em>ocks/browser.js\n\n```javascript\n// src/<em>m</em>ocks/browser.js\nimport { setupWorker } from '<em>m</em>sw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/<em>m</em>ocks/handler.ts\n\n```typescript\nimport { rest } from '<em>m</em>sw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to <em>m</em>ock an img src url? · Issue #461 · <em>m</em>swjs/<em>m</em>sw](https://github.com/<em>m</em>swjs/<em>m</em>sw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\n<em>m</em>swを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-12-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>swでSVGをモックする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Gatsby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "Pixelaを題材としてモックしてみた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>sw_<em>m</em>ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "71397493f188ec4f06b2ff7879cacb1b",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/multibyte_string_using_github_actions/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/multibyte_string_using_github_actions/index.md",
          "text": "\nマルチバイト文字列をActionsの中で扱う場合に気を付けようという話\n\n`git diff --name-only`で出力される内容からマルチバイト文字列を含むファイル名をgrepで検索して後続につなげるような処理をしたかった\n\n```shell\ngit diff --name-only | grep --color=no 'ファイル名' | xargs ....\n```\n\nというイメージ\n\nローカルではうまく動いたのでActionsの環境でも動かしてみたが期待通りの動作をせず\n\npipefail使っていなかったからってのもあるけど原因を突きとめるまで時間をとってしまった\n\nで、追っていったら`git diff --name-only`の結果が下記のようになっていた\n\n```\n'\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.md'\n```\n\nUTF-8エンコーディングされたバイト列が表示されていた…なるほどね…\n\n```shell\n$ printf '\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.md'\n買うもの.md\n```\n\npipeの後続でこの値ありきの処理をしていたのでgrepに引っかからずそれ以降の処理がされなかったというもの\n\nあんまりマルチバイト文字列をそのまま扱うっていうパターンがなかったのもあるが…\n\n## 対応\n\n下記どちらかで対応できる\n\n```\ngit config --global core.quotepath false\n```\n\n```\ngit -c core.quotepath=false diff --name-only\n```\n\n気を付けよう\n\nよく見たらローカルの`.gitconfig`には設定がしっかり入っていた\n\n### pipefail\n\n蛇足だが基本的にActionsに限らずシェルスクリプトではpipefail入れておいたほうがどこで問題があるか気付きやすいので入れておいたほうが良いといのをあらためて実感した\n\nActionsで設定するには下記\n\n### 参考\n- [Workflow syntax for GitHub Actions - GitHub Docs](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#custom-shell)\n- [GitHub Actions の shell option](https://zenn.dev/shunsuke_suzuki/scraps/172683d8bad652)\n\n## まとめ\n\n- Actions+Gitでマルチバイト文字を扱う場合は`core.auotepath`を設定する\n- 基本的にpipefailを有効にする\n",
          "date": "2024-11-26",
          "title": "GitHub Actions+Gitでのマルチバイト文字列表示",
          "tags": [
            "Git",
            "GitHubActions"
          ],
          "description": "core.quotepath",
          "slug": "/entries/multibyte_string_using_github_actions/",
          "internal": {
            "contentDigest": "2faed074af90601fe40b23e093f3534a"
          },
          "timeToRead": 1,
          "objectID": "1df88170-3ab4-5973-8b18-1decee93442a",
          "_snippetResult": {
            "text": {
              "value": "… 示されていた…なるほどね…\n\n```shell\n$ printf '\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.<em>m</em>d'\n買うもの.<em>m</em>d\n```\n\npipeの後続でこの値ありきの処理をしていた …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ultibyte_string_using_github_actions/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>ultibyte_string_using_github_actions/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nマルチバイト文字列をActionsの中で扱う場合に気を付けようという話\n\n`git diff --name-only`で出力される内容からマルチバイト文字列を含むファイル名をgrepで検索して後続につなげるような処理をしたかった\n\n```shell\ngit diff --name-only | grep --color=no 'ファイル名' | xargs ....\n```\n\nというイメージ\n\nローカルではうまく動いたのでActionsの環境でも動かしてみたが期待通りの動作をせず\n\npipefail使っていなかったからってのもあるけど原因を突きとめるまで時間をとってしまった\n\nで、追っていったら`git diff --name-only`の結果が下記のようになっていた\n\n```\n'\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.<em>m</em>d'\n```\n\nUTF-8エンコーディングされたバイト列が表示されていた…なるほどね…\n\n```shell\n$ printf '\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.<em>m</em>d'\n買うもの.<em>m</em>d\n```\n\npipeの後続でこの値ありきの処理をしていたのでgrepに引っかからずそれ以降の処理がされなかったというもの\n\nあんまりマルチバイト文字列をそのまま扱うっていうパターンがなかったのもあるが…\n\n## 対応\n\n下記どちらかで対応できる\n\n```\ngit config --global core.quotepath false\n```\n\n```\ngit -c core.quotepath=false diff --name-only\n```\n\n気を付けよう\n\nよく見たらローカルの`.gitconfig`には設定がしっかり入っていた\n\n### pipefail\n\n蛇足だが基本的にActionsに限らずシェルスクリプトではpipefail入れておいたほうがどこで問題があるか気付きやすいので入れておいたほうが良いといのをあらためて実感した\n\nActionsで設定するには下記\n\n### 参考\n- [Workflow syntax for GitHub Actions - GitHub Docs](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#custom-shell)\n- [GitHub Actions の shell option](https://zenn.dev/shunsuke_suzuki/scraps/172683d8bad652)\n\n## まとめ\n\n- Actions+Gitでマルチバイト文字を扱う場合は`core.auotepath`を設定する\n- 基本的にpipefailを有効にする\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2024-11-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub Actions+Gitでのマルチバイト文字列表示",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Git",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GitHubActions",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "core.quotepath",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ultibyte_string_using_github_actions/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "2faed074af90601fe40b23e093f3534a",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/markdownlint/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/markdownlint/index.md",
          "text": "\n[DavidAnson/markdownlint: A Node.js style checker and lint tool for Markdown/CommonMark files.](https://github.com/DavidAnson/markdownlint)\n\nMarkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .markdownlint.yml\n\n```yaml\nMD007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
          "date": "2022-07-26",
          "title": "markdownlintを使ってみた",
          "tags": [
            "markdownlint"
          ],
          "description": "markdownlint",
          "slug": "/entries/markdownlint/",
          "internal": {
            "contentDigest": "410a8e6ffe646cbda6a0c5821757d8a9"
          },
          "timeToRead": 1,
          "objectID": "1ac795c9-2538-521d-91e7-18bb390f82ce",
          "_snippetResult": {
            "text": {
              "value": "\n[DavidAnson/<em>m</em>arkdownlint: A Node.js style checker and lint tool for <em>M</em>arkdown/CommonMark files.](https://github.com/DavidAnson/<em>m</em>arkdownlint)\n\n<em>M</em>arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくら …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/<em>m</em>arkdownlint/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n[DavidAnson/<em>m</em>arkdownlint: A Node.js style checker and lint tool for <em>M</em>arkdown/CommonMark files.](https://github.com/DavidAnson/<em>m</em>arkdownlint)\n\n<em>M</em>arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .<em>m</em>arkdownlint.yml\n\n```yaml\n<em>M</em>D007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2022-07-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>arkdownlintを使ってみた",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "<em>m</em>arkdownlint",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "<em>m</em>arkdownlint",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/<em>m</em>arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "410a8e6ffe646cbda6a0c5821757d8a9",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/algolia_mock_with_msw/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/algolia_mock_with_msw/index.md",
          "text": "\nAlgoliaの検索リクエストをmswでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、mswで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONをmswを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスがmsw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"msw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
          "date": "2022-08-12",
          "title": "Algoliaのレスポンスをmswでモックして開発ではダミーレスポンスを扱う",
          "tags": [
            "Algolia",
            "msw",
            "TypeScript"
          ],
          "description": "実際のJSONを用意する",
          "slug": "/entries/algolia_mock_with_msw/",
          "internal": {
            "contentDigest": "7bd7f8494ba8c00196e1ea10d11e4c68"
          },
          "timeToRead": 3,
          "objectID": "f49a2a18-3ffc-5f6a-87b1-d66c7163e3b3",
          "_snippetResult": {
            "text": {
              "value": "\nAlgoliaの検索リクエストを<em>m</em>swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしな …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/algolia_<em>m</em>ock_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/algolia_<em>m</em>ock_with_<em>m</em>sw/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nAlgoliaの検索リクエストを<em>m</em>swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、<em>m</em>swで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONを<em>m</em>swを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスが<em>m</em>sw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"<em>m</em>sw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2022-08-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Algoliaのレスポンスを<em>m</em>swでモックして開発ではダミーレスポンスを扱う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Algolia",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "実際のJSONを用意する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/algolia_<em>m</em>ock_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "7bd7f8494ba8c00196e1ea10d11e4c68",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gatsby_migrate_v5/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/gatsby_migrate_v5/index.md",
          "text": "\n本ブログがGatsbyv4を使用していたのでv5に上げた\n\n合わせてNode18とも依存があるので18にもした（CloudflareにデプロイしているのでNode18対応を待ってた\n\nしっかり読まずに雰囲気で始めてしまったので時間かけてしまったが、基本的にMigrationガイド見ながら進めれば問題なさそう\n\n[Migrating from v4 to v5 | Gatsby](https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v4-to-v5/)\n\n以下やったこと\n\n## 依存モジュールの更新\n\nnode_modules削除、yarn.lock削除で再インストール\n\nrenovateだけだと各モジュール依存モジュールのバージョンまでは更新してくれないのでいろいろ不整合が発生した\n\nひとつずつ潰していく前にとりあえず試してみるで良い気がする\n\n```shell\n$ rm yarn.lock\n$ rm -rf node_modules\n$ yarn\n```\n\n結構lockファイルに差が出た\n\n## GraphQLのクエリ更新\n\ngroupとsortのフィールド指定の方法が変わったよう\n\nマイグレーションガイドみたら下記実行しろとのこと\n\n```\nnpx gatsby-codemods@latest sort-and-aggr-graphql .\n```\n\ncodemodsがBRAKING CHANGESの修正をしてくれる\n\n便利…\n\n結構時間かけてしまったけど完全にドキュメント読め案件\n\n\n## 型エラーの解消\n\nこれは自分のコードの問題だが一応合わせて対応したので残しておく\n\n```\n$ tsc --noEmit\ngatsby-browser.tsx:28:11 - error TS2559: Type '{ children: ReactNode; }' has no properties in common with type 'IntrinsicAttributes'.\n\n28   return <Layout {...props}>{element}</Layout>\n             ~~~~~~\n\nsrc/components/layout.tsx:9:29 - error TS2339: Property 'children' does not exist on type '{}'.\n\n9 const Layout: React.FC = ({ children }) => {\n```\n\n[React: Type {children: Element} has no properties in common with type IntrinsicAttributes | bobbyhadz](https://bobbyhadz.com/blog/react-type-children-has-no-properties-in-common)\n\nここを参考にした\n\nようはpropsを受け取らないコンポーネントに`props`渡すなって話らしい\n\nしかしながら`children`は必要なのでLayout側ではReactNodeの型定義を用意した\n\n他にもwarningはいくつか残っているがGatsby5で動作させられるところまで持っていけた\n\n## 該当PR\n\n[feature/gatsby v5 and node18 by swfz · Pull Request #1408 · swfz/til](https://github.com/swfz/til/pull/1408)",
          "date": "2023-04-26",
          "title": "Gatsbyのバージョンを5に上げた",
          "tags": [
            "Gatsby",
            "Node"
          ],
          "description": "マイグレーションガイドをしっかり読みましょう",
          "slug": "/entries/gatsby_migrate_v5/",
          "internal": {
            "contentDigest": "207719587907f26ffb5182515272b5df"
          },
          "timeToRead": 1,
          "objectID": "eece61fc-468c-5aa7-b89b-bc4e04f713ea",
          "_snippetResult": {
            "text": {
              "value": "… ったが、基本的に<em>M</em>igrationガイド見ながら進めれば問題なさそう\n\n[<em>M</em>igrating from v4 to v5 | Gatsby](https://www.gatsbyjs.com/docs/reference/release-notes/<em>m</em>igrating-from-v4-to-v5/)\n\n以下やったこ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gatsby_<em>m</em>igrate_v5/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/gatsby_<em>m</em>igrate_v5/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n本ブログがGatsbyv4を使用していたのでv5に上げた\n\n合わせてNode18とも依存があるので18にもした（CloudflareにデプロイしているのでNode18対応を待ってた\n\nしっかり読まずに雰囲気で始めてしまったので時間かけてしまったが、基本的に<em>M</em>igrationガイド見ながら進めれば問題なさそう\n\n[<em>M</em>igrating from v4 to v5 | Gatsby](https://www.gatsbyjs.com/docs/reference/release-notes/<em>m</em>igrating-from-v4-to-v5/)\n\n以下やったこと\n\n## 依存モジュールの更新\n\nnode_<em>m</em>odules削除、yarn.lock削除で再インストール\n\nrenovateだけだと各モジュール依存モジュールのバージョンまでは更新してくれないのでいろいろ不整合が発生した\n\nひとつずつ潰していく前にとりあえず試してみるで良い気がする\n\n```shell\n$ rm yarn.lock\n$ rm -rf node_<em>m</em>odules\n$ yarn\n```\n\n結構lockファイルに差が出た\n\n## GraphQLのクエリ更新\n\ngroupとsortのフィールド指定の方法が変わったよう\n\nマイグレーションガイドみたら下記実行しろとのこと\n\n```\nnpx gatsby-codemods@latest sort-and-aggr-graphql .\n```\n\ncodemodsがBRAKING CHANGESの修正をしてくれる\n\n便利…\n\n結構時間かけてしまったけど完全にドキュメント読め案件\n\n\n## 型エラーの解消\n\nこれは自分のコードの問題だが一応合わせて対応したので残しておく\n\n```\n$ tsc --noEmit\ngatsby-browser.tsx:28:11 - error TS2559: Type '{ children: ReactNode; }' has no properties in common with type 'IntrinsicAttributes'.\n\n28   return <Layout {...props}>{element}</Layout>\n             ~~~~~~\n\nsrc/components/layout.tsx:9:29 - error TS2339: Property 'children' does not exist on type '{}'.\n\n9 const Layout: React.FC = ({ children }) => {\n```\n\n[React: Type {children: Element} has no properties in common with type IntrinsicAttributes | bobbyhadz](https://bobbyhadz.com/blog/react-type-children-has-no-properties-in-common)\n\nここを参考にした\n\nようはpropsを受け取らないコンポーネントに`props`渡すなって話らしい\n\nしかしながら`children`は必要なのでLayout側ではReactNodeの型定義を用意した\n\n他にもwarningはいくつか残っているがGatsby5で動作させられるところまで持っていけた\n\n## 該当PR\n\n[feature/gatsby v5 and node18 by swfz · Pull Request #1408 · swfz/til](https://github.com/swfz/til/pull/1408)",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-04-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Gatsbyのバージョンを5に上げた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Gatsby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Node",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "マイグレーションガイドをしっかり読みましょう",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gatsby_<em>m</em>igrate_v5/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "207719587907f26ffb5182515272b5df",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/spreadsheet_month_calc/",
          "text": "\nどうやるんだろうと調べたら`EDATE`という月計算をするための関数があった\n\n[EDATE - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3092974?hl=ja)\n\nこんな感じ\n\n![alt](spreadsheet_month_calc01.png)\n\n![alt](spreadsheet_month_calc02.png)\n\n他にもあるんだろうかと調べてみたら月末日を算出する関数もあった\n\n[EOMONTH - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3093044?hl=ja)\n\n![alt](spreadsheet_month_calc03.png)\n\nプログラムだと結構月末日出したいっていうパターンはよくあるがSpreadsheetだとあんまり機会がないかも\n\nとはいえ両方めちゃくちゃはかどる",
          "date": "2023-03-15",
          "title": "スプレッドシートで月計算",
          "tags": [
            "Spreadsheet"
          ],
          "description": "EDATE",
          "slug": "/entries/spreadsheet_month_calc/",
          "internal": {
            "contentDigest": "3d452b62553d96694603ae778fe594f9"
          },
          "timeToRead": 1,
          "objectID": "cad626c1-34b5-5742-ae5c-9791dffefebb",
          "_snippetResult": {
            "text": {
              "value": "… ント エディタ ヘルプ](https://support.google.com/docs/answer/3092974?hl=ja)\n\nこんな感じ\n\n![alt](spreadsheet_<em>m</em>onth_calc01.png)\n\n![alt](spreadsheet_<em>m</em>onth_calc02.png)\n\n他にもあるんだろうかと調べてみたら …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/spreadsheet_<em>m</em>onth_calc/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nどうやるんだろうと調べたら`EDATE`という月計算をするための関数があった\n\n[EDATE - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3092974?hl=ja)\n\nこんな感じ\n\n![alt](spreadsheet_<em>m</em>onth_calc01.png)\n\n![alt](spreadsheet_<em>m</em>onth_calc02.png)\n\n他にもあるんだろうかと調べてみたら月末日を算出する関数もあった\n\n[EOMONTH - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3093044?hl=ja)\n\n![alt](spreadsheet_<em>m</em>onth_calc03.png)\n\nプログラムだと結構月末日出したいっていうパターンはよくあるがSpreadsheetだとあんまり機会がないかも\n\nとはいえ両方めちゃくちゃはかどる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-03-15",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "スプレッドシートで月計算",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Spreadsheet",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "EDATE",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/spreadsheet_<em>m</em>onth_calc/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "3d452b62553d96694603ae778fe594f9",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/netlify_manual_deploy/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/netlify_manual_deploy/index.md",
          "text": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get more Operations.\nError: Operations quota exceeded. Change plan to get more Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node_modules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your main site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to main site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== 'master' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `master`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
          "date": "2021-07-03",
          "title": "Netlifyに手動でデプロイする",
          "tags": [
            "Netlify",
            "Gatsby"
          ],
          "description": "netlify-cliを使う",
          "slug": "/entries/netlify_manual_deploy/",
          "internal": {
            "contentDigest": "45c18548227f9607682dc9da126cfa86"
          },
          "timeToRead": 3,
          "objectID": "baedc0a0-5eca-5bbd-8226-430fd35f98b1",
          "_snippetResult": {
            "text": {
              "value": "… まったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\nError: Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\n```\n\n途中で落ちてしまいデプロイ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/netlify_<em>m</em>anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/netlify_<em>m</em>anual_deploy/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\nError: Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node_<em>m</em>odules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your <em>m</em>ain site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to <em>m</em>ain site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== '<em>m</em>aster' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `<em>m</em>aster`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-07-03",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Netlifyに手動でデプロイする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Netlify",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Gatsby",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "netlify-cliを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/netlify_<em>m</em>anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "45c18548227f9607682dc9da126cfa86",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gem_maintenance/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/gem_maintenance/index.md",
          "text": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
          "date": "2021-01-04",
          "title": "Gemのメンテ時などで使用するコマンドの覚書",
          "tags": [
            "Ruby",
            "Gem"
          ],
          "description": "リリースとかまで",
          "slug": "/entries/gem_maintenance/",
          "internal": {
            "contentDigest": "87cd2efec3d37568c0137a4059bcb6a1"
          },
          "timeToRead": 1,
          "objectID": "844525cc-323a-5b4f-95bc-16b8a090ab50",
          "_snippetResult": {
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化し …",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gem_<em>m</em>aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/gem_<em>m</em>aintenance/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-01-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Gemのメンテ時などで使用するコマンドの覚書",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Ruby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Gem",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "リリースとかまで",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gem_<em>m</em>aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "87cd2efec3d37568c0137a4059bcb6a1",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/secret_manager_with_cli/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/secret_manager_with_cli/index.md",
          "text": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
          "date": "2021-04-06",
          "title": "SecretManagerの作成や更新をCLIで行う",
          "tags": [
            "GoogleCloudPlatform",
            "SecretManager"
          ],
          "description": "secrets versions add",
          "slug": "/entries/secret_manager_with_cli/",
          "internal": {
            "contentDigest": "1234a3f2fa105dad050e5e69a6948cce"
          },
          "timeToRead": 1,
          "objectID": "7b1a1351-c1b2-5749-8e6d-a337ced89eac",
          "_snippetResult": {
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレ …",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/secret_<em>m</em>anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/secret_<em>m</em>anager_with_cli/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-04-06",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "SecretManagerの作成や更新をCLIで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "SecretManager",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "secrets versions add",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/secret_<em>m</em>anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "1234a3f2fa105dad050e5e69a6948cce",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/node_map/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/node_map/index.md",
          "text": "\nSet,Mapを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## Map\n\n```javascript\nconst uniq = new Map();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [Map Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
          "date": "2020-06-29",
          "title": "ES2015のMap,Setで重複カット",
          "tags": [
            "ES2015",
            "JavaScript"
          ],
          "description": "Map Setを使うことで重複カット的なことが簡単に行える",
          "slug": "/entries/node_map/",
          "internal": {
            "contentDigest": "b15e6101a3eb086795fa344ddc902ffa"
          },
          "timeToRead": 1,
          "objectID": "4b36850f-8954-50e9-8c79-e8d0d0918a09",
          "_snippetResult": {
            "text": {
              "value": "… ようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## <em>M</em>ap\n\n```javascript\nconst uniq = new <em>M</em>ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/node_<em>m</em>ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/node_<em>m</em>ap/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nSet,<em>M</em>apを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## <em>M</em>ap\n\n```javascript\nconst uniq = new <em>M</em>ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [<em>M</em>ap Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2020-06-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "ES2015の<em>M</em>ap,Setで重複カット",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "ES2015",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "<em>M</em>ap Setを使うことで重複カット的なことが簡単に行える",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/node_<em>m</em>ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "b15e6101a3eb086795fa344ddc902ffa",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gsutil_move_bucket/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/gsutil_move_bucket/index.md",
          "text": "\n```shell\ngsutil -m cp -r 'gs://old-bucket/*' gs://new-bucket\n```\n\n`-m`はgsutilのオプションで並列実行\n\n`*`を入れないと同じディレクトリ構成にならない（シェルでの操作と同様）\n\n```\nnew-bucket/old-bucket\n```\n\nという感じでディレクトリが作成されてしまう\n",
          "date": "2023-09-07",
          "title": "gsutilで特定バケット以下のすべてのファイルを別バケットへコピーする",
          "tags": [
            "GoogleCloudPlatform",
            "GCS",
            "gsutil"
          ],
          "description": "ファイル移動と同様",
          "slug": "/entries/gsutil_move_bucket/",
          "internal": {
            "contentDigest": "f105fffdfc91f94a6475c593a64f17bd"
          },
          "timeToRead": 1,
          "objectID": "3a638eec-7862-504e-bc7e-5eee601bbfe7",
          "_snippetResult": {
            "text": {
              "value": "\n```shell\ngsutil -<em>m</em> cp -r 'gs://old-bucket/*' gs://new-bucket\n```\n\n`-<em>m</em>`はgsutilのオプションで並列実行\n\n`*`を入れないと同じディレクトリ構成にならない（シェル …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gsutil_<em>m</em>ove_bucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/gsutil_<em>m</em>ove_bucket/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n```shell\ngsutil -<em>m</em> cp -r 'gs://old-bucket/*' gs://new-bucket\n```\n\n`-<em>m</em>`はgsutilのオプションで並列実行\n\n`*`を入れないと同じディレクトリ構成にならない（シェルでの操作と同様）\n\n```\nnew-bucket/old-bucket\n```\n\nという感じでディレクトリが作成されてしまう\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-09-07",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "gsutilで特定バケット以下のすべてのファイルを別バケットへコピーする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GCS",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "gsutil",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ファイル移動と同様",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gsutil_<em>m</em>ove_bucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "f105fffdfc91f94a6475c593a64f17bd",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/jest_with_msw/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/jest_with_msw/index.md",
          "text": "\n開発用に定義したmswの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../mocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // mswでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"msw\"\nimport { setupServer } from \"msw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + mswのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
          "date": "2022-08-19",
          "title": "mswのモックをjestのテストでも使う",
          "tags": [
            "Jest",
            "msw",
            "TypeScript"
          ],
          "description": "開発時と同様",
          "slug": "/entries/jest_with_msw/",
          "internal": {
            "contentDigest": "cb26c9401a09c7486cd06eff588ff7a7"
          },
          "timeToRead": 1,
          "objectID": "b42b1c17-8031-515a-b628-71a053c72bf4",
          "_snippetResult": {
            "text": {
              "value": "… ト\", async () => {\n    // <em>m</em>swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"<em>m</em>sw\"\nimport { setupServer } from \"<em>m</em>sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/jest_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/jest_with_<em>m</em>sw/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n開発用に定義した<em>m</em>swの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../<em>m</em>ocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // <em>m</em>swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"<em>m</em>sw\"\nimport { setupServer } from \"<em>m</em>sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + <em>m</em>swのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2022-08-19",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>swのモックをjestのテストでも使う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Jest",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "開発時と同様",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/jest_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "cb26c9401a09c7486cd06eff588ff7a7",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/ruby_front_matter_parser/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/ruby_front_matter_parser/index.md",
          "text": "\n## metadata\n\nGatsbyなどでも使っているMarkdownにタイトルなどの情報を付与するための構文\n\nfront_matterと言うらしい\n\nRubyでMarkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront_matterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include metadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-metadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.md\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front_matter_parser\"\ntags:\n  - Ruby\n  - Markdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(main)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(main)> parsed = FrontMatterParser::Parser.parse_file('hoge.md', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front_matter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front_matter_parser\",\n   \"tags\"=>[\"Ruby\", \"Markdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
          "date": "2020-09-14",
          "title": "Rubyでmarkdownのmetadata(front_matter)をパースする",
          "tags": [
            "Ruby",
            "Markdown"
          ],
          "description": "front_matter_parser",
          "slug": "/entries/ruby_front_matter_parser/",
          "internal": {
            "contentDigest": "d14ff38728ef3e9d2dd18a1e40741c64"
          },
          "timeToRead": 2,
          "objectID": "a1400a00-3780-5fa7-ba31-98a21079d347",
          "_snippetResult": {
            "text": {
              "value": "\n## <em>m</em>etadata\n\nGatsbyなどでも使っている<em>M</em>arkdownにタイトルなどの情報を付与するための構文\n\nfront_<em>m</em>atterと言うらしい\n\nRubyで<em>M</em>arkdownをパースして …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/ruby_front_<em>m</em>atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/ruby_front_<em>m</em>atter_parser/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n## <em>m</em>etadata\n\nGatsbyなどでも使っている<em>M</em>arkdownにタイトルなどの情報を付与するための構文\n\nfront_<em>m</em>atterと言うらしい\n\nRubyで<em>M</em>arkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront_<em>m</em>atterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include <em>m</em>etadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-<em>m</em>etadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front_<em>m</em>atter_parser: Ruby library to parse files or strings with a front <em>m</em>atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_<em>m</em>atter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.<em>m</em>d\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front_<em>m</em>atter_parser\"\ntags:\n  - Ruby\n  - <em>M</em>arkdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(<em>m</em>ain)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(<em>m</em>ain)> parsed = FrontMatterParser::Parser.parse_file('hoge.<em>m</em>d', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front_<em>m</em>atter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front_<em>m</em>atter_parser\",\n   \"tags\"=>[\"Ruby\", \"<em>M</em>arkdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front_<em>m</em>atter_parser: Ruby library to parse files or strings with a front <em>m</em>atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_<em>m</em>atter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2020-09-14",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Rubyで<em>m</em>arkdownの<em>m</em>etadata(front_<em>m</em>atter)をパースする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Ruby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "<em>M</em>arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "front_<em>m</em>atter_parser",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/ruby_front_<em>m</em>atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "d14ff38728ef3e9d2dd18a1e40741c64",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/looker_studio_metrics_selector/",
          "text": "\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n最近またLookerStudioで頻繁にダッシュボードをいじることが増えて発見してよいなと思った機能\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n`オプション指標`という設定がほぼどのグラフにもついていて、通常表示する指標のほかにプラスで指定できるというもの\n\nグラフの種類によっては複数選択可能になっている（単一指標しか選択できないグラフもある）\n\n## 設定箇所\n\n![alt](looker_studio_metrics_selector01.png)\n\nたとえば、Togglの作業記録を取っていて可視化した場合に、分と時間という異なる単位の指標を切り分ける\n\n<!-- textlint-disable prh -->\n## 週と曜日のピボットテーブルでの作業時間\n<!-- textlint-enable prh -->\n\n### 時間で表示\n\n読書時間をフィルタした結果\n\n1未満が多くしっくり来ない…\n\n![alt](looker_studio_metrics_selector02.png)\n\nハイライト部分をクリックすると設定で指定した指標が選べる\n\n![alt](looker_studio_metrics_selector03.png)\n\n### 複数表示\n\n![alt](looker_studio_metrics_selector04.png)\n\n\n### 分のみ表示\n\n\nあまり多くないので分表示のほうがしっくり頭に入ってくる\n\n逆に大まかな分類の場合は時間での表示のほうが頭に入ってきやすい\n\n![alt](looker_studio_metrics_selector05.png)\n\n他にも時系列グラフでも指定可能なのでバリエーションは結構広がる\n",
          "date": "2024-06-28",
          "title": "LookerStudioで表示する指標を選べるようにする",
          "tags": [
            "LookerStudio"
          ],
          "description": "",
          "slug": "/entries/looker_studio_metrics_selector/",
          "internal": {
            "contentDigest": "49b33705dfe4360864aad9e0d6abd896"
          },
          "timeToRead": 1,
          "objectID": "3e845a62-e2e6-5d86-a81d-1011a2832055",
          "_snippetResult": {
            "text": {
              "value": "… 分をクリックすると設定で指定した指標が選べる\n\n![alt](looker_studio_<em>m</em>etrics_selector03.png)\n\n### 複数表示\n\n![alt](looker_studio_<em>m</em>etrics_selector04.png)\n\n\n### 分のみ表示\n\n\nあまり多くない …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/looker_studio_<em>m</em>etrics_selector/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n最近またLookerStudioで頻繁にダッシュボードをいじることが増えて発見してよいなと思った機能\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n`オプション指標`という設定がほぼどのグラフにもついていて、通常表示する指標のほかにプラスで指定できるというもの\n\nグラフの種類によっては複数選択可能になっている（単一指標しか選択できないグラフもある）\n\n## 設定箇所\n\n![alt](looker_studio_<em>m</em>etrics_selector01.png)\n\nたとえば、Togglの作業記録を取っていて可視化した場合に、分と時間という異なる単位の指標を切り分ける\n\n<!-- textlint-disable prh -->\n## 週と曜日のピボットテーブルでの作業時間\n<!-- textlint-enable prh -->\n\n### 時間で表示\n\n読書時間をフィルタした結果\n\n1未満が多くしっくり来ない…\n\n![alt](looker_studio_<em>m</em>etrics_selector02.png)\n\nハイライト部分をクリックすると設定で指定した指標が選べる\n\n![alt](looker_studio_<em>m</em>etrics_selector03.png)\n\n### 複数表示\n\n![alt](looker_studio_<em>m</em>etrics_selector04.png)\n\n\n### 分のみ表示\n\n\nあまり多くないので分表示のほうがしっくり頭に入ってくる\n\n逆に大まかな分類の場合は時間での表示のほうが頭に入ってきやすい\n\n![alt](looker_studio_<em>m</em>etrics_selector05.png)\n\n他にも時系列グラフでも指定可能なのでバリエーションは結構広がる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2024-06-28",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "LookerStudioで表示する指標を選べるようにする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "LookerStudio",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/looker_studio_<em>m</em>etrics_selector/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "49b33705dfe4360864aad9e0d6abd896",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/cloudwatch_logs_multi_line_log/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/cloudwatch_logs_multi_line_log/index.md",
          "text": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`multi_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"multi_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route matches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
          "date": "2021-04-02",
          "title": "CloudWatchLogsで複数行またいだログを適切に扱う",
          "tags": [
            "AWS",
            "CloudWatchLogs"
          ],
          "description": "multi_line_start_parttern",
          "slug": "/entries/cloudwatch_logs_multi_line_log/",
          "internal": {
            "contentDigest": "783a8a9991c33692940b554910785efe"
          },
          "timeToRead": 1,
          "objectID": "2dbf17a8-49aa-51f4-8d38-4a67b4a9d21a",
          "_snippetResult": {
            "text": {
              "value": "… 複数行のログでも1つのまとまりとして扱いたい\n\nそこで`<em>m</em>ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現に …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/cloudwatch_logs_<em>m</em>ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/cloudwatch_logs_<em>m</em>ulti_line_log/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`<em>m</em>ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"<em>m</em>ulti_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route <em>m</em>atches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-04-02",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "CloudWatchLogsで複数行またいだログを適切に扱う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "AWS",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "CloudWatchLogs",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "<em>m</em>ulti_line_start_parttern",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/cloudwatch_logs_<em>m</em>ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "783a8a9991c33692940b554910785efe",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/zip_response_using_msw/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/zip_response_using_msw/index.md",
          "text": "\nmswでモックする対象として`zip`や動画などバイナリファイルも扱える\n\n次の例はGitHub Actionsの各ジョブのログをあらかじめDLしておきそれを読み込みレスポンスとして返す処理\n\n- handlerの例\n\n```typescript\nexport const handlers = [\n  http.get('https://api.github.com/repos/*/*/actions/runs/*/logs', () => {\n    const buffer = fs.readFileSync(\n      path.resolve(process.cwd(), './src/mocks/responses/failed_log.zip')\n    )\n\n    return HttpResponse.arrayBuffer(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip'\n      }\n    })\n  })\n]\n```\n\n公式の例では`mp4`をバイナリとして返している\n\n基本的にはこの方法でバイナリファイルでもレスポンスをモックすることが可能\n\n- 公式\n\n[Responding with binary - Mock Service Worker](https://mswjs.io/docs/recipes/responding-with-binary/)\n",
          "date": "2024-01-23",
          "title": "mswでzipレスポンスを返す",
          "tags": [
            "msw",
            "zip"
          ],
          "description": "HttpResponse.arrayBuffer",
          "slug": "/entries/zip_response_using_msw/",
          "internal": {
            "contentDigest": "7f9b54300aa0d7b74023b091384b3ec7"
          },
          "timeToRead": 1,
          "objectID": "48c1d237-66e6-5a93-aaa4-3b1026447702",
          "_snippetResult": {
            "text": {
              "value": "… の例\n\n```typescript\nexport const handlers = [\n  http.get('https://api.github.com/repos/*/*/actions/runs/*/logs', () => {\n    const buffer = fs.readFileSync(\n      path.resolve(process.cwd(), './src/<em>m</em>ocks/responses/failed_log.zip')\n    )\n\n    return HttpResponse.arrayBuffer(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip'\n      }\n    })\n  })\n]\n```\n\n公式の例では`<em>m</em>p4`をバ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/zip_response_using_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/<em>m</em>aster/content/blog//entries/zip_response_using_<em>m</em>sw/index.<em>m</em>d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n<em>m</em>swでモックする対象として`zip`や動画などバイナリファイルも扱える\n\n次の例はGitHub Actionsの各ジョブのログをあらかじめDLしておきそれを読み込みレスポンスとして返す処理\n\n- handlerの例\n\n```typescript\nexport const handlers = [\n  http.get('https://api.github.com/repos/*/*/actions/runs/*/logs', () => {\n    const buffer = fs.readFileSync(\n      path.resolve(process.cwd(), './src/<em>m</em>ocks/responses/failed_log.zip')\n    )\n\n    return HttpResponse.arrayBuffer(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip'\n      }\n    })\n  })\n]\n```\n\n公式の例では`<em>m</em>p4`をバイナリとして返している\n\n基本的にはこの方法でバイナリファイルでもレスポンスをモックすることが可能\n\n- 公式\n\n[Responding with binary - <em>M</em>ock Service Worker](https://<em>m</em>swjs.io/docs/recipes/responding-with-binary/)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2024-01-23",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>swでzipレスポンスを返す",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "zip",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "HttpResponse.arrayBuffer",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/zip_response_using_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "7f9b54300aa0d7b74023b091384b3ec7",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 205,
      "page": 0,
      "nbPages": 11,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": {
        "nbHits": true,
        "typo": true
      },
      "query": "m",
      "params": "query=m",
      "index": "til",
      "renderingContent": {},
      "processingTimeMS": 1,
      "processingTimingsMS": {
        "_request": {
          "roundTrip": 1
        },
        "afterFetch": {
          "format": {
            "highlighting": 1,
            "snippeting": 2,
            "total": 5
          }
        },
        "total": 1
      },
      "serverTimeMS": 6
    },
    {
      "hits": [
        {
          "title": "MkDocsにプレゼンテーション機能をつける",
          "date": "2016-03-02",
          "slug": "other/mkdocs_remark",
          "github": "https://github.com/swfz/memo/blob/master/docs/other/mkdocs_remark.md",
          "url": "http://swfz.hatenablog.com/entry/2016/03/02/140827",
          "section": "other/mkdocs_remark",
          "tags": [
            "other",
            "JavaScript",
            "MkDocs"
          ],
          "text": "# MkDocsにプレゼンテーション機能をつける\n\n今回はMkDocsで生成したサイト内にプレゼンテーション機能を追加してみます\n\n## 動機\n\n- MkDocsでスライド用資料も管理したい\n- 資料とプレゼンを一ヵ所で閲覧できるようにしたい(某wikiと同様)\n\nということで、少し調べてみた結果割と簡単にできそうだったのでやってみました\n\nMkDocsのインストール、カスタマイズは下記から\n\n[MkDocsでドキュメント管理](http://swfz.hatenablog.com/entry/2015/07/28/031712)\n\n## remark.js\n\nmarkdownプレゼンで使うのは[remark.js](http://remarkjs.com/)を使います\n\n理由は下記\n\n- jsとMarkdownを分離できる\n- buildが必要ない\n- ツール専用の書式を追加しなくて良い\n    - カスタマイズをしない場合\n\nHTMLとMarkdownを分離して書けるのが良いところ\n\nまたレイアウトなどもCSSを読み込ませればいくらでもカスタマイズできるようなのであらかじめいくつか用意すればバリエーションは増やせそう\n\n今回は特にCSSまでは手を出しません\n\n## slide用のページを作成する\n### 共通ページを用意\n\n`/slide/`のパスでスライド用のページを用意します\n\n- mkdocs.yml\n\n```\npages:\n+   - 'slide': 'slide.md'\n```\n\n- docs/slide.md\n\n```\npagetype: slide\n```\n\n\n- custom/content.html\n\n```\n{% if meta.pagetype|join(\"\") == 'slide' %}\n  {% include \"slide.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\nmeta情報をテンプレート側で参照できるのでそれを使って読み込む対象を変えます\n\nカスタムテーマを使っているのでもはやフロントで行えることは何でもできるのですが…\n\n- custom/slide.html\n\nこのページでremark.jsの読み込みとmdファイルの読み込みを行います\n\n各ページからのURLにクエリパラメータを付与してあげてそれを元に対象のMarkdownファイルを特定します\n\nbodyのstyleを上書きしているのはremarkのプレゼンではpaddingが必要ないので打ち消すため\n\n```html\n<script src=\"http://gnab.github.io/remark/downloads/remark-latest.min.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\nvar params         = parseParams();\nvar locationStr    = location.toString().replace(/\\/slide.*/, \"\");\nvar mdFileLocation = paramToMdFileLocation(locationStr,params);\n\ndocument.getElementsByTagName('body')[0].setAttribute(\"style\",\"padding-top:0px\");\nvar slideshow = remark.create({\n  sourceUrl: mdFileLocation\n});\n\nfunction paramToMdFileLocation(locationStr,params){\n  var mdFileLocation = ( params[\"c\"] ) ?\n    ( params[\"n\"] )\n      ? locationStr + \"/\" + params[\"c\"] + \"/\" + params[\"n\"] + \".md\"\n      : locationStr + \"/\" + params[\"c\"] + \".md\"\n    : '/notfound.md';\n\n  return mdFileLocation;\n}\n\nfunction parseParams(){\n  var queryStr = window.location.search;\n  var queryStrings = queryStr.slice(1).split('&');\n  var params = [];\n\n  queryStrings.forEach(function(query){\n    var keyValue = query.split('=');\n    params[ keyValue[0] ] = keyValue[1];\n  });\n\n  return params;\n}\n</script>\n```\n\n## 各記事の修正\n### スライドページへのリンクを作成\n\n各ページからのリンクを生成します\n\n各ページの共通部分なのでcontent.htmlに追記します\n\n現在のページの情報を`{{ current_page }}`で参照できるのでそれを正規表現で分解してあげてMarkdownファイルのパスを取得させます\n\nサブカテゴリがある場合にも対応させました\n\n- content.html\n\n```\n<a id=\"slideLink\">\n  <span class=\"label label-info\">Presentation Mode</span>\n</a>\n\n<script type=\"text/javascript\">\nvar current = (function() {/*\n\"{{ current_page }}\"\n*/}).toString();\nvar path = ( current.match(\" - / \") )\n    ? 'index'\n    : current.replace(/\\n|\\r/g, \"\").replace(/.*- \\/(.*)\\/(.*)\\/.*$/g, \"$1\");\nvar params = path.split(\"/\");\nvar linkElement = document.getElementById(\"slideLink\");\nvar locationStr = location.toString();\nparams.forEach(function(p){\n  locationStr = locationStr.replace(\"/\" + p,'');\n});\nvar slideLocationStr = ( locationStr + \"/slide/\" ).replace(\"//slide\", \"/slide\");\nif ( params[1] ) {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] + \"&n=\" + params[1] );\n}\nelse {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] );\n}\n</script>\n\n....\n....\n{{ content }}\n....\n....\n```\n\n### baseテンプレートの修正\n\n- base.html\n\nサイト内の検索機能を提供するsearch.jsの読み込みでrequire.jsを使っていて、remark.jsでも使用していて競合していました\n\nスライドページの表示ではそもそも検索機能を提供はしないのでページによって読み込むjsを制御できるように修正します\n\nblockで囲む範囲を広げて通常ページとスライド用ページで読み込むjsを分割しました\n\n```\n{% block content %}\n{% if meta.manage|join(\"\") == 'slide' %}\n  {% include \"content.html\" %}\n{% else %}\n  {% include \"content.html\" %}\n  {# footerの描画処理 }\n  {# jsの読み込み処理 }\n  <script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"></script>\n{% endif %}\n{% endblock %}\n```\n\n## patchを当てる\n\nremark.jsではMarkdownファイルが必要なので読み込ませられる場所に配置してあげる必要がありました\n\nこれに関してはフロントだけでは解決できなかったのでやむなくパッチを作って当てました\n\n<script src=\"https://gist.github.com/swfz/e7d285150aed3397938e.js\"></script>\n\n```\ncd ~/.anyenv/envs/pyenv/versions/2.7.10/lib/python2.7/site-packages/mkdocs/utils\npatch -p1 < remark_slide.patch\n```\n\n## 記事の編集\n\nスライドの区切り`---`を追加してあげると各ページのリンクから\n\n![text](mkdocs_remark02.PNG)\n\n見事スライドも見せることができるようになりました\n\n![text](mkdocs_remark01.PNG)\n\n\n## まとめ\n\n割と簡単に実装できましたが色々残念な部分も残ってしまいました\n\n- serveモードでは実現できない(mdファイルが読み込めない)\n- フロントのコードをちょっとサボったため`.md`のファイルしか読み込めない(mkdocsでは他の拡張子も対応している)\n- スライドの方はCSSを適用させていないので簡素な感じ\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n何個か上げてみましたが、研修で資料とプレゼン資料を兼ねたい場合などに使えそうに思います\n\nただ、実際にremark.jsを使ってスライドを作っていないので実際にやってみたら不便があるかもしれません…\n\n良くあるHTMLスライドでスライド専用の記述をしなくてはならなくなるのが嫌だったので、それをせずにカスタマイズをどのくらいできるか今後試してみたいと思います\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n最後にサンプルへのリンクを張っておわり\n\n[mkdocs_sample](http://swfz.github.io/mkdocs_sample/)\n\n\n",
          "objectID": "other/mkdocs_remark",
          "_snippetResult": {
            "text": {
              "value": "var locationStr    = location.toString().replace(/\\/slide.*/, \"\");\nvar __ais-highlight__m__/ais-highlight__dFileLocation = paramToMdFileLocation(locationStr,params);\n\ndocument.getElementsByTagName('body')[0].setAttribute(\"style\",\"padding-top:0px\");\nvar slideshow = remark.create({\n  sourceUrl: __ais-highlight__m__/ais-highlight__dFileLocation\n});\n\nfunction paramToMdFileLocation(locationStr,params){\n  var __ais-highlight__m__/ais-highlight__dFileLocation = ( params[\"c\"] ) ?\n    ( params[\"n\"] )\n      ? locationStr + \"/\" + params[\"c\"] + \"/\" + params[\"n\"] + \".__ais-highlight__m__/ais-highlight__d\"\n      : locationStr + \"/\" + params[\"c\"] + \".__ais-highlight__m__/ais-highlight__d\"\n    : '/notfound.__ais-highlight__m__/ais-highlight__d';\n\n  return __ais-highlight__m__/ais-highlight__dFileLocation",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__kDocsにプレゼンテーション機能をつける",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2016-03-02",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_remark",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/other/__ais-highlight__m__/ais-highlight__kdocs_remark.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2016/03/02/140827",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_remark",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "other",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__kDocs",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__kDocsにプレゼンテーション機能をつける\n\n今回は__ais-highlight__M__/ais-highlight__kDocsで生成したサイト内にプレゼンテーション機能を追加してみます\n\n## 動機\n\n- __ais-highlight__M__/ais-highlight__kDocsでスライド用資料も管理したい\n- 資料とプレゼンを一ヵ所で閲覧できるようにしたい(某wikiと同様)\n\nということで、少し調べてみた結果割と簡単にできそうだったのでやってみました\n\n__ais-highlight__M__/ais-highlight__kDocsのインストール、カスタマイズは下記から\n\n[__ais-highlight__M__/ais-highlight__kDocsでドキュメント管理](http://swfz.hatenablog.com/entry/2015/07/28/031712)\n\n## remark.js\n\n__ais-highlight__m__/ais-highlight__arkdownプレゼンで使うのは[remark.js](http://remarkjs.com/)を使います\n\n理由は下記\n\n- jsと__ais-highlight__M__/ais-highlight__arkdownを分離できる\n- buildが必要ない\n- ツール専用の書式を追加しなくて良い\n    - カスタマイズをしない場合\n\nHTMLと__ais-highlight__M__/ais-highlight__arkdownを分離して書けるのが良いところ\n\nまたレイアウトなどもCSSを読み込ませればいくらでもカスタマイズできるようなのであらかじめいくつか用意すればバリエーションは増やせそう\n\n今回は特にCSSまでは手を出しません\n\n## slide用のページを作成する\n### 共通ページを用意\n\n`/slide/`のパスでスライド用のページを用意します\n\n- __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```\npages:\n+   - 'slide': 'slide.__ais-highlight__m__/ais-highlight__d'\n```\n\n- docs/slide.__ais-highlight__m__/ais-highlight__d\n\n```\npagetype: slide\n```\n\n\n- custom/content.html\n\n```\n{% if __ais-highlight__m__/ais-highlight__eta.pagetype|join(\"\") == 'slide' %}\n  {% include \"slide.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\n__ais-highlight__m__/ais-highlight__eta情報をテンプレート側で参照できるのでそれを使って読み込む対象を変えます\n\nカスタムテーマを使っているのでもはやフロントで行えることは何でもできるのですが…\n\n- custom/slide.html\n\nこのページでremark.jsの読み込みと__ais-highlight__m__/ais-highlight__dファイルの読み込みを行います\n\n各ページからのURLにクエリパラメータを付与してあげてそれを元に対象の__ais-highlight__M__/ais-highlight__arkdownファイルを特定します\n\nbodyのstyleを上書きしているのはremarkのプレゼンではpaddingが必要ないので打ち消すため\n\n```html\n<script src=\"http://gnab.github.io/remark/downloads/remark-latest.min.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\nvar params         = parseParams();\nvar locationStr    = location.toString().replace(/\\/slide.*/, \"\");\nvar __ais-highlight__m__/ais-highlight__dFileLocation = paramToMdFileLocation(locationStr,params);\n\ndocument.getElementsByTagName('body')[0].setAttribute(\"style\",\"padding-top:0px\");\nvar slideshow = remark.create({\n  sourceUrl: __ais-highlight__m__/ais-highlight__dFileLocation\n});\n\nfunction paramToMdFileLocation(locationStr,params){\n  var __ais-highlight__m__/ais-highlight__dFileLocation = ( params[\"c\"] ) ?\n    ( params[\"n\"] )\n      ? locationStr + \"/\" + params[\"c\"] + \"/\" + params[\"n\"] + \".__ais-highlight__m__/ais-highlight__d\"\n      : locationStr + \"/\" + params[\"c\"] + \".__ais-highlight__m__/ais-highlight__d\"\n    : '/notfound.__ais-highlight__m__/ais-highlight__d';\n\n  return __ais-highlight__m__/ais-highlight__dFileLocation;\n}\n\nfunction parseParams(){\n  var queryStr = window.location.search;\n  var queryStrings = queryStr.slice(1).split('&');\n  var params = [];\n\n  queryStrings.forEach(function(query){\n    var keyValue = query.split('=');\n    params[ keyValue[0] ] = keyValue[1];\n  });\n\n  return params;\n}\n</script>\n```\n\n## 各記事の修正\n### スライドページへのリンクを作成\n\n各ページからのリンクを生成します\n\n各ページの共通部分なのでcontent.htmlに追記します\n\n現在のページの情報を`{{ current_page }}`で参照できるのでそれを正規表現で分解してあげて__ais-highlight__M__/ais-highlight__arkdownファイルのパスを取得させます\n\nサブカテゴリがある場合にも対応させました\n\n- content.html\n\n```\n<a id=\"slideLink\">\n  <span class=\"label label-info\">Presentation __ais-highlight__M__/ais-highlight__ode</span>\n</a>\n\n<script type=\"text/javascript\">\nvar current = (function() {/*\n\"{{ current_page }}\"\n*/}).toString();\nvar path = ( current.__ais-highlight__m__/ais-highlight__atch(\" - / \") )\n    ? 'index'\n    : current.replace(/\\n|\\r/g, \"\").replace(/.*- \\/(.*)\\/(.*)\\/.*$/g, \"$1\");\nvar params = path.split(\"/\");\nvar linkElement = document.getElementById(\"slideLink\");\nvar locationStr = location.toString();\nparams.forEach(function(p){\n  locationStr = locationStr.replace(\"/\" + p,'');\n});\nvar slideLocationStr = ( locationStr + \"/slide/\" ).replace(\"//slide\", \"/slide\");\nif ( params[1] ) {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] + \"&n=\" + params[1] );\n}\nelse {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] );\n}\n</script>\n\n....\n....\n{{ content }}\n....\n....\n```\n\n### baseテンプレートの修正\n\n- base.html\n\nサイト内の検索機能を提供するsearch.jsの読み込みでrequire.jsを使っていて、remark.jsでも使用していて競合していました\n\nスライドページの表示ではそもそも検索機能を提供はしないのでページによって読み込むjsを制御できるように修正します\n\nblockで囲む範囲を広げて通常ページとスライド用ページで読み込むjsを分割しました\n\n```\n{% block content %}\n{% if __ais-highlight__m__/ais-highlight__eta.__ais-highlight__m__/ais-highlight__anage|join(\"\") == 'slide' %}\n  {% include \"content.html\" %}\n{% else %}\n  {% include \"content.html\" %}\n  {# footerの描画処理 }\n  {# jsの読み込み処理 }\n  <script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"></script>\n{% endif %}\n{% endblock %}\n```\n\n## patchを当てる\n\nremark.jsでは__ais-highlight__M__/ais-highlight__arkdownファイルが必要なので読み込ませられる場所に配置してあげる必要がありました\n\nこれに関してはフロントだけでは解決できなかったのでやむなくパッチを作って当てました\n\n<script src=\"https://gist.github.com/swfz/e7d285150aed3397938e.js\"></script>\n\n```\ncd ~/.anyenv/envs/pyenv/versions/2.7.10/lib/python2.7/site-packages/__ais-highlight__m__/ais-highlight__kdocs/utils\npatch -p1 < remark_slide.patch\n```\n\n## 記事の編集\n\nスライドの区切り`---`を追加してあげると各ページのリンクから\n\n![text](__ais-highlight__m__/ais-highlight__kdocs_remark02.PNG)\n\n見事スライドも見せることができるようになりました\n\n![text](__ais-highlight__m__/ais-highlight__kdocs_remark01.PNG)\n\n\n## まとめ\n\n割と簡単に実装できましたが色々残念な部分も残ってしまいました\n\n- serveモードでは実現できない(__ais-highlight__m__/ais-highlight__dファイルが読み込めない)\n- フロントのコードをちょっとサボったため`.__ais-highlight__m__/ais-highlight__d`のファイルしか読み込めない(__ais-highlight__m__/ais-highlight__kdocsでは他の拡張子も対応している)\n- スライドの方はCSSを適用させていないので簡素な感じ\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n何個か上げてみましたが、研修で資料とプレゼン資料を兼ねたい場合などに使えそうに思います\n\nただ、実際にremark.jsを使ってスライドを作っていないので実際にやってみたら不便があるかもしれません…\n\n良くあるHTMLスライドでスライド専用の記述をしなくてはならなくなるのが嫌だったので、それをせずにカスタマイズをどのくらいできるか今後試してみたいと思います\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n最後にサンプルへのリンクを張っておわり\n\n[__ais-highlight__m__/ais-highlight__kdocs_sample](http://swfz.github.io/__ais-highlight__m__/ais-highlight__kdocs_sample/)\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "mkdocsの検索を日本語に対応させてみる",
          "date": "2016-02-22",
          "slug": "other/mkdocs_jp",
          "github": "https://github.com/swfz/memo/blob/master/docs/other/mkdocs_jp.md",
          "url": "http://swfz.hatenablog.com/entry/2016/02/22/234434",
          "section": "other/mkdocs_jp",
          "tags": [
            "other",
            "MkDocs",
            "JavaScript"
          ],
          "text": "# MkDocsの検索を日本語に対応させてみる\n\nMkDocsのサイト内検索で日本語検索に対応していないという話があったので対応させたいなと思い調べてみた\n\n中身を読んだらlunrという全文検索ライブラリを用いているよう\n\njekyllにもlunr.jsを使ったプラグインがあるようで結構有名なのかな\n\nで、このlunr.jsがデフォルトだと日本語での検索に対応していない\n\nしかし、幸いなことに日本語対応の方法もすでにあるらしいので、下記を参考に対応してみる\n\n## [lunr-languages](https://github.com/MihaiValentin/lunr-languages )\n\nlunr.jsの多言語対応用ライブラリ\n\nサイトにしたがって修正していけば日本語にも対応できそう\n\n見ながら修正した結果無事日本語検索ができるようになりました\n\n![text](mkdocs_jp01.PNG)\n\nなので既存のmkdocsのsearch.jsに対してのパッチを作った\n\n<script src=\"https://gist.github.com/swfz/95d003b7ae4f3ec26909.js\"></script>\n\nこれで日本語検索もできるようになりました!めでたしめでたし!\n\n## 課題\n\n検索できました、良かった!と思ったのですがとても重い\n\nすべての画面でjsの読み込みが発生していてページ遷移するたびに10秒くらい待たされてブラウザ上で操作できない\n\nプロファイルをとってみると上記で入れたtinysegmenterというのが悪さをしているよう、再帰呼び出しをしていてとても重くなっているところまで判明しました\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nリファクタリングするかとも思ったけど、中身見た感じ ~~ 正直よく分からない ~~ 時間かかりそうだったのでいったん検索のモーダルが表示された段階(検索機能を使用する)でjsを読み込むように変更しました\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n- custom/js/baes.js\n\n```\n+ function loadSearchJs(){\n+   var scriptElement = document.createElement('script');\n+   scriptElement.setAttribute('data-main', base_url + \"/mkdocs/js/search.js\");\n+   scriptElement.src = base_url + \"/mkdocs/js/require.js\";\n+   document.body.appendChild(scriptElement);\n+ }\n\n.....\n.....\n.....\n\n    // make sure search input gets autofocus everytime modal opens.\n    $search_modal.on('shown.bs.modal', function () {\n+      loadSearchJs();\n        $search_modal.find('#mkdocs-search-query').focus();\n    });\n```\n\n根本解決にはなっていないのですが、毎度ページが読み込まれるたびに固まることはなくなったので少しは使えるように\n\n`site/mkdocs/search_index.json`というファイルにすべての記事のインデックス情報が格納されていて現状16Mあったので、そりゃ重くなるわな、、、といったところ\n\n他の小さいサンプルで試したらさくさく動いてくれたのでどのくらいで重くなってくるのかはちょっと気になるところです\n\nということで、文書量の問題というクリティカルな問題を残したままw\n\n規模が大きくなってきたらそもそもクライアント側だけでっていうのは難しいですね\n\n何かアドバイスなどあれば教えていただきたいです!\n\nで、今回行ったことをgh-pagesにあげて終わり\n\n他にも機能足したけどそれはまた後日に\n\n[mkdocs_sample](http://swfz.github.io/mkdocs_sample/)\n\n\n",
          "objectID": "other/mkdocs_jp",
          "_snippetResult": {
            "text": {
              "value": "document.createElement('script');\n+   scriptElement.setAttribute('data-__ais-highlight__m__/ais-highlight__ain', base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/search.js\");\n+   scriptElement.src = base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/require.js\";\n+   document.body.appendChild(scriptElement);\n+ }\n\n.....\n.....\n.....\n\n    // __ais-highlight__m__/ais-highlight__ake sure search input gets autofocus everytime __ais-highlight__m__/ais-highlight__odal opens.\n    $search___ais-highlight__m__/ais-highlight__odal.on('shown.bs.__ais-highlight__m__/ais-highlight__odal', function () {\n+      loadSearchJs();\n        $search___ais-highlight__m__/ais-highlight__odal.find('#__ais-highlight__m__/ais-highlight__kdocs-search-query').focus();\n    });\n```\n\n根",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__kdocsの検索を日本語に対応させてみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2016-02-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_jp",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/other/__ais-highlight__m__/ais-highlight__kdocs_jp.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2016/02/22/234434",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_jp",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "other",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__kDocs",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__kDocsの検索を日本語に対応させてみる\n\n__ais-highlight__M__/ais-highlight__kDocsのサイト内検索で日本語検索に対応していないという話があったので対応させたいなと思い調べてみた\n\n中身を読んだらlunrという全文検索ライブラリを用いているよう\n\njekyllにもlunr.jsを使ったプラグインがあるようで結構有名なのかな\n\nで、このlunr.jsがデフォルトだと日本語での検索に対応していない\n\nしかし、幸いなことに日本語対応の方法もすでにあるらしいので、下記を参考に対応してみる\n\n## [lunr-languages](https://github.com/__ais-highlight__M__/ais-highlight__ihaiValentin/lunr-languages )\n\nlunr.jsの多言語対応用ライブラリ\n\nサイトにしたがって修正していけば日本語にも対応できそう\n\n見ながら修正した結果無事日本語検索ができるようになりました\n\n![text](__ais-highlight__m__/ais-highlight__kdocs_jp01.PNG)\n\nなので既存の__ais-highlight__m__/ais-highlight__kdocsのsearch.jsに対してのパッチを作った\n\n<script src=\"https://gist.github.com/swfz/95d003b7ae4f3ec26909.js\"></script>\n\nこれで日本語検索もできるようになりました!めでたしめでたし!\n\n## 課題\n\n検索できました、良かった!と思ったのですがとても重い\n\nすべての画面でjsの読み込みが発生していてページ遷移するたびに10秒くらい待たされてブラウザ上で操作できない\n\nプロファイルをとってみると上記で入れたtinysegmenterというのが悪さをしているよう、再帰呼び出しをしていてとても重くなっているところまで判明しました\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nリファクタリングするかとも思ったけど、中身見た感じ ~~ 正直よく分からない ~~ 時間かかりそうだったのでいったん検索のモーダルが表示された段階(検索機能を使用する)でjsを読み込むように変更しました\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n- custom/js/baes.js\n\n```\n+ function loadSearchJs(){\n+   var scriptElement = document.createElement('script');\n+   scriptElement.setAttribute('data-__ais-highlight__m__/ais-highlight__ain', base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/search.js\");\n+   scriptElement.src = base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/require.js\";\n+   document.body.appendChild(scriptElement);\n+ }\n\n.....\n.....\n.....\n\n    // __ais-highlight__m__/ais-highlight__ake sure search input gets autofocus everytime __ais-highlight__m__/ais-highlight__odal opens.\n    $search___ais-highlight__m__/ais-highlight__odal.on('shown.bs.__ais-highlight__m__/ais-highlight__odal', function () {\n+      loadSearchJs();\n        $search___ais-highlight__m__/ais-highlight__odal.find('#__ais-highlight__m__/ais-highlight__kdocs-search-query').focus();\n    });\n```\n\n根本解決にはなっていないのですが、毎度ページが読み込まれるたびに固まることはなくなったので少しは使えるように\n\n`site/__ais-highlight__m__/ais-highlight__kdocs/search_index.json`というファイルにすべての記事のインデックス情報が格納されていて現状16Mあったので、そりゃ重くなるわな、、、といったところ\n\n他の小さいサンプルで試したらさくさく動いてくれたのでどのくらいで重くなってくるのかはちょっと気になるところです\n\nということで、文書量の問題というクリティカルな問題を残したままw\n\n規模が大きくなってきたらそもそもクライアント側だけでっていうのは難しいですね\n\n何かアドバイスなどあれば教えていただきたいです!\n\nで、今回行ったことをgh-pagesにあげて終わり\n\n他にも機能足したけどそれはまた後日に\n\n[__ais-highlight__m__/ais-highlight__kdocs_sample](http://swfz.github.io/__ais-highlight__m__/ais-highlight__kdocs_sample/)\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "MkDocsでドキュメント管理",
          "date": "2015-07-28",
          "slug": "other/mkdocs",
          "github": "https://github.com/swfz/memo/blob/master/docs/other/mkdocs.md",
          "url": "http://swfz.hatenablog.com/entry/2015/07/28/031712",
          "section": "other/mkdocs",
          "tags": [
            "other",
            "Markdown"
          ],
          "text": "# MkDocsでドキュメント管理\n\nメモとか、ブログの原文とかをMarkdownで保存していたのですが、管理方法をどうしようかと思っていたところでたまたまMkDocsの話を耳にしたので試してみました\n\nカスタマイズや設定が簡単にできるし見た目も十分なのでローカルでのMarkdownドキュメント管理をMkDocsで行うことにしました\n\n[MkDdocs](http://www.mkdocs.org/ \"alt\")\n\nドキュメント読めばほとんど分かるし重複も発生しますが今回やったことを残しておきます\n\n# インストール\n\nたったこれだけ\n\nPythonは2.7.8?以上が必要らしいです\n\n```.sh\nsudo yum install python-setuptools\neasy_install pip\npip install mkdocs\n```\n\n# プロジェクト作成\n\n```.sh\nmkdocs new sample-project\ncd sample-project\ntree\n.\n|-- docs\n|   `-- index.md\n`-- mkdocs.yml\n```\n\n* mkdocs.ymlに各種設定を記述していきます\n\n* Markdownファイルはdocs以下に置いていきます\n\n# プレビュー\n\nローカルにサーバを起動できる\n\ndocs以下のファイルの変更を感知して自動でビルドしてくれます\n\nclient側でも自動で再読み込みしてくれる実装になっているので編集だけに集中できます\n\nこれだけでも入れる価値ありそうな気がします\n\n```\nmkdocs serve\n```\n\nVMにサーバを立ててる場合などはそのサーバのIPをオプションで渡してあげればアクセスできます\n\n```\nmkdocs serve --dev-addr=192.168.20.11:8000\n```\n\n# ビルド\n\n編集してきたMarkdownなどを静的ファイルに変換します\n\n```\nmkdocs build\n```\n\n静的ファイルたちがsiteディレクトリ以下に生成されます\n\nこれをnginxとかで配信すればサイトのできあがり! ちょっと感動\n\n\n# テーマ\n\nbuilt-in themesがいくつかあるのでそれを設定してしまうのが一番早いです\n\nデフォルトはmkdocs\n\n* mkdocs.yml\n\n```\ntheme: flatly\n```\n\n# 検索\n\nドキュメント内を検索できます、すごい\n\nただこれがあるのは一部のテーマのみのようです\n\n![search](mkdocs-01.PNG \"alt\")\n\nこんな感じで見出しに飛べるようです\n\n![search](mkdocs-02.PNG \"alt\")\n\n\n\n# カスタマイズ\n\n色々カスタマイズできるようなので色々試してみます\n\n## CSS,JavaScriptの設定変更\n\nカスタマイズの粒度もjsのみ、cssのみと色々設定できる模様\n\nファイルはdocs以下を探しに行く\n\n```\nextra_javascript: [sample.js]\nextra_css: [style.css]\n```\n\n## カスタムテーマ\n\nデフォルトで読んでくれていたテンプレートを読みいかず設定したディレクトリから静的ファイルを生成します\n\n* ディレクトリ構成\n\n```\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...\n```\n\n* mkdocs.yml\n\n```\ntheme_dir: 'custom_theme'\n```\n\n1から書くこともできますがさすがにあれなのでデフォルトのテーマをコピーしてそれを編集していきます\n\n[mkdocs themes](https://github.com/mkdocs/mkdocs/tree/master/mkdocs/themes \"alt\")\n\n今回はmkdocsの方のディレクトリから拝借しました\n\nファイルは下記\n\n* 404.html\n    * エラー\n* base.html\n    * ベース\n* nav.html\n    * ナビゲーション\n* nav-sub.html\n    * サブナビゲーション\n* toc.html\n    * 記事の左側のナビゲーション\n* content.html\n    * 記事本体\n\n![mkdocs](mkdocs-03.png )\n\n中身はjinja2のテンプレートエンジンで書かれているので文法覚えれば自由にカスタマイズできそうです\n\n\n## extra\n\n設定ファイルに`extra`として設定することで自由な変数をセットできます\n\n* mkdocs.yml\n\n```.yaml\nextra:\n    version: 1.0.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/\n```\n\n* 各テンプレートファイル\n\n```\n{{ config.extra.version }}\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}\n```\n\n## base.html\n### code syntax\n\nまずはコードシンタックスを変えてみます\n\n* [highlight.js](https://highlightjs.org/ \"alt\")を使ってみます\n\n### 参考\n* [Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう](http://sakueji.com/highlight-js/ \"Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう\")\n\n記事中のリンクから使いたいテーマを選んで読み込ませればいけるようですね\n\n* [highlight.js test](https://highlightjs.org/static/test.html \"alt\")\n\n* [highlight.js/src/styles at master · isagalaev/highlight.js · GitHub](https://github.com/isagalaev/highlight.js/tree/master/src/styles \"alt\")\n\n気分で変えられるように設定ファイルを変更すれば適用できるようにしました\n\n* mkdocs.yml\n\n```.yml\nextra:\n    highlightjs:\n        version: 8.6\n        syntax: atelier-sulphurpool.dark\n```\n\nテンプレート側ではこんな感じ\n\n* base.html\n\n```.html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/styles/{{ config.extra.highlightjs.syntax }}.min.css\"/>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/highlight.min.js\"></script>\n<script>\n$(document).ready(function() {\n    $('pre').each(function(i, block) {\n        hljs.highlightBlock(block);\n    });\n});\n</script>\n```\n\n## content.html\n### meta情報を設定する\n\nMarkdownのmeta情報として最初にいくつか記述してあげることでそれに応じた処理をさせることができる模様\n\nデフォルトでは下記のようにしてあげることで右上にラベルが出てくる\n\n公式ドキュメントではこれにGitHubへのリンクを張って直接飛べるようにすることもできるよっていう風なことが書いてありました\n\n* samaple.md\n\n```\nsource: sample.md\n        image.png\n```\n\n![meta](mkdocs-05.PNG)\n\n## toc.html\n### 見出しの追加\n\n目次の見出しはh1,h2のみ表示されるようになっているので表示範囲を増やしてh3まで表示させるようにしました\n\n* toc.html\n\n```\n<div class=\"bs-sidebar hidden-print affix well\" role=\"complementary\">\n  <ul class=\"nav bs-sidenav\">\n  {% for toc_item in toc %}\n    <li class=\"main {% if toc_item.active %}active{% endif %}\"><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n      <ul class=\"nav bs-sidenav\">\n      {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n          {% if toc_item.children %}\n          <ul >\n          {% for toc_item in toc_item.children %}\n              <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n          {% endfor %}\n          </ul>\n          {% endif %}\n        </li>\n      {% endfor %}\n      </ul>\n    </li>\n  {% endfor %}\n  </ul>\n</div>\n```\n\n## 特別ページの設置\n\ncontent.htmlで、{{ content }} を表示する前にファイルのmeta情報を参照していたので、集計用のページを設けることができそうだと思いやってみました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase,prh -->\nちょっとコンセプトとはずれてしまうので微妙かも知れませんが、こういうこともできるってところですね\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase,prh -->\n\n* repotページ用のMarkdownを用意、設定\n\nこのページはすべてテンプレート側で処理してしまうのでmeta情報だけ記述したMarkdownを用意します\n\n```\npagetype: report\n```\n\n* 公開前も含めたすべてのファイルの情報を記述したjsonファイルを用意\n\n* data.json\n\n```\n[\n  { \"title\": \"page1 title\", \"url\": \"category/sample1\", \"date\": \"2015-01-02\", \"type\": \"blog\" },\n  { \"title\": \"page2 title\", \"url\": \"category/sample2\", \"date\": \"2015-02-20\", \"type\": \"qiita\" },\n  { \"title\": \"page3 title\", \"url\": \"category/sample3\", \"date\": \"2015-03-23\", \"type\": \"blog\" }\n]\n```\n\n* content.htmlでコンテンツの呼び出し条件を分ける\n\n```\n{% if meta.pagetype|join(\"\") == 'report' %}\n  {% include \"report.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\n* 新たなテンプレートでデータを用いた集計ページ(report.html)を作成\n\n```\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/data.json\", false);\nreq.send(null);\nvar datalist = JSON.parse( req.responseText );\n```\n\nあとは用途に合わせて表示させるだけです\n\n今回はc3.jsというのを使ってみました、d3.jsのwrapperみたいな位置付けのようです\n\n[c3.js](http://c3js.org/)\n\nc3についてはまた今度、でもとても簡単に使えます\n\n![report](mkdocs-04.PNG )\n\n\n# 管理\n\nsite以下にファイルが生成されるのでGitで管理するには `.gitignore`に下記記述を行い管理するのが良いようです\n\n* .gitignore\n\n```\nsite/\n```\n\n静的ファイルのみで閲覧ができるのでS3にあげたりすれば下手にブログ立ててサーバ代かけるよりよっぽど良いですね\n\n# その他\n\n実際に使ってはないけど便利そうな機能\n\n* 設定ファイルでgoogle analyticsを設置できる\n* GitHub Pagesとの連携\n\n# 感想\n\n今回は公開とかはしない予定だったのでデプロイ関連まではやらなかったですがそんなに難しくはなさそうなイメージ\n\n目標立てて進捗グラフとかも作ればモチベーション維持にも一役買ってくれそう…?\n\n簡単なサイトならS3だけで済ませられるのでサーバいらないですね\n\n低予算万歳!\n\n他にも機会があれば使っていきたいなと思いました\n\n\n",
          "objectID": "other/mkdocs",
          "_snippetResult": {
            "text": {
              "value": "easy_install pip\npip install __ais-highlight__m__/ais-highlight__kdocs\n```\n\n# プロジェクト作成\n\n```.sh\n__ais-highlight__m__/ais-highlight__kdocs new sample-project\ncd sample-project\ntree\n.\n|-- docs\n|   `-- index.__ais-highlight__m__/ais-highlight__d\n`-- __ais-highlight__m__/ais-highlight__kdocs.yml\n```\n\n* __ais-highlight__m__/ais-highlight__kdocs.ymlに各種設定を記述していきます\n\n* __ais-highlight__M__/ais-highlight__arkdownファイルは",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__kDocsでドキュメント管理",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2015-07-28",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/other/__ais-highlight__m__/ais-highlight__kdocs.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2015/07/28/031712",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "other",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__kDocsでドキュメント管理\n\nメモとか、ブログの原文とかを__ais-highlight__M__/ais-highlight__arkdownで保存していたのですが、管理方法をどうしようかと思っていたところでたまたま__ais-highlight__M__/ais-highlight__kDocsの話を耳にしたので試してみました\n\nカスタマイズや設定が簡単にできるし見た目も十分なのでローカルでの__ais-highlight__M__/ais-highlight__arkdownドキュメント管理を__ais-highlight__M__/ais-highlight__kDocsで行うことにしました\n\n[__ais-highlight__M__/ais-highlight__kDdocs](http://www.__ais-highlight__m__/ais-highlight__kdocs.org/ \"alt\")\n\nドキュメント読めばほとんど分かるし重複も発生しますが今回やったことを残しておきます\n\n# インストール\n\nたったこれだけ\n\nPythonは2.7.8?以上が必要らしいです\n\n```.sh\nsudo yum install python-setuptools\neasy_install pip\npip install __ais-highlight__m__/ais-highlight__kdocs\n```\n\n# プロジェクト作成\n\n```.sh\n__ais-highlight__m__/ais-highlight__kdocs new sample-project\ncd sample-project\ntree\n.\n|-- docs\n|   `-- index.__ais-highlight__m__/ais-highlight__d\n`-- __ais-highlight__m__/ais-highlight__kdocs.yml\n```\n\n* __ais-highlight__m__/ais-highlight__kdocs.ymlに各種設定を記述していきます\n\n* __ais-highlight__M__/ais-highlight__arkdownファイルはdocs以下に置いていきます\n\n# プレビュー\n\nローカルにサーバを起動できる\n\ndocs以下のファイルの変更を感知して自動でビルドしてくれます\n\nclient側でも自動で再読み込みしてくれる実装になっているので編集だけに集中できます\n\nこれだけでも入れる価値ありそうな気がします\n\n```\n__ais-highlight__m__/ais-highlight__kdocs serve\n```\n\nVMにサーバを立ててる場合などはそのサーバのIPをオプションで渡してあげればアクセスできます\n\n```\n__ais-highlight__m__/ais-highlight__kdocs serve --dev-addr=192.168.20.11:8000\n```\n\n# ビルド\n\n編集してきた__ais-highlight__M__/ais-highlight__arkdownなどを静的ファイルに変換します\n\n```\n__ais-highlight__m__/ais-highlight__kdocs build\n```\n\n静的ファイルたちがsiteディレクトリ以下に生成されます\n\nこれをnginxとかで配信すればサイトのできあがり! ちょっと感動\n\n\n# テーマ\n\nbuilt-in themesがいくつかあるのでそれを設定してしまうのが一番早いです\n\nデフォルトは__ais-highlight__m__/ais-highlight__kdocs\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```\ntheme: flatly\n```\n\n# 検索\n\nドキュメント内を検索できます、すごい\n\nただこれがあるのは一部のテーマのみのようです\n\n![search](__ais-highlight__m__/ais-highlight__kdocs-01.PNG \"alt\")\n\nこんな感じで見出しに飛べるようです\n\n![search](__ais-highlight__m__/ais-highlight__kdocs-02.PNG \"alt\")\n\n\n\n# カスタマイズ\n\n色々カスタマイズできるようなので色々試してみます\n\n## CSS,JavaScriptの設定変更\n\nカスタマイズの粒度もjsのみ、cssのみと色々設定できる模様\n\nファイルはdocs以下を探しに行く\n\n```\nextra_javascript: [sample.js]\nextra_css: [style.css]\n```\n\n## カスタムテーマ\n\nデフォルトで読んでくれていたテンプレートを読みいかず設定したディレクトリから静的ファイルを生成します\n\n* ディレクトリ構成\n\n```\ndocs/\n    index.__ais-highlight__m__/ais-highlight__d\n    about.__ais-highlight__m__/ais-highlight__d\ncustom_theme/\n    base.html\n    ...\n```\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```\ntheme_dir: 'custom_theme'\n```\n\n1から書くこともできますがさすがにあれなのでデフォルトのテーマをコピーしてそれを編集していきます\n\n[__ais-highlight__m__/ais-highlight__kdocs themes](https://github.com/__ais-highlight__m__/ais-highlight__kdocs/__ais-highlight__m__/ais-highlight__kdocs/tree/__ais-highlight__m__/ais-highlight__aster/__ais-highlight__m__/ais-highlight__kdocs/themes \"alt\")\n\n今回は__ais-highlight__m__/ais-highlight__kdocsの方のディレクトリから拝借しました\n\nファイルは下記\n\n* 404.html\n    * エラー\n* base.html\n    * ベース\n* nav.html\n    * ナビゲーション\n* nav-sub.html\n    * サブナビゲーション\n* toc.html\n    * 記事の左側のナビゲーション\n* content.html\n    * 記事本体\n\n![__ais-highlight__m__/ais-highlight__kdocs](__ais-highlight__m__/ais-highlight__kdocs-03.png )\n\n中身はjinja2のテンプレートエンジンで書かれているので文法覚えれば自由にカスタマイズできそうです\n\n\n## extra\n\n設定ファイルに`extra`として設定することで自由な変数をセットできます\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```.yaml\nextra:\n    version: 1.0.0\n    links:\n        - https://github.com/__ais-highlight__m__/ais-highlight__kdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#__ais-highlight__m__/ais-highlight__kdocs\n        - http://www.__ais-highlight__m__/ais-highlight__kdocs.org/\n```\n\n* 各テンプレートファイル\n\n```\n{{ config.extra.version }}\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}\n```\n\n## base.html\n### code syntax\n\nまずはコードシンタックスを変えてみます\n\n* [highlight.js](https://highlightjs.org/ \"alt\")を使ってみます\n\n### 参考\n* [Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう](http://sakueji.com/highlight-js/ \"Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう\")\n\n記事中のリンクから使いたいテーマを選んで読み込ませればいけるようですね\n\n* [highlight.js test](https://highlightjs.org/static/test.html \"alt\")\n\n* [highlight.js/src/styles at __ais-highlight__m__/ais-highlight__aster · isagalaev/highlight.js · GitHub](https://github.com/isagalaev/highlight.js/tree/__ais-highlight__m__/ais-highlight__aster/src/styles \"alt\")\n\n気分で変えられるように設定ファイルを変更すれば適用できるようにしました\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```.yml\nextra:\n    highlightjs:\n        version: 8.6\n        syntax: atelier-sulphurpool.dark\n```\n\nテンプレート側ではこんな感じ\n\n* base.html\n\n```.html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/styles/{{ config.extra.highlightjs.syntax }}.min.css\"/>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/highlight.min.js\"></script>\n<script>\n$(document).ready(function() {\n    $('pre').each(function(i, block) {\n        hljs.highlightBlock(block);\n    });\n});\n</script>\n```\n\n## content.html\n### __ais-highlight__m__/ais-highlight__eta情報を設定する\n\n__ais-highlight__M__/ais-highlight__arkdownの__ais-highlight__m__/ais-highlight__eta情報として最初にいくつか記述してあげることでそれに応じた処理をさせることができる模様\n\nデフォルトでは下記のようにしてあげることで右上にラベルが出てくる\n\n公式ドキュメントではこれにGitHubへのリンクを張って直接飛べるようにすることもできるよっていう風なことが書いてありました\n\n* samaple.__ais-highlight__m__/ais-highlight__d\n\n```\nsource: sample.__ais-highlight__m__/ais-highlight__d\n        image.png\n```\n\n![__ais-highlight__m__/ais-highlight__eta](__ais-highlight__m__/ais-highlight__kdocs-05.PNG)\n\n## toc.html\n### 見出しの追加\n\n目次の見出しはh1,h2のみ表示されるようになっているので表示範囲を増やしてh3まで表示させるようにしました\n\n* toc.html\n\n```\n<div class=\"bs-sidebar hidden-print affix well\" role=\"complementary\">\n  <ul class=\"nav bs-sidenav\">\n  {% for toc_item in toc %}\n    <li class=\"main {% if toc_item.active %}active{% endif %}\"><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n      <ul class=\"nav bs-sidenav\">\n      {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n          {% if toc_item.children %}\n          <ul >\n          {% for toc_item in toc_item.children %}\n              <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n          {% endfor %}\n          </ul>\n          {% endif %}\n        </li>\n      {% endfor %}\n      </ul>\n    </li>\n  {% endfor %}\n  </ul>\n</div>\n```\n\n## 特別ページの設置\n\ncontent.htmlで、{{ content }} を表示する前にファイルの__ais-highlight__m__/ais-highlight__eta情報を参照していたので、集計用のページを設けることができそうだと思いやってみました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase,prh -->\nちょっとコンセプトとはずれてしまうので微妙かも知れませんが、こういうこともできるってところですね\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase,prh -->\n\n* repotページ用の__ais-highlight__M__/ais-highlight__arkdownを用意、設定\n\nこのページはすべてテンプレート側で処理してしまうので__ais-highlight__m__/ais-highlight__eta情報だけ記述した__ais-highlight__M__/ais-highlight__arkdownを用意します\n\n```\npagetype: report\n```\n\n* 公開前も含めたすべてのファイルの情報を記述したjsonファイルを用意\n\n* data.json\n\n```\n[\n  { \"title\": \"page1 title\", \"url\": \"category/sample1\", \"date\": \"2015-01-02\", \"type\": \"blog\" },\n  { \"title\": \"page2 title\", \"url\": \"category/sample2\", \"date\": \"2015-02-20\", \"type\": \"qiita\" },\n  { \"title\": \"page3 title\", \"url\": \"category/sample3\", \"date\": \"2015-03-23\", \"type\": \"blog\" }\n]\n```\n\n* content.htmlでコンテンツの呼び出し条件を分ける\n\n```\n{% if __ais-highlight__m__/ais-highlight__eta.pagetype|join(\"\") == 'report' %}\n  {% include \"report.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\n* 新たなテンプレートでデータを用いた集計ページ(report.html)を作成\n\n```\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/data.json\", false);\nreq.send(null);\nvar datalist = JSON.parse( req.responseText );\n```\n\nあとは用途に合わせて表示させるだけです\n\n今回はc3.jsというのを使ってみました、d3.jsのwrapperみたいな位置付けのようです\n\n[c3.js](http://c3js.org/)\n\nc3についてはまた今度、でもとても簡単に使えます\n\n![report](__ais-highlight__m__/ais-highlight__kdocs-04.PNG )\n\n\n# 管理\n\nsite以下にファイルが生成されるのでGitで管理するには `.gitignore`に下記記述を行い管理するのが良いようです\n\n* .gitignore\n\n```\nsite/\n```\n\n静的ファイルのみで閲覧ができるのでS3にあげたりすれば下手にブログ立ててサーバ代かけるよりよっぽど良いですね\n\n# その他\n\n実際に使ってはないけど便利そうな機能\n\n* 設定ファイルでgoogle analyticsを設置できる\n* GitHub Pagesとの連携\n\n# 感想\n\n今回は公開とかはしない予定だったのでデプロイ関連まではやらなかったですがそんなに難しくはなさそうなイメージ\n\n目標立てて進捗グラフとかも作ればモチベーション維持にも一役買ってくれそう…?\n\n簡単なサイトならS3だけで済ませられるのでサーバいらないですね\n\n低予算万歳!\n\n他にも機会があれば使っていきたいなと思いました\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "middlemanを使ってみる",
          "date": "2016-04-18",
          "slug": "other/middleman",
          "github": "https://github.com/swfz/memo/blob/master/docs/other/middleman.md",
          "url": "http://swfz.hatenablog.com/entry/2016/04/19/052625",
          "section": "other/middleman",
          "tags": [
            "other"
          ],
          "text": "# middlemanを使ってみる\n\n[middleman](https://middlemanapp.com/jp/ )\n\n静的サイトジェネレータといわれているものの中の1つです\n\n日本語の公式があるのもありがたいですね\n\n今回はダーツの自宅練習用のスコア管理のページをmiddlemanで作ってみます\n\n下記ダッシュボードテンプレートを使って見た目に時間をとらないようにしました\n\n[Gentellela](https://github.com/puikinsh/gentelella)\n\n## インストール\n\nテンプレートエンジンはslimを使ってみたいので[middleman-slim](https://github.com/yterajima/middleman-slim )もインストール\n\n```\ngem install middleman\ngem install middleman-slim\n```\n\n## プロジェクトの初期化\n\n`-T`でGitリポジトリにあるテンプレートを指定できる\n\nslimのテンプレートがあるようなのでそれを指定する\n\n```\nmiddleman init . -T yterajima/middleman-slim\n```\n\n## サーバの起動\n\n```\nmiddleman server\n```\n\n`http://localhsot:4567/`へアクセスするとデフォルトの画面が表示されます\n\n## 編集\n### 部分テンプレート\n\nRubyのテンプレートではpartialを使って部分テンプレートを読み込むことができるので良く使うテンプレートをひとつのファイルでまとめて使いまわす\n\n本日のプレイデータと今日以前のプレイデータとの差分を表示するところが多々あったのでまとめた\n\n- _diff.html.slim\n\n```\n- diff = new - old\n- if diff < 0\n  i.red\n    = to_f2( diff )\n- else\n  i.blue\n    | +\n    = to_f2( diff )\n```\n\n- 読み込み部分\n\n```\n= partial 'diff', locals: { new: t_stats, old: y_stats }\n```\n\n### ディレクトリインデックス\n\nたとえば、`http://localhost:4567/countup`へアクセスすると\n\n`./countup/index.html`の内容が表示されるようになる、それだけ\n\n- config.rb\n\n```\nactivate :directory_indexes\n```\n\ndevelopment,build両方指定した\n\n### asset_host\n\nassetの呼び出しパスに指定した文字列を追加してくれる\n\ngh-pagesのプロジェクトページなどで運用する場合や、同じドメインだけどパスで複数プロジェクトをホストする場合などに使える\n\n```\nactivate :asset_host, :host => \"/darts\"\n```\n\nこの設定をすることで`/javascripts/test.js`で読み込んでいたjsがビルドした静的ファイル上では`/darts/javascripts/test.js`と呼ばれるようになる\n\nここら辺しっかりサポートしてくれるのはたいへんありがたいです\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nGitHub Pagesで色々やろうとすると必ずはまるところではあると思うので…\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n### データの扱い\n\ndataディレクトリ以下にymlやjsonを置くことでそのデータをbuild時に変換してくれる\n\n- user.json\n\n```\n{\n  \"hoge\": {\n    \"name\": \"hoge\",\n    \"age\": 20\n  },\n  \"fuga\": {\n    \"name\": \"fuga\",\n    \"age\": 21\n  }\n}\n```\n\n`data.ファイル名`で参照できる\n\nあとは配列、ハッシュを扱うのと同様に扱うことができる\n\n```\n# 20\n= data.user[\"hoge\"][\"age\"]\n```\n\nとても便利、データや設定などを外だしできるというのはメンテナンスも楽になりそう\n\n### ヘルパー関数\n\nテンプレート中でよく使う処理などをまとめる\n\n- helpers/darts_helpers.rb\n\n```\nrequire 'bigdecimal/util'\nrequire 'bigdecimal'\nmodule FormatFloat\n  def to_f2(n)\n    n.to_s.to_d.floor(2).to_f\n  end\nend\n```\n\n- config.rb\n\n```\n###\n# Helpers\n###\nrequire 'helpers/darts_helpers'\nhelpers FormatFloat\n```\n\n定義した関数が使えるようになる\n\n```\n# 0.33\nto_f2(1/3.to_f)\n```\n\n今回は少数第二位までを表示するためのヘルパーメソッドを作った\n\nto_fで桁数が指定できなかったため、一度decimalに変換してから出力するようにした\n\nちょっと理由はわからないがひとつのモジュールに1つの関数しか定義できないようで、ヘルパー1つにつき1つモジュールを定義した\n\n## ビルド\n\n色々作ったらhtmlページをビルドします、コマンド打つだけですね\n\n```\nmiddleman build\n```\n\nbuildディレクトリに展開されます\n\nbuildされたファイルたちをgh-pagesなりS3なりに置けばあっという間にサイトが公開できます\n\n## 公開\n\n今回はgh-pagesのプロジェクトページに公開しようと思ったため下記2つを試してみました\n\n- [middleman-gh-pages](https://github.com/edgecase/middleman-gh-pages)\n- [middleman-deploy](https://github.com/middleman-contrib/middleman-deploy)\n\n2つとも試してみたもののmiddleman-deployの方は実行するまでにいけなかったのでgh-pagesの方を使用します\n\n### middleman-gh-pages\n\nRakefileを作ってあげるだけ\n\n各種ENVに関してはGitHubに載っているとおり\n\n- Rakefile\n\n```\nrequire 'middleman-gh-pages'\nENV[\"BRANCH_NAME\"] = \"gh-pages\"\nENV[\"ALLOW_DIRTY\"] = \"true\"\n```\n\n- config.rb\n\n```\n+ require 'middleman-gh-pages'\n```\n\n```\nrake build\nrake publish\n```\n\nGitGub Pagesのプロジェクトページだと`/darts`がトップとなるためassetsの読み込みパスが変わる\n\nconfig.rbで`asset_host`を指定してあげれば通常ならOKのはず\n\n- config.rb\n\n```\n+ activate :asset_host, :host => \"/darts\"\n```\n\nが、今回はgentellelaで使用しているjs内でのファイル読み込みがうまくいっていないようで、グラフが表示できない状態を解決できなかった\n\n結局あまり時間とりたくなかったので独自ドメインとってそっちで運用することにしたw\n\nちなみに独自ドメインの割り当て方法は「[自分のGitHub Pagesと独自ドメインの設定方法](http://qiita.com/mofumofu3n/items/b859fb3c5d924cfcca15)」を参考にした\n\n独自ドメインはAWSのRoute53で取得してさくっと設定(Aレコードの設定)\n\nドメインの設定をCNAMEに記載してpublishすればOK\n\n```\necho darts.swfz.io > source/CNAME\nrake publish\n```\n\n# 結果\n\n[darts](http://darts.swfz.io)\n\nゲームロジックとかはRubyの勉強がてらCLIを書きました -> [darts(github)](https://github.com/swfz/darts)\n\nこれでダーツの自宅練習でのモチベーションがあがるかな\n\nちなみに肝心のスコアは気持ち右肩上がりかな?くらいですw\n",
          "objectID": "other/middleman",
          "_snippetResult": {
            "text": {
              "value": "と思ったため下記2つを試してみました\n\n- [__ais-highlight__m__/ais-highlight__iddleman-gh-pages](https://github.com/edgecase/__ais-highlight__m__/ais-highlight__iddleman-gh-pages)\n- [__ais-highlight__m__/ais-highlight__iddleman-deploy](https://github.com/__ais-highlight__m__/ais-highlight__iddleman-contrib/__ais-highlight__m__/ais-highlight__iddleman-deploy)\n\n2つとも試してみたものの__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__iddlemanを使ってみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2016-04-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/other/__ais-highlight__m__/ais-highlight__iddleman.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2016/04/19/052625",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "other",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__iddlemanを使ってみる\n\n[__ais-highlight__m__/ais-highlight__iddleman](https://__ais-highlight__m__/ais-highlight__iddlemanapp.com/jp/ )\n\n静的サイトジェネレータといわれているものの中の1つです\n\n日本語の公式があるのもありがたいですね\n\n今回はダーツの自宅練習用のスコア管理のページを__ais-highlight__m__/ais-highlight__iddlemanで作ってみます\n\n下記ダッシュボードテンプレートを使って見た目に時間をとらないようにしました\n\n[Gentellela](https://github.com/puikinsh/gentelella)\n\n## インストール\n\nテンプレートエンジンはslimを使ってみたいので[__ais-highlight__m__/ais-highlight__iddleman-slim](https://github.com/yterajima/__ais-highlight__m__/ais-highlight__iddleman-slim )もインストール\n\n```\ngem install __ais-highlight__m__/ais-highlight__iddleman\ngem install __ais-highlight__m__/ais-highlight__iddleman-slim\n```\n\n## プロジェクトの初期化\n\n`-T`でGitリポジトリにあるテンプレートを指定できる\n\nslimのテンプレートがあるようなのでそれを指定する\n\n```\n__ais-highlight__m__/ais-highlight__iddleman init . -T yterajima/__ais-highlight__m__/ais-highlight__iddleman-slim\n```\n\n## サーバの起動\n\n```\n__ais-highlight__m__/ais-highlight__iddleman server\n```\n\n`http://localhsot:4567/`へアクセスするとデフォルトの画面が表示されます\n\n## 編集\n### 部分テンプレート\n\nRubyのテンプレートではpartialを使って部分テンプレートを読み込むことができるので良く使うテンプレートをひとつのファイルでまとめて使いまわす\n\n本日のプレイデータと今日以前のプレイデータとの差分を表示するところが多々あったのでまとめた\n\n- _diff.html.slim\n\n```\n- diff = new - old\n- if diff < 0\n  i.red\n    = to_f2( diff )\n- else\n  i.blue\n    | +\n    = to_f2( diff )\n```\n\n- 読み込み部分\n\n```\n= partial 'diff', locals: { new: t_stats, old: y_stats }\n```\n\n### ディレクトリインデックス\n\nたとえば、`http://localhost:4567/countup`へアクセスすると\n\n`./countup/index.html`の内容が表示されるようになる、それだけ\n\n- config.rb\n\n```\nactivate :directory_indexes\n```\n\ndevelopment,build両方指定した\n\n### asset_host\n\nassetの呼び出しパスに指定した文字列を追加してくれる\n\ngh-pagesのプロジェクトページなどで運用する場合や、同じドメインだけどパスで複数プロジェクトをホストする場合などに使える\n\n```\nactivate :asset_host, :host => \"/darts\"\n```\n\nこの設定をすることで`/javascripts/test.js`で読み込んでいたjsがビルドした静的ファイル上では`/darts/javascripts/test.js`と呼ばれるようになる\n\nここら辺しっかりサポートしてくれるのはたいへんありがたいです\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nGitHub Pagesで色々やろうとすると必ずはまるところではあると思うので…\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n### データの扱い\n\ndataディレクトリ以下にymlやjsonを置くことでそのデータをbuild時に変換してくれる\n\n- user.json\n\n```\n{\n  \"hoge\": {\n    \"name\": \"hoge\",\n    \"age\": 20\n  },\n  \"fuga\": {\n    \"name\": \"fuga\",\n    \"age\": 21\n  }\n}\n```\n\n`data.ファイル名`で参照できる\n\nあとは配列、ハッシュを扱うのと同様に扱うことができる\n\n```\n# 20\n= data.user[\"hoge\"][\"age\"]\n```\n\nとても便利、データや設定などを外だしできるというのはメンテナンスも楽になりそう\n\n### ヘルパー関数\n\nテンプレート中でよく使う処理などをまとめる\n\n- helpers/darts_helpers.rb\n\n```\nrequire 'bigdecimal/util'\nrequire 'bigdecimal'\n__ais-highlight__m__/ais-highlight__odule FormatFloat\n  def to_f2(n)\n    n.to_s.to_d.floor(2).to_f\n  end\nend\n```\n\n- config.rb\n\n```\n###\n# Helpers\n###\nrequire 'helpers/darts_helpers'\nhelpers FormatFloat\n```\n\n定義した関数が使えるようになる\n\n```\n# 0.33\nto_f2(1/3.to_f)\n```\n\n今回は少数第二位までを表示するためのヘルパーメソッドを作った\n\nto_fで桁数が指定できなかったため、一度decimalに変換してから出力するようにした\n\nちょっと理由はわからないがひとつのモジュールに1つの関数しか定義できないようで、ヘルパー1つにつき1つモジュールを定義した\n\n## ビルド\n\n色々作ったらhtmlページをビルドします、コマンド打つだけですね\n\n```\n__ais-highlight__m__/ais-highlight__iddleman build\n```\n\nbuildディレクトリに展開されます\n\nbuildされたファイルたちをgh-pagesなりS3なりに置けばあっという間にサイトが公開できます\n\n## 公開\n\n今回はgh-pagesのプロジェクトページに公開しようと思ったため下記2つを試してみました\n\n- [__ais-highlight__m__/ais-highlight__iddleman-gh-pages](https://github.com/edgecase/__ais-highlight__m__/ais-highlight__iddleman-gh-pages)\n- [__ais-highlight__m__/ais-highlight__iddleman-deploy](https://github.com/__ais-highlight__m__/ais-highlight__iddleman-contrib/__ais-highlight__m__/ais-highlight__iddleman-deploy)\n\n2つとも試してみたものの__ais-highlight__m__/ais-highlight__iddleman-deployの方は実行するまでにいけなかったのでgh-pagesの方を使用します\n\n### __ais-highlight__m__/ais-highlight__iddleman-gh-pages\n\nRakefileを作ってあげるだけ\n\n各種ENVに関してはGitHubに載っているとおり\n\n- Rakefile\n\n```\nrequire '__ais-highlight__m__/ais-highlight__iddleman-gh-pages'\nENV[\"BRANCH_NAME\"] = \"gh-pages\"\nENV[\"ALLOW_DIRTY\"] = \"true\"\n```\n\n- config.rb\n\n```\n+ require '__ais-highlight__m__/ais-highlight__iddleman-gh-pages'\n```\n\n```\nrake build\nrake publish\n```\n\nGitGub Pagesのプロジェクトページだと`/darts`がトップとなるためassetsの読み込みパスが変わる\n\nconfig.rbで`asset_host`を指定してあげれば通常ならOKのはず\n\n- config.rb\n\n```\n+ activate :asset_host, :host => \"/darts\"\n```\n\nが、今回はgentellelaで使用しているjs内でのファイル読み込みがうまくいっていないようで、グラフが表示できない状態を解決できなかった\n\n結局あまり時間とりたくなかったので独自ドメインとってそっちで運用することにしたw\n\nちなみに独自ドメインの割り当て方法は「[自分のGitHub Pagesと独自ドメインの設定方法](http://qiita.com/__ais-highlight__m__/ais-highlight__ofumofu3n/items/b859fb3c5d924cfcca15)」を参考にした\n\n独自ドメインはAWSのRoute53で取得してさくっと設定(Aレコードの設定)\n\nドメインの設定をCNAMEに記載してpublishすればOK\n\n```\necho darts.swfz.io > source/CNAME\nrake publish\n```\n\n# 結果\n\n[darts](http://darts.swfz.io)\n\nゲームロジックとかはRubyの勉強がてらCLIを書きました -> [darts(github)](https://github.com/swfz/darts)\n\nこれでダーツの自宅練習でのモチベーションがあがるかな\n\nちなみに肝心のスコアは気持ち右肩上がりかな?くらいですw\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "markdownでプレゼン",
          "date": "2014-07-01",
          "slug": "other/20140701_markdown_presentation_cleaver",
          "github": "https://github.com/swfz/memo/blob/master/docs/other/20140701_markdown_presentation_cleaver.md",
          "url": "http://swfz.hatenablog.com/entry/2014/07/01/053841",
          "section": "other/20140701_markdown_presentation_cleaver",
          "tags": [
            "other",
            "Markdown"
          ],
          "text": "# Markdownでプレゼン\n## Cleaverを使ってみる\n\n## Cleaverとは\nMarkdownファイルを使ってプレゼン資料にするためのツール\n\n## インストール\n\nコマンド一発でインストール可能\n\n```bash\nnpm instlal cleaver\n```\n\n* node.jsが必要\n\n## スライド作成\n#### 通常のMarkdownと違うところ\n* 最初にスライドの情報を記述する\n* ページの区切りは `--` で行う\n\n```\n title: Example\n author:\n   name: swfz\n output: output.html\n controls: true\n style: style.css\n --\n#1ページ目\n --\n#2ページ目\n```\n\nMarkdown記法で内容を記述します\n\n### test.md\n\n```markdown\n# cleaver h1\n## h2\n### h3\n\n* item\n    * indented item\n```\n\n## スライド作成\nhtmlファイルに変換します\n\n先頭で記述した`output: filename` にファイルを出力\n\n出力したhtmlファイルをブラウザで開くだけでOK\n\nカーソルやjklhでスライド送りができます\n\n`watch` オプションで自動的に反映\n### 生成\n```bash\ncleaver test.md\n```\n\n### 自動反映\n```bash\ncleaver watch test.md\n```\n\n## 画像\nMarkdown記法で画像も貼り付けられます。\n\n```\n![sample_image](sample_cleaver.PNG \"sample\")\n```\n\n## デザイン\n### theme\n設定するとGitHubのthemeを読み込める\n\nstyle.cssを自動的に読み込んでくれるみたい\n\n簡単にデザインを変更できます\n\n```\ntheme: jdan/cleaver-retro\n```\n### style\ncssを指定することでデザインをカスタマイズできます\n```\nstyle: style.css\n```\n## デザイン\n### スライドごとのデザイン\nスライドごとの区切りの後にクラス名を記述\n```\n -- bg\n```\n\n```css\n.bg {\n  background: url(bg_darts.png);\n}\n```\n## おわり\n* 簡単に資料が作れる\n* themeでデザインテンプレートを選べる\n* 自分でカスタマイズできる\n* ある程度仕様に合わせないといけないところもある\n\nプレゼンする機会が今のところないので次あったら使ってみようかと思っています\n\nとりあえずサンプル作ったのでそのときのthemeをあげて置きます\n\n[swfz/cleaver-theme](https://github.com/swfz/cleaver-theme)\n\n\n\n",
          "objectID": "other/20140701_markdown_presentation_cleaver",
          "_snippetResult": {
            "text": {
              "value": "行う\n\n```\n title: Example\n author:\n   name: swfz\n output: output.html\n controls: true\n style: style.css\n --\n#1ページ目\n --\n#2ページ目\n```\n\n__ais-highlight__M__/ais-highlight__arkdown記法で内容を記述します\n\n### test.__ais-highlight__m__/ais-highlight__d\n\n```__ais-highlight__m__/ais-highlight__arkdown\n# cleaver h1\n## h2\n### h3\n\n* item\n    * indented item\n```\n\n## スライ",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__arkdownでプレゼン",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2014-07-01",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/20140701___ais-highlight__m__/ais-highlight__arkdown_presentation_cleaver",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/other/20140701___ais-highlight__m__/ais-highlight__arkdown_presentation_cleaver.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2014/07/01/053841",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/20140701___ais-highlight__m__/ais-highlight__arkdown_presentation_cleaver",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "other",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__arkdownでプレゼン\n## Cleaverを使ってみる\n\n## Cleaverとは\n__ais-highlight__M__/ais-highlight__arkdownファイルを使ってプレゼン資料にするためのツール\n\n## インストール\n\nコマンド一発でインストール可能\n\n```bash\nnpm instlal cleaver\n```\n\n* node.jsが必要\n\n## スライド作成\n#### 通常の__ais-highlight__M__/ais-highlight__arkdownと違うところ\n* 最初にスライドの情報を記述する\n* ページの区切りは `--` で行う\n\n```\n title: Example\n author:\n   name: swfz\n output: output.html\n controls: true\n style: style.css\n --\n#1ページ目\n --\n#2ページ目\n```\n\n__ais-highlight__M__/ais-highlight__arkdown記法で内容を記述します\n\n### test.__ais-highlight__m__/ais-highlight__d\n\n```__ais-highlight__m__/ais-highlight__arkdown\n# cleaver h1\n## h2\n### h3\n\n* item\n    * indented item\n```\n\n## スライド作成\nhtmlファイルに変換します\n\n先頭で記述した`output: filename` にファイルを出力\n\n出力したhtmlファイルをブラウザで開くだけでOK\n\nカーソルやjklhでスライド送りができます\n\n`watch` オプションで自動的に反映\n### 生成\n```bash\ncleaver test.__ais-highlight__m__/ais-highlight__d\n```\n\n### 自動反映\n```bash\ncleaver watch test.__ais-highlight__m__/ais-highlight__d\n```\n\n## 画像\n__ais-highlight__M__/ais-highlight__arkdown記法で画像も貼り付けられます。\n\n```\n![sample_image](sample_cleaver.PNG \"sample\")\n```\n\n## デザイン\n### theme\n設定するとGitHubのthemeを読み込める\n\nstyle.cssを自動的に読み込んでくれるみたい\n\n簡単にデザインを変更できます\n\n```\ntheme: jdan/cleaver-retro\n```\n### style\ncssを指定することでデザインをカスタマイズできます\n```\nstyle: style.css\n```\n## デザイン\n### スライドごとのデザイン\nスライドごとの区切りの後にクラス名を記述\n```\n -- bg\n```\n\n```css\n.bg {\n  background: url(bg_darts.png);\n}\n```\n## おわり\n* 簡単に資料が作れる\n* themeでデザインテンプレートを選べる\n* 自分でカスタマイズできる\n* ある程度仕様に合わせないといけないところもある\n\nプレゼンする機会が今のところないので次あったら使ってみようかと思っています\n\nとりあえずサンプル作ったのでそのときのthemeをあげて置きます\n\n[swfz/cleaver-theme](https://github.com/swfz/cleaver-theme)\n\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "mongoDBでクエリログを流す",
          "date": "2016-09-14",
          "slug": "mongoDB/slow_log",
          "github": "https://github.com/swfz/memo/blob/master/docs/mongoDB/slow_log.md",
          "url": "http://swfz.hatenablog.com/entry/2016/09/15/041918",
          "section": "mongoDB/slow_log",
          "tags": [
            "MongoDB"
          ],
          "text": "# mongoDBでクエリログを流す\n\n## mongoDB起動時\n\n下記をつけて起動させればOK\n\n```\n/urr/bin/mongod --profile=2 --slowms=1\n```\n\n--profile\n\nプロファイルのレベル\n\n- 1: 閾値以上の時間のかかったクエリを残す\n- 2: すべてのクエリを残す\n\n--slowms\n\n閾値(ms)\n\n\n## コンソールから\n\n```\n$ mongo\ndb.setProfilingLevel(2,1)\n{ \"was\" : 0, \"slowms\" : 20, \"ok\" : 1 }\n> db.system.profile.find()\n.....\n.....\n```\n\n第一引数がプロファイルのレベル\n\n第二引数が閾値\n\nどちらで行っても出力先はmongoDBの`system.profile`コレクションに出力される模様\n\n[Database Profiler Output — MongoDB Manual 3.2](https://docs.mongodb.com/manual/reference/database-profiler/)\n\n[https://docs.mongodb.com/manual/reference/database-profiler/:embed:cite]\n\n一生懸命ファイルを探しても見つからないわけですね\n\n### mongotail\n\nいちいちシェルに入ってコマンドたたくのも面倒ですね\n\nmongoDBでslowlogをとるようにしておけばmongotailというコマンドを使ってクエリログを閲覧や垂れ流しできます\n\n[mrsarm/mongotail](https://github.com/mrsarm/mongotail )\n\n[https://github.com/mrsarm/mongotail:embed:cite]\n\n- install\n\n```\npip install mongotail\n```\n\npipでインストール可能\n\n- tailしてみる\n\nこちらもDBのアドレスとデータベース名を入れてコマンドを実行するだけです\n\n`-f`で `tail -f` と同様な感じに、`-v`(verboseモード)ですべてのログを出力してくれるようです\n\n```\nmongotail 192.168.30.93:27017/database -v -f\n```\n\n簡単!\n\n",
          "objectID": "mongoDB/slow_log",
          "_snippetResult": {
            "text": {
              "value": "出力先は__ais-highlight__m__/ais-highlight__ongoDBの`system.profile`コレクションに出力される模様\n\n[Database Profiler Output — __ais-highlight__M__/ais-highlight__ongoDB __ais-highlight__M__/ais-highlight__anual 3.2](https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/)\n\n[https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/:embed:cite]\n\n一生懸",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDBでクエリログを流す",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2016-09-14",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/slow_log",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/__ais-highlight__m__/ais-highlight__ongoDB/slow_log.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2016/09/15/041918",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/slow_log",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ongoDB",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__ongoDBでクエリログを流す\n\n## __ais-highlight__m__/ais-highlight__ongoDB起動時\n\n下記をつけて起動させればOK\n\n```\n/urr/bin/__ais-highlight__m__/ais-highlight__ongod --profile=2 --slowms=1\n```\n\n--profile\n\nプロファイルのレベル\n\n- 1: 閾値以上の時間のかかったクエリを残す\n- 2: すべてのクエリを残す\n\n--slowms\n\n閾値(__ais-highlight__m__/ais-highlight__s)\n\n\n## コンソールから\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo\ndb.setProfilingLevel(2,1)\n{ \"was\" : 0, \"slowms\" : 20, \"ok\" : 1 }\n> db.system.profile.find()\n.....\n.....\n```\n\n第一引数がプロファイルのレベル\n\n第二引数が閾値\n\nどちらで行っても出力先は__ais-highlight__m__/ais-highlight__ongoDBの`system.profile`コレクションに出力される模様\n\n[Database Profiler Output — __ais-highlight__M__/ais-highlight__ongoDB __ais-highlight__M__/ais-highlight__anual 3.2](https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/)\n\n[https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/:embed:cite]\n\n一生懸命ファイルを探しても見つからないわけですね\n\n### __ais-highlight__m__/ais-highlight__ongotail\n\nいちいちシェルに入ってコマンドたたくのも面倒ですね\n\n__ais-highlight__m__/ais-highlight__ongoDBでslowlogをとるようにしておけば__ais-highlight__m__/ais-highlight__ongotailというコマンドを使ってクエリログを閲覧や垂れ流しできます\n\n[__ais-highlight__m__/ais-highlight__rsarm/__ais-highlight__m__/ais-highlight__ongotail](https://github.com/__ais-highlight__m__/ais-highlight__rsarm/__ais-highlight__m__/ais-highlight__ongotail )\n\n[https://github.com/__ais-highlight__m__/ais-highlight__rsarm/__ais-highlight__m__/ais-highlight__ongotail:embed:cite]\n\n- install\n\n```\npip install __ais-highlight__m__/ais-highlight__ongotail\n```\n\npipでインストール可能\n\n- tailしてみる\n\nこちらもDBのアドレスとデータベース名を入れてコマンドを実行するだけです\n\n`-f`で `tail -f` と同様な感じに、`-v`(verboseモード)ですべてのログを出力してくれるようです\n\n```\n__ais-highlight__m__/ais-highlight__ongotail 192.168.30.93:27017/database -v -f\n```\n\n簡単!\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "mongoDBのクラスタ環境をいじってみる",
          "date": "2016-11-15",
          "slug": "mongoDB/cluster",
          "github": "https://github.com/swfz/memo/blob/master/docs/mongoDB/cluster.md",
          "url": "http://swfz.hatenablog.com/entry/2016/11/15/033714",
          "section": "mongoDB/cluster",
          "tags": [
            "MongoDB"
          ],
          "text": "# mongoDBのクラスタ環境をいじってみる\n\n今回は業務で扱う必要が出てきてしまったため急場しのぎですがmongoDBをやっていきます\n\nいきなりシャーディング＋レプリカセットとかいろんな概念が一気に入ってくるとわからなくなってしまいそうなので1つずつ理解していくようにしていく\n\nまた、各種ノードに関してローカルのサーバでポートを変えればいくらでもノードを立ち上げることができたので一台のVMで複数mongodを立ち上げることで試す\n\n# 前提\n\n大きく分けて下記3つの役割がある\n\n## mongos\nクエリのルーティングなどを行う\nクライアント側のアプリケーションが接続を行うのはこのサーバ\n\n## mongod\n\nシャードやレプリカセットを構成要素となるサーバ(ノード)\n\nmongos,mongod(configserver)がない場合でも機能する(ローカルとか)\n\n## mongod(configserver)\n\n各種設定やメタデータ(shardの設定やロックの情報などを管理)を扱っている\n\n冗長化のためにレプリカセットを組んでおくのが基本\n\n# シャーディングを試す\n\n下記と公式を参考にしました\n\n[MongoDBのSharding機能で遊ぶ - 個人的なまとめ](http://hachi.hatenablog.com/entry/2012/02/26/191349)\n\n[http://hachi.hatenablog.com/entry/2012/02/26/191349:embed:cite]\n\n- コマンドについては下記\n\n[MongoDBのデータ構造な簡単な操作など - Qiita](http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e)\n\n[http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e:embed:cite]\n\n## 構成\n- config\n    - 1台\n- mongos\n    - 1台\n- shard\n    - 3台\n\n![text](cluster01.png)\n\n## configサーバ\n\n```\nmkdir /data/mongo/config\nmongod --configsvr --port 27030 --dbpath=/data/mongo/config --logpath /data/mongo/config/log --fork\n```\n\n## mongosの起動\n\n```\nmongos --port 27017 --configdb localhost:27030 --chunkSize 1 --logpath /data/mongo/mongos/log --fork\n```\n\n## 各シャードの起動\n\n```\nmkdir /data/mongo/shard1\nmkdir /data/mongo/shard2\nmkdir /data/mongo/shard3\n\nmongod --port 27021 --dbpath=/data/mongo/shard1\nmongod --port 27022 --dbpath=/data/mongo/shard2\nmongod --port 27023 --dbpath=/data/mongo/shard3\n```\n\n## シャードの追加\n\n- mongos\n\n```\nuse admin\ndb.runCommand({\"addShard\":\"localhost:27021\"})\ndb.runCommand({\"addShard\":\"localhost:27022\"})\ndb.runCommand({\"addShard\":\"localhost:27023\"})\n```\n\n- シャードの確認\n\nどちらでも同じ出力\n\n```\n> db.printShardingStatus()\n> sh.status()\n--- Sharding Status ---\n  sharding version: {\n        \"_id\" : 1,\n        \"minCompatibleVersion\" : 5,\n        \"currentVersion\" : 6,\n        \"clusterId\" : ObjectId(\"580c68b71fc6c85737ab8492\")\n}\n  shards:\n        {  \"_id\" : \"shard0000\",  \"host\" : \"localhost:27021\" }\n        {  \"_id\" : \"shard0001\",  \"host\" : \"localhost:27022\" }\n        {  \"_id\" : \"shard0002\",  \"host\" : \"localhost:27023\" }\n  active mongoses:\n        \"3.2.7\" : 1\n  balancer:\n        Currently enabled:  yes\n        Currently running:  no\n        Failed balancer rounds in last 5 attempts:  0\n        Migration Results for the last 24 hours:\n                No recent migrations\n  databases:\n\n```\n\n## データを入れてみる\n\n```\nmongo localhost:27017\n> use sample # 自動でDB生成\n> db.sample.insert({ category: \"A\", name: \"aaaaaaaaaaa\", age: 25 })\n> db.sample.insert({ category: \"B\", name: \"bbbbbbbbbbb\", age: 35 })\n> db.sample.insert({ category: \"C\", name: \"ccccccccccc\", age: 45 })\n```\n\n- 確認\n\n```\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n```\n\n- 各シャードで確認してみる\n\n```\n$ mongo localhost:27021\n> use sample\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n$ mongo localhost:27022\n> use sample\n> db.sample.find()\n$ mongo localhost:27023\n> use sample\n> db.sample.find()\n```\n\n## シャード設定\n\nDB単位、Collection単位でシャード設定しないといけない模様\n\n新たに`shsample`というDBに`stats_a`というcollectionを追加する\n\n```\n# DB,Collection2つ一遍に設定できるかと思ったら駄目だった\nmongos> sh.shardCollection(\"shsample.stats_a\",{\"id\": 1});\n{ \"ok\" : 0, \"errmsg\" : \"sharding not enabled for db shsample\", \"code\" : 20 }\n\n# シャード設定を追加する\nmongos> use admin\nswitched to db admin\nmongos> db.runCommand({ enablesharding: \"shsample\"});\n{ \"ok\" : 1 }\n\n# shsample に対してシャーディング設定をする( 渡すのはshard key) 複数も可能\nsh.shardCollection(\"shsample.stats_a\",{\"id\": 1})\n```\n\n- データを追加してみる\n\n```\n> db.stats_a.insert({ id: 1, name: \"hoge\" })\n> db.stats_a.insert({ id: 2, name: \"fuga\" })\n> db.stats_a.insert({ id: 3, name: \"piyo\" })\n```\n\n```\nuse shsample\n> db.stats_a.find()\n```\n\n変わっていなかった…\n\nそもそもchunksizeがバランシングの最小単位なので割と多めのデータを入れないといけない\n\n今回の場合だと1Mですね(chunksize)\n\n## ファイルからデータをインポート\n\n[MongoDBのmongoimportでハマった：変なJSON形式 - 檜山正幸のキマイラ飼育記](http://d.hatena.ne.jp/m-hiyama/20130913/1379036064)\n\n[http://d.hatena.ne.jp/m-hiyama/20130913/1379036064:embed:cite]\n\nここを参考にログを入れてみる\n\nテキストの1行に1個のJSONオブジェクトとのことなのでFluentdとかで出力したログファイルがちょうどよさそう\n\n適当なログをさらってきて突っ込んでみます\n\n```\n$ mongoimport --port 27017 --db shsample --collection stats_a --type json --file sample.log\n```\n\nデータを登録したので確認してみる\n\n```\n> sh.status()\n....\n  databases:\n        {  \"_id\" : \"sample\",  \"primary\" : \"shard0000\",  \"partitioned\" : false }\n        {  \"_id\" : \"test\",  \"primary\" : \"shard0001\",  \"partitioned\" : false }\n        {  \"_id\" : \"shsample\",  \"primary\" : \"shard0002\",  \"partitioned\" : true }\n                shsample.stats_a\n                        shard key: { \"id\" : 1 }\n                        unique: false\n                        balancing: true\n                        chunks:\n                                shard0000       28\n                                shard0001       27\n                                shard0002       153\n                        too many chunks to print, use verbose if you want to force print\n\n```\n\n各シャードに分散されたようです\n\n- 各シャードの件数を確認する\n\n```\n$ mongo localhost:27021/shsample\n> db.stats_a.count()\n18790\n\n$ mongo localhost:27022/shsample\n> db.stats_a.count()\n19673\n\n$ mongo localhost:27023/shsample\n> db.stats_a.count()\n18937\n```\n\n- mongosから問い合わせる\n\n```\n$ mongo localhost:27017\nmongos> db.stats_a.count()\n57400\n```\n\n件数もぴったり合いました\n\nmongodbの特性として各シャード1つ1つが独立したDBとして動作可能という特性がある模様\n\nmongosが各シャードに対してクエリを発行してまとめているという感じでしょうか\n\nshardingに関してはなんとなく概要がつかめた\n\n",
          "objectID": "mongoDB/cluster",
          "_snippetResult": {
            "text": {
              "value": "動\n\n```\n__ais-highlight__m__/ais-highlight__ongos --port 27017 --configdb localhost:27030 --chunkSize 1 --logpath /data/__ais-highlight__m__/ais-highlight__ongo/__ais-highlight__m__/ais-highlight__ongos/log --fork\n```\n\n## 各シャードの起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard3\n\n__ais-highlight__m__/ais-highlight__ongod --port 27021 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__ongod --port 27022 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__ongod",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDBのクラスタ環境をいじってみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2016-11-15",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/cluster",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/__ais-highlight__m__/ais-highlight__ongoDB/cluster.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2016/11/15/033714",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/cluster",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ongoDB",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__ongoDBのクラスタ環境をいじってみる\n\n今回は業務で扱う必要が出てきてしまったため急場しのぎですが__ais-highlight__m__/ais-highlight__ongoDBをやっていきます\n\nいきなりシャーディング＋レプリカセットとかいろんな概念が一気に入ってくるとわからなくなってしまいそうなので1つずつ理解していくようにしていく\n\nまた、各種ノードに関してローカルのサーバでポートを変えればいくらでもノードを立ち上げることができたので一台のVMで複数__ais-highlight__m__/ais-highlight__ongodを立ち上げることで試す\n\n# 前提\n\n大きく分けて下記3つの役割がある\n\n## __ais-highlight__m__/ais-highlight__ongos\nクエリのルーティングなどを行う\nクライアント側のアプリケーションが接続を行うのはこのサーバ\n\n## __ais-highlight__m__/ais-highlight__ongod\n\nシャードやレプリカセットを構成要素となるサーバ(ノード)\n\n__ais-highlight__m__/ais-highlight__ongos,__ais-highlight__m__/ais-highlight__ongod(configserver)がない場合でも機能する(ローカルとか)\n\n## __ais-highlight__m__/ais-highlight__ongod(configserver)\n\n各種設定やメタデータ(shardの設定やロックの情報などを管理)を扱っている\n\n冗長化のためにレプリカセットを組んでおくのが基本\n\n# シャーディングを試す\n\n下記と公式を参考にしました\n\n[__ais-highlight__M__/ais-highlight__ongoDBのSharding機能で遊ぶ - 個人的なまとめ](http://hachi.hatenablog.com/entry/2012/02/26/191349)\n\n[http://hachi.hatenablog.com/entry/2012/02/26/191349:embed:cite]\n\n- コマンドについては下記\n\n[__ais-highlight__M__/ais-highlight__ongoDBのデータ構造な簡単な操作など - Qiita](http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e)\n\n[http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e:embed:cite]\n\n## 構成\n- config\n    - 1台\n- __ais-highlight__m__/ais-highlight__ongos\n    - 1台\n- shard\n    - 3台\n\n![text](cluster01.png)\n\n## configサーバ\n\n```\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/config\n__ais-highlight__m__/ais-highlight__ongod --configsvr --port 27030 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/config --logpath /data/__ais-highlight__m__/ais-highlight__ongo/config/log --fork\n```\n\n## __ais-highlight__m__/ais-highlight__ongosの起動\n\n```\n__ais-highlight__m__/ais-highlight__ongos --port 27017 --configdb localhost:27030 --chunkSize 1 --logpath /data/__ais-highlight__m__/ais-highlight__ongo/__ais-highlight__m__/ais-highlight__ongos/log --fork\n```\n\n## 各シャードの起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard3\n\n__ais-highlight__m__/ais-highlight__ongod --port 27021 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__ongod --port 27022 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__ongod --port 27023 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard3\n```\n\n## シャードの追加\n\n- __ais-highlight__m__/ais-highlight__ongos\n\n```\nuse admin\ndb.runCommand({\"addShard\":\"localhost:27021\"})\ndb.runCommand({\"addShard\":\"localhost:27022\"})\ndb.runCommand({\"addShard\":\"localhost:27023\"})\n```\n\n- シャードの確認\n\nどちらでも同じ出力\n\n```\n> db.printShardingStatus()\n> sh.status()\n--- Sharding Status ---\n  sharding version: {\n        \"_id\" : 1,\n        \"__ais-highlight__m__/ais-highlight__inCompatibleVersion\" : 5,\n        \"currentVersion\" : 6,\n        \"clusterId\" : ObjectId(\"580c68b71fc6c85737ab8492\")\n}\n  shards:\n        {  \"_id\" : \"shard0000\",  \"host\" : \"localhost:27021\" }\n        {  \"_id\" : \"shard0001\",  \"host\" : \"localhost:27022\" }\n        {  \"_id\" : \"shard0002\",  \"host\" : \"localhost:27023\" }\n  active __ais-highlight__m__/ais-highlight__ongoses:\n        \"3.2.7\" : 1\n  balancer:\n        Currently enabled:  yes\n        Currently running:  no\n        Failed balancer rounds in last 5 attempts:  0\n        __ais-highlight__M__/ais-highlight__igration Results for the last 24 hours:\n                No recent __ais-highlight__m__/ais-highlight__igrations\n  databases:\n\n```\n\n## データを入れてみる\n\n```\n__ais-highlight__m__/ais-highlight__ongo localhost:27017\n> use sample # 自動でDB生成\n> db.sample.insert({ category: \"A\", name: \"aaaaaaaaaaa\", age: 25 })\n> db.sample.insert({ category: \"B\", name: \"bbbbbbbbbbb\", age: 35 })\n> db.sample.insert({ category: \"C\", name: \"ccccccccccc\", age: 45 })\n```\n\n- 確認\n\n```\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n```\n\n- 各シャードで確認してみる\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27021\n> use sample\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27022\n> use sample\n> db.sample.find()\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27023\n> use sample\n> db.sample.find()\n```\n\n## シャード設定\n\nDB単位、Collection単位でシャード設定しないといけない模様\n\n新たに`shsample`というDBに`stats_a`というcollectionを追加する\n\n```\n# DB,Collection2つ一遍に設定できるかと思ったら駄目だった\n__ais-highlight__m__/ais-highlight__ongos> sh.shardCollection(\"shsample.stats_a\",{\"id\": 1});\n{ \"ok\" : 0, \"errmsg\" : \"sharding not enabled for db shsample\", \"code\" : 20 }\n\n# シャード設定を追加する\n__ais-highlight__m__/ais-highlight__ongos> use admin\nswitched to db admin\n__ais-highlight__m__/ais-highlight__ongos> db.runCommand({ enablesharding: \"shsample\"});\n{ \"ok\" : 1 }\n\n# shsample に対してシャーディング設定をする( 渡すのはshard key) 複数も可能\nsh.shardCollection(\"shsample.stats_a\",{\"id\": 1})\n```\n\n- データを追加してみる\n\n```\n> db.stats_a.insert({ id: 1, name: \"hoge\" })\n> db.stats_a.insert({ id: 2, name: \"fuga\" })\n> db.stats_a.insert({ id: 3, name: \"piyo\" })\n```\n\n```\nuse shsample\n> db.stats_a.find()\n```\n\n変わっていなかった…\n\nそもそもchunksizeがバランシングの最小単位なので割と多めのデータを入れないといけない\n\n今回の場合だと1Mですね(chunksize)\n\n## ファイルからデータをインポート\n\n[__ais-highlight__M__/ais-highlight__ongoDBの__ais-highlight__m__/ais-highlight__ongoimportでハマった：変なJSON形式 - 檜山正幸のキマイラ飼育記](http://d.hatena.ne.jp/__ais-highlight__m__/ais-highlight__-hiyama/20130913/1379036064)\n\n[http://d.hatena.ne.jp/__ais-highlight__m__/ais-highlight__-hiyama/20130913/1379036064:embed:cite]\n\nここを参考にログを入れてみる\n\nテキストの1行に1個のJSONオブジェクトとのことなのでFluentdとかで出力したログファイルがちょうどよさそう\n\n適当なログをさらってきて突っ込んでみます\n\n```\n$ __ais-highlight__m__/ais-highlight__ongoimport --port 27017 --db shsample --collection stats_a --type json --file sample.log\n```\n\nデータを登録したので確認してみる\n\n```\n> sh.status()\n....\n  databases:\n        {  \"_id\" : \"sample\",  \"primary\" : \"shard0000\",  \"partitioned\" : false }\n        {  \"_id\" : \"test\",  \"primary\" : \"shard0001\",  \"partitioned\" : false }\n        {  \"_id\" : \"shsample\",  \"primary\" : \"shard0002\",  \"partitioned\" : true }\n                shsample.stats_a\n                        shard key: { \"id\" : 1 }\n                        unique: false\n                        balancing: true\n                        chunks:\n                                shard0000       28\n                                shard0001       27\n                                shard0002       153\n                        too __ais-highlight__m__/ais-highlight__any chunks to print, use verbose if you want to force print\n\n```\n\n各シャードに分散されたようです\n\n- 各シャードの件数を確認する\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27021/shsample\n> db.stats_a.count()\n18790\n\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27022/shsample\n> db.stats_a.count()\n19673\n\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27023/shsample\n> db.stats_a.count()\n18937\n```\n\n- __ais-highlight__m__/ais-highlight__ongosから問い合わせる\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27017\n__ais-highlight__m__/ais-highlight__ongos> db.stats_a.count()\n57400\n```\n\n件数もぴったり合いました\n\n__ais-highlight__m__/ais-highlight__ongodbの特性として各シャード1つ1つが独立したDBとして動作可能という特性がある模様\n\n__ais-highlight__m__/ais-highlight__ongosが各シャードに対してクエリを発行してまとめているという感じでしょうか\n\nshardingに関してはなんとなく概要がつかめた\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "mdastを使ってすでに存在するMarkdownファイルに対してコンテンツの追加や修正をする",
          "date": "2023-08-20",
          "slug": "javascript/modify_markdown_with_mdast",
          "github": "https://github.com/swfz/memo/blob/master/docs/javascript/modify_markdown_with_mdast.md",
          "url": "https://swfz.hatenablog.com/entry/2023/08/20/191003",
          "section": "javascript/modify_markdown_with_mdast",
          "tags": [
            "JavaScript",
            "Markdown",
            "Obsidian",
            "AST"
          ],
          "text": "# mdastを使ってすでに存在するMarkdownファイルに対してコンテンツの追加や修正をする\n\n最近はメモや日々の振り返りなどはすべてObsidianを使っていて、DailyNoteになんでも書いて後で切り出していくような流れになっている\n\nそれ以前はNotionに振り返りやその他いろんなことを集約させていたが使うツールを変えたので、できればそれまで使っていたデータも引き継ぎたい\n\nまた、Obsidian以外のどこかに投稿した内容なども集約したいなどのケースもありそう\n\n- Notionでの日次振り返りの内容をObsidianのDailyNoteに転記\n- Notionでの週次振り返りの内容をObsidianのWeeklyNoteに転記\n- Notionでの月次振り返りの内容をObsidianのMonthlyNoteに転記\n- Notionでの習慣化記録をObsidianのDailyNoteに転記\n- 特定SlackチャンネルにPostした内容をObsidianのDailyNoteに転記（ObsidianMemosの内容と混ぜる）\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nなど、ケースはいくらでも出てくると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n今回はそういうケースに対し、mdastを使って既存のMarkdownに対して修正を加えるケースを考える\n\n## サンプル\n\n以後使うMarkdownのサンプル、Obsidianで使っている記法も含めて入れているが結構適当\n\n- sample.md\n\n```markdown\n---\nhoge: 1\nfuga: 2\n---\n\n# title\n\n[[内部リンク]]\n\nhoge_fuga\n\n## Header\n- a_aaa!!!\n- b#hoge\n    - c\n\n\n## 記号\n### エスケープチェック\n'hoge'\n\n\"fuga\"\n\n`piyo`\n\n(aaa)\n\n1 * 2 + 5 / 2 % 3\n\na < 3\n\nb > 3\n\nhttps://example.com?hoge=1&fuga=2\n\n## Tasks\n- [ ] TaskA\n- [ ] TaskB\n```\n\n## ASTの構造\n\nどんなNodeがあるかなどは下記\n\n[syntax-tree/mdast: Markdown Abstract Syntax Tree format](https://github.com/syntax-tree/mdast#nodes)\n\nGitHubのテーブルやfrontmatterなどは拡張でNodeの種類を増やして解釈できるようにしている\n\nサンプルのMarkdownをパースしてみるとこんな感じ\n\n```javascript\n{\n  type: 'root',\n  children: [\n    {\n      type: 'yaml',\n      value: 'hoge: 1\\nfuga: 2',\n      position: {\n        start: { line: 1, column: 1, offset: 0 },\n        end: { line: 4, column: 4, offset: 23 }\n      }\n    },\n    {\n      type: 'heading',\n      depth: 1,\n      children: [\n        {\n          type: 'text',\n          value: 'title',\n          position: {\n            start: { line: 6, column: 3, offset: 27 },\n            end: { line: 6, column: 8, offset: 32 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 6, column: 1, offset: 25 },\n        end: { line: 6, column: 8, offset: 32 }\n      }\n    },\n    {\n      type: 'paragraph',\n      children: [\n        {\n          type: 'text',\n          value: '[[内部リンク]]',\n          position: {\n            start: { line: 8, column: 1, offset: 34 },\n            end: { line: 8, column: 10, offset: 43 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 8, column: 1, offset: 34 },\n        end: { line: 8, column: 10, offset: 43 }\n      }\n    },\n    {\n      type: 'paragraph',\n      children: [\n        {\n          type: 'text',\n          value: 'hoge_fuga',\n          position: {\n            start: { line: 10, column: 1, offset: 45 },\n            end: { line: 10, column: 10, offset: 54 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 10, column: 1, offset: 45 },\n        end: { line: 10, column: 10, offset: 54 }\n      }\n    },\n    {\n      type: 'heading',\n      depth: 2,\n      children: [\n        {\n          type: 'text',\n          value: 'Header',\n          position: {\n            start: { line: 12, column: 4, offset: 59 },\n            end: { line: 12, column: 10, offset: 65 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 12, column: 1, offset: 56 },\n        end: { line: 12, column: 10, offset: 65 }\n      }\n    },\n    .....\n    .....\n    .....\n    .....\n```\n\nこんな感じになっている\n\nMarkdownのデータを取り出すだけなら、`children`以下から対象のNodeを抽出して利用する\n\n構造としてはroot以下にNodeが並んでいて、各Nodeで子のNodeを持っている場合はchildren以下に`Node[]`が存在する\n\n### Positionを除く\n\nASTを出力したが、そのままだと分量が多いので`position`だけ抜いてみるとわかりやすいかも\n\n下記のような関数を用意してconsole出力時にかませる\n\n```javascript\nconst removePositionFromAst = (node) => {\n  if (node.children) {\n    node.children.map(node => removePositionFromAst(node));\n  }\n  delete node.position;\n\n  return node;\n}\n\nconsole.dir(removePositionFromAst(ast), {depth: null});\n```\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nさっきよりは把握しやすいと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n```javascript\n{\n  type: 'root',\n  children: [\n    { type: 'yaml', value: 'hoge: 1\\nfuga: 2' },\n    {\n      type: 'heading',\n      depth: 1,\n      children: [ { type: 'text', value: 'title' } ]\n    },\n    {\n      type: 'paragraph',\n      children: [ { type: 'text', value: '[[内部リンク]]' } ]\n    },\n    {\n      type: 'paragraph',\n      children: [ { type: 'text', value: 'hoge_fuga' } ]\n    },\n    {\n      type: 'heading',\n      depth: 2,\n      children: [ { type: 'text', value: 'Header' } ]\n    },\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: false,\n      children: [\n        {\n          type: 'listItem',\n          spread: false,\n          checked: null,\n          children: [\n            {\n              type: 'paragraph',\n              children: [ { type: 'text', value: 'a_aaa!!!' } ]\n            }]\n        },\n        {\n          type: 'listItem',\n          spread: false,\n          checked: null,\n          children: [\n            {\n              type: 'paragraph',\n              children: [ { type: 'text', value: 'b#hoge' } ]\n            },\n            {\n              type: 'list',\n              ordered: false,\n              start: null,\n              spread: false,\n              children: [\n                {\n                  type: 'listItem',\n                  spread: false,\n                  checked: null,\n                  children: [\n                    {\n                      type: 'paragraph',\n                      children: [ { type: 'text', value: 'c' } ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    .....\n    .....\n    .....\n```\n\n## サンプルコード\n\nここからは実際のサンプルコードをもとに説明していく\n\n下記は`## Task`の上に`## Contents`ヘッダと、動物のリストを入れこむ場合のサンプル\n\n```javascript\nimport {fromMarkdown} from 'mdast-util-from-markdown'\nimport {frontmatter} from 'micromark-extension-frontmatter'\nimport {toMarkdown} from 'mdast-util-to-markdown'\nimport {frontmatterFromMarkdown, frontmatterToMarkdown} from 'mdast-util-frontmatter'\nimport * as fs from 'fs'\n\nconst createContentsAst = (contents) => {\n  const items = contents.map((item) => {\n    return {\n      type: 'listItem',\n      spread: false,\n      checked: null,\n      children: [\n        {\n          type: 'paragraph',\n          children: [\n            {\n              type: 'text',\n              value: item.name,\n            },\n          ],\n        },\n      ],\n    }\n  });\n\n  return {\n    type: 'list',\n    spread: false,\n    children: items,\n  }\n}\n\nconst contentsHeadingAst = {\n  type: \"heading\",\n  depth: 2,\n  children: [\n    {\n      type: \"text\",\n      value: \"Contents\",\n    },\n  ],\n};\n\nconst contents = [\n  {name: 'Seal'},\n  {name: 'Zebra'},\n  {name: 'Bear'},\n]\n\n// Markdownのパース\nconst ast = fromMarkdown(fs.readFileSync('sample.md'), {\n  extensions: [frontmatter(['yaml'])],\n  mdastExtensions: [frontmatterFromMarkdown(['yaml'])]\n});\n\n// コンテンツを入れ込む対象のIndexを特定\nconst targetHeaderIndex = ast.children.findIndex(node => node.type === 'heading' && node.children[0]?.value === 'Tasks');\n\n// 新たに加えるコンテンツのASTを生成\nconst contentsAst = createContentsAst(contents);\n\n// コンテンツを入れ込んだあとの新たなASTのchildrenを生成\nconst children = targetHeaderIndex === -1 ? [...ast.children, contentsHeadingAst, contentsAst] : [\n  ...ast.children.slice(0, targetHeaderIndex),\n  contentsHeadingAst,\n  contentsAst,\n  ...ast.children.slice(targetHeaderIndex),\n]\n\nconst afterAst = { ...ast, ...{children}};\n\n// 書き出し\nconst options = {\n  bullet: '-',\n  extensions: [frontmatterToMarkdown(['yaml'])]\n}\n\nconst replacer = (str) => {\n  return str.replace(/\\\\\\[/g, '[').replace(/\\\\_/g, '_').replace(/\\\\&/g, '&').replace(/\\\\\\*/g, '*');\n}\n\nfs.writeFileSync('sample_stored.md', replacer(toMarkdown(afterAst, options)));\n```\n\n## パース\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nfrontmatterも使っているので`micromark-extension-frontmatter`,`mdast-util-frontmatter`を読み込んでfrontmatterをパースできるようにする\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n[syntax-tree/mdast-util-frontmatter: mdast extensions to parse and serialize frontmatter (YAML, TOML, etc)](https://github.com/syntax-tree/mdast-util-frontmatter)\n\nほぼREADME通り\n\n自分のケースでは`toml`は不要だったので除いた\n\nNodeタイプが`type: yaml`で判断されるようになる\n\nあと書き戻した場合にもしっかりfrontmatterの体をなした状態で書き出せる\n\n### コンテンツを入れ込む対象のIndexを特定\n\n何かしらコンテンツを挿入するなり、編集するなりする場合、目印が必要\n\n`## Task`の上にコンテンツを挿入するケースなので\n\n`children`の中からNodeのtypeが`heading`かつ、そのテキストが`Tasks`のNodeのIndexを取得してそれを元に操作していく\n\nこれはASTの中身見ながらやる\n\n### 新たに加えるコンテンツのASTを生成\n\n呼び出した関数の先でリストのASTを生成している(`createContentsAst`)\n\nサンプルなので簡単なリストを用意した(`contents`)\n\nここはケースに合わせて自分が入れたいコンテンツに合わせたASTを生成する\n\n既存のコンテンツを修正したい場合は既存のNodeを渡してよしなにしてASTを生成する\n\n### コンテンツを入れ込んだあとの新たなASTのchildrenを生成\n\n入れ込む対象のIndexが見つからなかった場合のことも考慮して、ASTの最後に追加した\n\n入れ込む対象のIndexを境にして既存のASTを分割し、間に今回生成した変数(`contentsHeadingAst`, `contentsAst`)を入れる\n\n```javascript\nconst children = targetHeaderIndex === -1 ? [...ast.children, contentsHeadingAst, contentsAst] : [\n  ...ast.children.slice(0, targetHeaderIndex),\n  contentsHeadingAst,\n  contentsAst,\n  ...ast.children.slice(targetHeaderIndex),\n]\n\nconst afterAst = { ...ast, ...{children}};\n```\n\n## 書き出し\n\n```javascript\nconst options = {\n  bullet: '-',\n  extensions: [frontmatterToMarkdown(['yaml'])]\n}\n\nconst replacer = (str) => {\n  return str.replace(/\\\\\\[/g, '[').replace(/\\\\_/g, '_').replace(/\\\\&/g, '&').replace(/\\\\\\*/g, '*');\n}\n\nfs.writeFileSync('sample.md', replacer(toMarkdown(afterAst, options)));\n```\n\nこれもほとんどREADME通り\n\n`replacer`はエスケープされてしまった文字列をもとに戻す処理をしている\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n単純に出力するとエスケープしなくて良い文字列をエスケープしてしまっていた、`toMarkdown`のオプションで回避できるかと調べたり試したりしてみたがうまくいかなかったので愚直ではあるもののこういう処理を挟んでいる\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n今回のケースでは入力が信頼できないものではないのでエスケープしたものを戻す処理をしている\n\nオプション以外に実現できるかみたいなところは調べられてないのでもし他の方法のほうが良いなどあれば教えてくれたら嬉しいです\n\n## まとめ\n\nmdastを用いて、すでに存在するMarkdownに対して新たにヘッダとリストを挿入するサンプルコードを書いた\n\n既存のコンテンツに対して変更を加えたい場合などはIndexの探し方とコンテンツの生成、挿入位置を調整してうまい具合に入れ込んであげれば良い\n\n追加したいコンテンツのデータ取得と整形は毎度書く必要があるが、ある程度流れは一緒かなというところまで持っていけた\n\n本記事に載せたコードはサンプルとして下記にあるので良ければ参考にして見てください\n\n[sandbox/javascript/markdown-modify/sample_insert.js at master · swfz/sandbox](https://github.com/swfz/sandbox/blob/master/javascript/markdown-modify/sample_insert.js)\n\n冒頭記載した「特定SlackチャンネルにPostした内容をObsidianのDailyNoteに転記（ObsidianMemosの内容と混ぜる）」するスクリプトは下記\n\n[swfz/slack-to-obsidian-memos-merge](https://github.com/swfz/slack-to-obsidian-memos-merge)\n",
          "objectID": "javascript/modify_markdown_with_mdast",
          "_snippetResult": {
            "text": {
              "value": "む場合のサンプル\n\n```javascript\nimport {fromMarkdown} from '__ais-highlight__m__/ais-highlight__dast-util-from-__ais-highlight__m__/ais-highlight__arkdown'\nimport {frontmatter} from '__ais-highlight__m__/ais-highlight__icromark-extension-frontmatter'\nimport {toMarkdown} from '__ais-highlight__m__/ais-highlight__dast-util-to-__ais-highlight__m__/ais-highlight__arkdown'\nimport {frontmatterFromMarkdown, frontmatterToMarkdown} from '__ais-highlight__m__/ais-highlight__dast-util-frontmatter'\nimport * as fs from 'fs'\n\nconst createContentsAst = (contents) => {\n  const items = contents.__ais-highlight__m__/ais-highlight__ap((item) => {\n    return",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__dastを使ってすでに存在する__ais-highlight__M__/ais-highlight__arkdownファイルに対してコンテンツの追加や修正をする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-08-20",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "javascript/__ais-highlight__m__/ais-highlight__odify___ais-highlight__m__/ais-highlight__arkdown_with___ais-highlight__m__/ais-highlight__dast",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/javascript/__ais-highlight__m__/ais-highlight__odify___ais-highlight__m__/ais-highlight__arkdown_with___ais-highlight__m__/ais-highlight__dast.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "https://swfz.hatenablog.com/entry/2023/08/20/191003",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "javascript/__ais-highlight__m__/ais-highlight__odify___ais-highlight__m__/ais-highlight__arkdown_with___ais-highlight__m__/ais-highlight__dast",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "Obsidian",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "AST",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__dastを使ってすでに存在する__ais-highlight__M__/ais-highlight__arkdownファイルに対してコンテンツの追加や修正をする\n\n最近はメモや日々の振り返りなどはすべてObsidianを使っていて、DailyNoteになんでも書いて後で切り出していくような流れになっている\n\nそれ以前はNotionに振り返りやその他いろんなことを集約させていたが使うツールを変えたので、できればそれまで使っていたデータも引き継ぎたい\n\nまた、Obsidian以外のどこかに投稿した内容なども集約したいなどのケースもありそう\n\n- Notionでの日次振り返りの内容をObsidianのDailyNoteに転記\n- Notionでの週次振り返りの内容をObsidianのWeeklyNoteに転記\n- Notionでの月次振り返りの内容をObsidianの__ais-highlight__M__/ais-highlight__onthlyNoteに転記\n- Notionでの習慣化記録をObsidianのDailyNoteに転記\n- 特定SlackチャンネルにPostした内容をObsidianのDailyNoteに転記（ObsidianMemosの内容と混ぜる）\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nなど、ケースはいくらでも出てくると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n今回はそういうケースに対し、__ais-highlight__m__/ais-highlight__dastを使って既存の__ais-highlight__M__/ais-highlight__arkdownに対して修正を加えるケースを考える\n\n## サンプル\n\n以後使う__ais-highlight__M__/ais-highlight__arkdownのサンプル、Obsidianで使っている記法も含めて入れているが結構適当\n\n- sample.__ais-highlight__m__/ais-highlight__d\n\n```__ais-highlight__m__/ais-highlight__arkdown\n---\nhoge: 1\nfuga: 2\n---\n\n# title\n\n[[内部リンク]]\n\nhoge_fuga\n\n## Header\n- a_aaa!!!\n- b#hoge\n    - c\n\n\n## 記号\n### エスケープチェック\n'hoge'\n\n\"fuga\"\n\n`piyo`\n\n(aaa)\n\n1 * 2 + 5 / 2 % 3\n\na < 3\n\nb > 3\n\nhttps://example.com?hoge=1&fuga=2\n\n## Tasks\n- [ ] TaskA\n- [ ] TaskB\n```\n\n## ASTの構造\n\nどんなNodeがあるかなどは下記\n\n[syntax-tree/__ais-highlight__m__/ais-highlight__dast: __ais-highlight__M__/ais-highlight__arkdown Abstract Syntax Tree format](https://github.com/syntax-tree/__ais-highlight__m__/ais-highlight__dast#nodes)\n\nGitHubのテーブルやfrontmatterなどは拡張でNodeの種類を増やして解釈できるようにしている\n\nサンプルの__ais-highlight__M__/ais-highlight__arkdownをパースしてみるとこんな感じ\n\n```javascript\n{\n  type: 'root',\n  children: [\n    {\n      type: 'yaml',\n      value: 'hoge: 1\\nfuga: 2',\n      position: {\n        start: { line: 1, column: 1, offset: 0 },\n        end: { line: 4, column: 4, offset: 23 }\n      }\n    },\n    {\n      type: 'heading',\n      depth: 1,\n      children: [\n        {\n          type: 'text',\n          value: 'title',\n          position: {\n            start: { line: 6, column: 3, offset: 27 },\n            end: { line: 6, column: 8, offset: 32 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 6, column: 1, offset: 25 },\n        end: { line: 6, column: 8, offset: 32 }\n      }\n    },\n    {\n      type: 'paragraph',\n      children: [\n        {\n          type: 'text',\n          value: '[[内部リンク]]',\n          position: {\n            start: { line: 8, column: 1, offset: 34 },\n            end: { line: 8, column: 10, offset: 43 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 8, column: 1, offset: 34 },\n        end: { line: 8, column: 10, offset: 43 }\n      }\n    },\n    {\n      type: 'paragraph',\n      children: [\n        {\n          type: 'text',\n          value: 'hoge_fuga',\n          position: {\n            start: { line: 10, column: 1, offset: 45 },\n            end: { line: 10, column: 10, offset: 54 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 10, column: 1, offset: 45 },\n        end: { line: 10, column: 10, offset: 54 }\n      }\n    },\n    {\n      type: 'heading',\n      depth: 2,\n      children: [\n        {\n          type: 'text',\n          value: 'Header',\n          position: {\n            start: { line: 12, column: 4, offset: 59 },\n            end: { line: 12, column: 10, offset: 65 }\n          }\n        }\n      ],\n      position: {\n        start: { line: 12, column: 1, offset: 56 },\n        end: { line: 12, column: 10, offset: 65 }\n      }\n    },\n    .....\n    .....\n    .....\n    .....\n```\n\nこんな感じになっている\n\n__ais-highlight__M__/ais-highlight__arkdownのデータを取り出すだけなら、`children`以下から対象のNodeを抽出して利用する\n\n構造としてはroot以下にNodeが並んでいて、各Nodeで子のNodeを持っている場合はchildren以下に`Node[]`が存在する\n\n### Positionを除く\n\nASTを出力したが、そのままだと分量が多いので`position`だけ抜いてみるとわかりやすいかも\n\n下記のような関数を用意してconsole出力時にかませる\n\n```javascript\nconst removePositionFromAst = (node) => {\n  if (node.children) {\n    node.children.__ais-highlight__m__/ais-highlight__ap(node => removePositionFromAst(node));\n  }\n  delete node.position;\n\n  return node;\n}\n\nconsole.dir(removePositionFromAst(ast), {depth: null});\n```\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nさっきよりは把握しやすいと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n```javascript\n{\n  type: 'root',\n  children: [\n    { type: 'yaml', value: 'hoge: 1\\nfuga: 2' },\n    {\n      type: 'heading',\n      depth: 1,\n      children: [ { type: 'text', value: 'title' } ]\n    },\n    {\n      type: 'paragraph',\n      children: [ { type: 'text', value: '[[内部リンク]]' } ]\n    },\n    {\n      type: 'paragraph',\n      children: [ { type: 'text', value: 'hoge_fuga' } ]\n    },\n    {\n      type: 'heading',\n      depth: 2,\n      children: [ { type: 'text', value: 'Header' } ]\n    },\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: false,\n      children: [\n        {\n          type: 'listItem',\n          spread: false,\n          checked: null,\n          children: [\n            {\n              type: 'paragraph',\n              children: [ { type: 'text', value: 'a_aaa!!!' } ]\n            }]\n        },\n        {\n          type: 'listItem',\n          spread: false,\n          checked: null,\n          children: [\n            {\n              type: 'paragraph',\n              children: [ { type: 'text', value: 'b#hoge' } ]\n            },\n            {\n              type: 'list',\n              ordered: false,\n              start: null,\n              spread: false,\n              children: [\n                {\n                  type: 'listItem',\n                  spread: false,\n                  checked: null,\n                  children: [\n                    {\n                      type: 'paragraph',\n                      children: [ { type: 'text', value: 'c' } ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    .....\n    .....\n    .....\n```\n\n## サンプルコード\n\nここからは実際のサンプルコードをもとに説明していく\n\n下記は`## Task`の上に`## Contents`ヘッダと、動物のリストを入れこむ場合のサンプル\n\n```javascript\nimport {fromMarkdown} from '__ais-highlight__m__/ais-highlight__dast-util-from-__ais-highlight__m__/ais-highlight__arkdown'\nimport {frontmatter} from '__ais-highlight__m__/ais-highlight__icromark-extension-frontmatter'\nimport {toMarkdown} from '__ais-highlight__m__/ais-highlight__dast-util-to-__ais-highlight__m__/ais-highlight__arkdown'\nimport {frontmatterFromMarkdown, frontmatterToMarkdown} from '__ais-highlight__m__/ais-highlight__dast-util-frontmatter'\nimport * as fs from 'fs'\n\nconst createContentsAst = (contents) => {\n  const items = contents.__ais-highlight__m__/ais-highlight__ap((item) => {\n    return {\n      type: 'listItem',\n      spread: false,\n      checked: null,\n      children: [\n        {\n          type: 'paragraph',\n          children: [\n            {\n              type: 'text',\n              value: item.name,\n            },\n          ],\n        },\n      ],\n    }\n  });\n\n  return {\n    type: 'list',\n    spread: false,\n    children: items,\n  }\n}\n\nconst contentsHeadingAst = {\n  type: \"heading\",\n  depth: 2,\n  children: [\n    {\n      type: \"text\",\n      value: \"Contents\",\n    },\n  ],\n};\n\nconst contents = [\n  {name: 'Seal'},\n  {name: 'Zebra'},\n  {name: 'Bear'},\n]\n\n// __ais-highlight__M__/ais-highlight__arkdownのパース\nconst ast = fromMarkdown(fs.readFileSync('sample.__ais-highlight__m__/ais-highlight__d'), {\n  extensions: [frontmatter(['yaml'])],\n  __ais-highlight__m__/ais-highlight__dastExtensions: [frontmatterFromMarkdown(['yaml'])]\n});\n\n// コンテンツを入れ込む対象のIndexを特定\nconst targetHeaderIndex = ast.children.findIndex(node => node.type === 'heading' && node.children[0]?.value === 'Tasks');\n\n// 新たに加えるコンテンツのASTを生成\nconst contentsAst = createContentsAst(contents);\n\n// コンテンツを入れ込んだあとの新たなASTのchildrenを生成\nconst children = targetHeaderIndex === -1 ? [...ast.children, contentsHeadingAst, contentsAst] : [\n  ...ast.children.slice(0, targetHeaderIndex),\n  contentsHeadingAst,\n  contentsAst,\n  ...ast.children.slice(targetHeaderIndex),\n]\n\nconst afterAst = { ...ast, ...{children}};\n\n// 書き出し\nconst options = {\n  bullet: '-',\n  extensions: [frontmatterToMarkdown(['yaml'])]\n}\n\nconst replacer = (str) => {\n  return str.replace(/\\\\\\[/g, '[').replace(/\\\\_/g, '_').replace(/\\\\&/g, '&').replace(/\\\\\\*/g, '*');\n}\n\nfs.writeFileSync('sample_stored.__ais-highlight__m__/ais-highlight__d', replacer(toMarkdown(afterAst, options)));\n```\n\n## パース\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nfrontmatterも使っているので`__ais-highlight__m__/ais-highlight__icromark-extension-frontmatter`,`__ais-highlight__m__/ais-highlight__dast-util-frontmatter`を読み込んでfrontmatterをパースできるようにする\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n[syntax-tree/__ais-highlight__m__/ais-highlight__dast-util-frontmatter: __ais-highlight__m__/ais-highlight__dast extensions to parse and serialize frontmatter (YAML, TOML, etc)](https://github.com/syntax-tree/__ais-highlight__m__/ais-highlight__dast-util-frontmatter)\n\nほぼREADME通り\n\n自分のケースでは`toml`は不要だったので除いた\n\nNodeタイプが`type: yaml`で判断されるようになる\n\nあと書き戻した場合にもしっかりfrontmatterの体をなした状態で書き出せる\n\n### コンテンツを入れ込む対象のIndexを特定\n\n何かしらコンテンツを挿入するなり、編集するなりする場合、目印が必要\n\n`## Task`の上にコンテンツを挿入するケースなので\n\n`children`の中からNodeのtypeが`heading`かつ、そのテキストが`Tasks`のNodeのIndexを取得してそれを元に操作していく\n\nこれはASTの中身見ながらやる\n\n### 新たに加えるコンテンツのASTを生成\n\n呼び出した関数の先でリストのASTを生成している(`createContentsAst`)\n\nサンプルなので簡単なリストを用意した(`contents`)\n\nここはケースに合わせて自分が入れたいコンテンツに合わせたASTを生成する\n\n既存のコンテンツを修正したい場合は既存のNodeを渡してよしなにしてASTを生成する\n\n### コンテンツを入れ込んだあとの新たなASTのchildrenを生成\n\n入れ込む対象のIndexが見つからなかった場合のことも考慮して、ASTの最後に追加した\n\n入れ込む対象のIndexを境にして既存のASTを分割し、間に今回生成した変数(`contentsHeadingAst`, `contentsAst`)を入れる\n\n```javascript\nconst children = targetHeaderIndex === -1 ? [...ast.children, contentsHeadingAst, contentsAst] : [\n  ...ast.children.slice(0, targetHeaderIndex),\n  contentsHeadingAst,\n  contentsAst,\n  ...ast.children.slice(targetHeaderIndex),\n]\n\nconst afterAst = { ...ast, ...{children}};\n```\n\n## 書き出し\n\n```javascript\nconst options = {\n  bullet: '-',\n  extensions: [frontmatterToMarkdown(['yaml'])]\n}\n\nconst replacer = (str) => {\n  return str.replace(/\\\\\\[/g, '[').replace(/\\\\_/g, '_').replace(/\\\\&/g, '&').replace(/\\\\\\*/g, '*');\n}\n\nfs.writeFileSync('sample.__ais-highlight__m__/ais-highlight__d', replacer(toMarkdown(afterAst, options)));\n```\n\nこれもほとんどREADME通り\n\n`replacer`はエスケープされてしまった文字列をもとに戻す処理をしている\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n単純に出力するとエスケープしなくて良い文字列をエスケープしてしまっていた、`toMarkdown`のオプションで回避できるかと調べたり試したりしてみたがうまくいかなかったので愚直ではあるもののこういう処理を挟んでいる\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n今回のケースでは入力が信頼できないものではないのでエスケープしたものを戻す処理をしている\n\nオプション以外に実現できるかみたいなところは調べられてないのでもし他の方法のほうが良いなどあれば教えてくれたら嬉しいです\n\n## まとめ\n\n__ais-highlight__m__/ais-highlight__dastを用いて、すでに存在する__ais-highlight__M__/ais-highlight__arkdownに対して新たにヘッダとリストを挿入するサンプルコードを書いた\n\n既存のコンテンツに対して変更を加えたい場合などはIndexの探し方とコンテンツの生成、挿入位置を調整してうまい具合に入れ込んであげれば良い\n\n追加したいコンテンツのデータ取得と整形は毎度書く必要があるが、ある程度流れは一緒かなというところまで持っていけた\n\n本記事に載せたコードはサンプルとして下記にあるので良ければ参考にして見てください\n\n[sandbox/javascript/__ais-highlight__m__/ais-highlight__arkdown-__ais-highlight__m__/ais-highlight__odify/sample_insert.js at __ais-highlight__m__/ais-highlight__aster · swfz/sandbox](https://github.com/swfz/sandbox/blob/__ais-highlight__m__/ais-highlight__aster/javascript/__ais-highlight__m__/ais-highlight__arkdown-__ais-highlight__m__/ais-highlight__odify/sample_insert.js)\n\n冒頭記載した「特定SlackチャンネルにPostした内容をObsidianのDailyNoteに転記（ObsidianMemosの内容と混ぜる）」するスクリプトは下記\n\n[swfz/slack-to-obsidian-__ais-highlight__m__/ais-highlight__emos-__ais-highlight__m__/ais-highlight__erge](https://github.com/swfz/slack-to-obsidian-__ais-highlight__m__/ais-highlight__emos-__ais-highlight__m__/ais-highlight__erge)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "mdastとjs-yamlを使ってすでに存在するMarkdownファイルのfrontmatterに項目の追加や修正をする",
          "date": "2023-08-27",
          "slug": "javascript/modify_frontmatter_with_mdast",
          "github": "https://github.com/swfz/memo/blob/master/docs/javascript/modify_frontmatter_with_mdast.md",
          "url": "https://swfz.hatenablog.com/entry/2023/08/27/230004",
          "section": "javascript/modify_frontmatter_with_mdast",
          "tags": [
            "JavaScript",
            "Markdown",
            "Obsidian",
            "AST",
            "frontmatter"
          ],
          "text": "# mdastとjs-yamlを使ってすでに存在するMarkdownファイルのfrontmatterに項目の追加や修正をする\n\n[前回](https://swfz.hatenablog.com/entry/2023/08/20/191003)の続き\n\n前回はMarkdownの内容をASTに変換してAST内のコンテンツを追加編集するものだったが、今回はMarkdown内のFrontmatterに対して追加や修正を行う\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nケースとしてはぼちぼちあると思うので残しておく\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n## frontmatterの判定\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n`micromark-extension-frontmatter`,`mdast-util-frontmatter`を読み込んでfrontmatterをパースできるようにする\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n[syntax-tree/mdast-util-frontmatter: mdast extensions to parse and serialize frontmatter (YAML, TOML, etc)](https://github.com/syntax-tree/mdast-util-frontmatter)\n\nほぼREADME通り\n\n自分のケースでは`toml`は不要だったので除いた\n\nこの拡張を含めてパースするとNodeタイプが`type: yaml`で判断されるようになる\n\nあと書き戻した場合にもしっかりfrontmatterの体をなした状態で書き出せる\n\nこの状態でNodeがfrontmatterか?というのは判断できるようになったが、`value`はただの文字列のまま\n\n### Markdown内での記述とfrontmatterNodeの中身\n\n- Markdown内での記述\n\n```yaml\nhoge: 1\nfuga: 2\n```\n\n- frontmatter Nodeの中身\n\n```javascript\n    {\n      type: 'yaml',\n      value: 'hoge: 1\\nfuga: 2',\n      position: {\n        start: { line: 1, column: 1, offset: 0 },\n        end: { line: 4, column: 4, offset: 23 }\n      }\n    },\n```\n\n形式はyamlになっているので今度は`js-yaml`で文字列をパースしてデータの中身をいじれるようにする\n\n### frontmatterNodeの読み込みと値の書き換え\n\n- 実行前\n\n```markdown\n---\nhoge: 1\nfuga: 2\n---\n```\n\n次のようなfrontmatterのMarkdownファイルに対して何かしら追加してみる\n\n一部抜粋\n\n```javascript\nimport yaml from 'js-yaml';\n\nconst frontmatterIndex = ast.children.findIndex(node => node.type === \"yaml\");\nconst frontmatterNode = ast.children[frontmatterIndex];\nconst metadata = yaml.load(frontmatterNode.value);\n\nconst updatedMetadata = {...metadata, ...{added: 'AddedValue!!'}};\nconst frontmatterAst = {...frontMatterNode, ...{value: yaml.dump(newFrontmatter)}};\n\nconst children = [\n  ...ast.children.slice(0,frontmatterIndex),\n  frontmatterAst,\n  ...ast.children.slice(frontmatterIndex + 1)\n];\n\nconst afterAst = { ...ast, ...{children}};\n```\n\nfrontmatterのNodeを特定し、valueの中身を`yaml.load`でパースして中身を編集して`yaml.dump`で文字列に戻してあげる\n\nこのサンプルコードはfrontmatterが既存のMarkdownに存在する前提\n\n- 実行後\n\n```markdown\n---\nhoge: 1\nfuga: 2\nadded: AddedValue!!\n---\n```\n\nしっかり追加される\n\n編集は既存にあるキーを指定してデータをセットしてあげるだけ\n\n## フォーマットのコントロール\n\n前提として、Markdownの修正というからには既存のフォーマットにできるだけ合わせたい\n\n自分の使っている書き方だとデフォルトの挙動からいくつか修正が必要だったので調べた\n\n[nodeca/js-yaml: JavaScript YAML parser and dumper. Very fast.](https://github.com/nodeca/js-yaml)\n\njs-yamlのREADMEに色々と使い方やオプションの説明が載っているので基本的にはそこ読みながらで進められる\n\n### frontmatter修正の流れ\n\nおさらいとしてざっくり処理の流れ\n\n- mdastでMarkdownファイルのASTを生成\n- AST内のfrontmatterのNodeの値をjs-yamlでパースしオブジェクトに変換\n- オブジェクトの中身を修正もしくは追加\n- 修正したオブジェクトをyaml.dumpし、値をfrontmatterのNodeの値(node.value)に設定\n- 修正したNodeをASTに含める\n- mdastでMarkdownファイルへ書き出し\n\n以降は主に2,4番目の話\n\n### 日付にクオートをつけない\n\nデフォルトの挙動で素直に書き戻すと次のような差分が出てしまう\n\n```diff\n- date: 2023-08-01\n+ date: '2023-08-01'\n```\n\noptionの`schema`でいくつか指定できるが`JSON_SCHEMA`を指定することで回避した\n\n```javascript\nconst metadata = yaml.load(frontmatterNode.value, { schema: yaml.JSON_SCHEMA });\n```\n\nこれはYAMLフォーマットから変換するときに特定のフォーマットの文字列は内部的に`date`や他のデータ型で扱うというルールがあるよう\n\n今回は`date`のフォーマットだった、なので出力時にクオートをつけるという仕様になっているみたい\n\nJSON_SCHEMAはJSONのstringify,parseなどと同じ仕様で読み書きするというschemaのよう\n\n日付のフォーマットだったとしても文字列としてそのまま読み書きするためクオートがつかなくなる\n\n変換時の規則を指定するためのものなので今回のようにパースして書き戻すような場合は読み(`load`)書き(`dump`)両方で指定する必要がある\n\n試しにload時指定しなかった場合、次のようなエラーになってしまった\n\n```\nfile:///home/user/gh/self/markdown-importer/node_modules/js-yaml/dist/js-yaml.mjs:3689\n      throw new exception('unacceptable kind of an object to dump ' + type);\n            ^\nYAMLException: unacceptable kind of an object to dump [object Date]\n    at writeNode (file:///home/user/gh/self/markdown-importer/node_modules/js-yaml/dist/js-yaml.mjs:3689:13)\n    at writeBlockMapping (file:///home/user/gh/self/markdown-importer/node_modules/js-yaml/dist/js-yaml.mjs:3552:10)\n    at writeNode (file:///home/user/gh/self/markdown-importer/node_modules/js-yaml/dist/js-yaml.mjs:3655:9)\n    at Object.dump$1 [as dump] (file:///home/user/gh/self/markdown-importer/node_modules/js-yaml/dist/js-yaml.mjs:3781:7)\n    at file:///home/user/gh/self/markdown-importer/sample_yaml.js:43:38\n    at Array.map (<anonymous>)\n    at file:///home/user/gh/self/markdown-importer/sample_yaml.js:33:31\n    at ModuleJob.run (node:internal/modules/esm/module_job:194:25) {\n  reason: 'unacceptable kind of an object to dump [object Date]',\n  mark: undefined\n}\n```\n\n`load`時はDateオブジェクトだねって解釈したが`dump`時はそのまま出力っていわれて「えええっ!!!」っていわれている\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nよく考えたら逆のパターンはもしかしたらエラーにならないかもしれない、試してないけど\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n### 空文字にクオートをつけない\n\nMarkdownファイル上では特に何も記入しなかった場合\n\nデフォルトの挙動で素直に書き戻すと次のような差分が出てしまう\n\n```diff\n- hoge:\n+ hoge: ''\n```\n\nこちらは`dump`時の`styles`オプションで対応する\n\n[nodeca/js-yaml: JavaScript YAML parser and dumper. Very fast.](https://github.com/nodeca/js-yaml#readme)\n\n書き出し(`dump`)時に`styles`オプションで特定のケースに対してどのような処理を行うかを選択する\n\n- frontmatterのNodeAST生成時の処理（抜粋）\n\n```javascript\nconst frontmatterAst = {\n  type: \"yaml\",\n  value: yaml.dump(updatedMetadata, {\n    schema: yaml.JSON_SCHEMA,\n    styles: {\n      '!!null': 'empty'\n    },\n  }),\n}\n```\n\n現状の設定だと空文字は内部的に`null`と判断されているため`null`の場合は`empty`で出力するという指定をする\n\n`empty`はクオートつけないというスタイルのよう\n\n- 結果\n\n```\nhoge:\n```\n\nとなり、勝手にクオートがつかなくなった\n\nREADMEにnullの他のパターン、null以外のint,bool,floatのパターンも載っている\n\n[nodeca/js-yaml: JavaScript YAML parser and dumper. Very fast.](https://github.com/nodeca/js-yaml#dump-object---options-)\n\n## まとめ\n\nこれで今回のユースケースでは満たせそう\n\n- js-yamlでfrontmatterの中身をパースしてキーの追加や上書きをできるようにした\n- フォーマットをコントロールしたい場合はjs-yamlのオプションでコントロールする\n    - stylesで指定\n    - schemaで指定\n\nちょうど下記でMarkdown内のfrontmatter部分だけ修正したいケースが発生し、スクリプトを書いたので参考程度にはなるはず\n\n[markdown-importer/modify_daily_note_frontmatter.js at main · swfz/markdown-importer](https://github.com/swfz/markdown-importer/blob/main/modify_daily_note_frontmatter.js)\n\n",
          "objectID": "javascript/modify_frontmatter_with_mdast",
          "_snippetResult": {
            "text": {
              "value": "writeNode (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3689:13)\n    at writeBlockMapping (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3552:10)\n    at writeNode (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__dastとjs-yamlを使ってすでに存在する__ais-highlight__M__/ais-highlight__arkdownファイルのfrontmatterに項目の追加や修正をする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-08-27",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "javascript/__ais-highlight__m__/ais-highlight__odify_frontmatter_with___ais-highlight__m__/ais-highlight__dast",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/javascript/__ais-highlight__m__/ais-highlight__odify_frontmatter_with___ais-highlight__m__/ais-highlight__dast.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "https://swfz.hatenablog.com/entry/2023/08/27/230004",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "javascript/__ais-highlight__m__/ais-highlight__odify_frontmatter_with___ais-highlight__m__/ais-highlight__dast",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "Obsidian",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "AST",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "frontmatter",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__dastとjs-yamlを使ってすでに存在する__ais-highlight__M__/ais-highlight__arkdownファイルのfrontmatterに項目の追加や修正をする\n\n[前回](https://swfz.hatenablog.com/entry/2023/08/20/191003)の続き\n\n前回は__ais-highlight__M__/ais-highlight__arkdownの内容をASTに変換してAST内のコンテンツを追加編集するものだったが、今回は__ais-highlight__M__/ais-highlight__arkdown内のFrontmatterに対して追加や修正を行う\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nケースとしてはぼちぼちあると思うので残しておく\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n## frontmatterの判定\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n`__ais-highlight__m__/ais-highlight__icromark-extension-frontmatter`,`__ais-highlight__m__/ais-highlight__dast-util-frontmatter`を読み込んでfrontmatterをパースできるようにする\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n[syntax-tree/__ais-highlight__m__/ais-highlight__dast-util-frontmatter: __ais-highlight__m__/ais-highlight__dast extensions to parse and serialize frontmatter (YAML, TOML, etc)](https://github.com/syntax-tree/__ais-highlight__m__/ais-highlight__dast-util-frontmatter)\n\nほぼREADME通り\n\n自分のケースでは`toml`は不要だったので除いた\n\nこの拡張を含めてパースするとNodeタイプが`type: yaml`で判断されるようになる\n\nあと書き戻した場合にもしっかりfrontmatterの体をなした状態で書き出せる\n\nこの状態でNodeがfrontmatterか?というのは判断できるようになったが、`value`はただの文字列のまま\n\n### __ais-highlight__M__/ais-highlight__arkdown内での記述とfrontmatterNodeの中身\n\n- __ais-highlight__M__/ais-highlight__arkdown内での記述\n\n```yaml\nhoge: 1\nfuga: 2\n```\n\n- frontmatter Nodeの中身\n\n```javascript\n    {\n      type: 'yaml',\n      value: 'hoge: 1\\nfuga: 2',\n      position: {\n        start: { line: 1, column: 1, offset: 0 },\n        end: { line: 4, column: 4, offset: 23 }\n      }\n    },\n```\n\n形式はyamlになっているので今度は`js-yaml`で文字列をパースしてデータの中身をいじれるようにする\n\n### frontmatterNodeの読み込みと値の書き換え\n\n- 実行前\n\n```__ais-highlight__m__/ais-highlight__arkdown\n---\nhoge: 1\nfuga: 2\n---\n```\n\n次のようなfrontmatterの__ais-highlight__M__/ais-highlight__arkdownファイルに対して何かしら追加してみる\n\n一部抜粋\n\n```javascript\nimport yaml from 'js-yaml';\n\nconst frontmatterIndex = ast.children.findIndex(node => node.type === \"yaml\");\nconst frontmatterNode = ast.children[frontmatterIndex];\nconst __ais-highlight__m__/ais-highlight__etadata = yaml.load(frontmatterNode.value);\n\nconst updatedMetadata = {...__ais-highlight__m__/ais-highlight__etadata, ...{added: 'AddedValue!!'}};\nconst frontmatterAst = {...frontMatterNode, ...{value: yaml.dump(newFrontmatter)}};\n\nconst children = [\n  ...ast.children.slice(0,frontmatterIndex),\n  frontmatterAst,\n  ...ast.children.slice(frontmatterIndex + 1)\n];\n\nconst afterAst = { ...ast, ...{children}};\n```\n\nfrontmatterのNodeを特定し、valueの中身を`yaml.load`でパースして中身を編集して`yaml.dump`で文字列に戻してあげる\n\nこのサンプルコードはfrontmatterが既存の__ais-highlight__M__/ais-highlight__arkdownに存在する前提\n\n- 実行後\n\n```__ais-highlight__m__/ais-highlight__arkdown\n---\nhoge: 1\nfuga: 2\nadded: AddedValue!!\n---\n```\n\nしっかり追加される\n\n編集は既存にあるキーを指定してデータをセットしてあげるだけ\n\n## フォーマットのコントロール\n\n前提として、__ais-highlight__M__/ais-highlight__arkdownの修正というからには既存のフォーマットにできるだけ合わせたい\n\n自分の使っている書き方だとデフォルトの挙動からいくつか修正が必要だったので調べた\n\n[nodeca/js-yaml: JavaScript YAML parser and dumper. Very fast.](https://github.com/nodeca/js-yaml)\n\njs-yamlのREADMEに色々と使い方やオプションの説明が載っているので基本的にはそこ読みながらで進められる\n\n### frontmatter修正の流れ\n\nおさらいとしてざっくり処理の流れ\n\n- __ais-highlight__m__/ais-highlight__dastで__ais-highlight__M__/ais-highlight__arkdownファイルのASTを生成\n- AST内のfrontmatterのNodeの値をjs-yamlでパースしオブジェクトに変換\n- オブジェクトの中身を修正もしくは追加\n- 修正したオブジェクトをyaml.dumpし、値をfrontmatterのNodeの値(node.value)に設定\n- 修正したNodeをASTに含める\n- __ais-highlight__m__/ais-highlight__dastで__ais-highlight__M__/ais-highlight__arkdownファイルへ書き出し\n\n以降は主に2,4番目の話\n\n### 日付にクオートをつけない\n\nデフォルトの挙動で素直に書き戻すと次のような差分が出てしまう\n\n```diff\n- date: 2023-08-01\n+ date: '2023-08-01'\n```\n\noptionの`schema`でいくつか指定できるが`JSON_SCHEMA`を指定することで回避した\n\n```javascript\nconst __ais-highlight__m__/ais-highlight__etadata = yaml.load(frontmatterNode.value, { schema: yaml.JSON_SCHEMA });\n```\n\nこれはYAMLフォーマットから変換するときに特定のフォーマットの文字列は内部的に`date`や他のデータ型で扱うというルールがあるよう\n\n今回は`date`のフォーマットだった、なので出力時にクオートをつけるという仕様になっているみたい\n\nJSON_SCHEMAはJSONのstringify,parseなどと同じ仕様で読み書きするというschemaのよう\n\n日付のフォーマットだったとしても文字列としてそのまま読み書きするためクオートがつかなくなる\n\n変換時の規則を指定するためのものなので今回のようにパースして書き戻すような場合は読み(`load`)書き(`dump`)両方で指定する必要がある\n\n試しにload時指定しなかった場合、次のようなエラーになってしまった\n\n```\nfile:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3689\n      throw new exception('unacceptable kind of an object to dump ' + type);\n            ^\nYAMLException: unacceptable kind of an object to dump [object Date]\n    at writeNode (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3689:13)\n    at writeBlockMapping (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3552:10)\n    at writeNode (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3655:9)\n    at Object.dump$1 [as dump] (file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/node___ais-highlight__m__/ais-highlight__odules/js-yaml/dist/js-yaml.__ais-highlight__m__/ais-highlight__js:3781:7)\n    at file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/sample_yaml.js:43:38\n    at Array.__ais-highlight__m__/ais-highlight__ap (<anonymous>)\n    at file:///home/user/gh/self/__ais-highlight__m__/ais-highlight__arkdown-importer/sample_yaml.js:33:31\n    at __ais-highlight__M__/ais-highlight__oduleJob.run (node:internal/__ais-highlight__m__/ais-highlight__odules/esm/__ais-highlight__m__/ais-highlight__odule_job:194:25) {\n  reason: 'unacceptable kind of an object to dump [object Date]',\n  __ais-highlight__m__/ais-highlight__ark: undefined\n}\n```\n\n`load`時はDateオブジェクトだねって解釈したが`dump`時はそのまま出力っていわれて「えええっ!!!」っていわれている\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nよく考えたら逆のパターンはもしかしたらエラーにならないかもしれない、試してないけど\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n### 空文字にクオートをつけない\n\n__ais-highlight__M__/ais-highlight__arkdownファイル上では特に何も記入しなかった場合\n\nデフォルトの挙動で素直に書き戻すと次のような差分が出てしまう\n\n```diff\n- hoge:\n+ hoge: ''\n```\n\nこちらは`dump`時の`styles`オプションで対応する\n\n[nodeca/js-yaml: JavaScript YAML parser and dumper. Very fast.](https://github.com/nodeca/js-yaml#readme)\n\n書き出し(`dump`)時に`styles`オプションで特定のケースに対してどのような処理を行うかを選択する\n\n- frontmatterのNodeAST生成時の処理（抜粋）\n\n```javascript\nconst frontmatterAst = {\n  type: \"yaml\",\n  value: yaml.dump(updatedMetadata, {\n    schema: yaml.JSON_SCHEMA,\n    styles: {\n      '!!null': 'empty'\n    },\n  }),\n}\n```\n\n現状の設定だと空文字は内部的に`null`と判断されているため`null`の場合は`empty`で出力するという指定をする\n\n`empty`はクオートつけないというスタイルのよう\n\n- 結果\n\n```\nhoge:\n```\n\nとなり、勝手にクオートがつかなくなった\n\nREADMEにnullの他のパターン、null以外のint,bool,floatのパターンも載っている\n\n[nodeca/js-yaml: JavaScript YAML parser and dumper. Very fast.](https://github.com/nodeca/js-yaml#dump-object---options-)\n\n## まとめ\n\nこれで今回のユースケースでは満たせそう\n\n- js-yamlでfrontmatterの中身をパースしてキーの追加や上書きをできるようにした\n- フォーマットをコントロールしたい場合はjs-yamlのオプションでコントロールする\n    - stylesで指定\n    - schemaで指定\n\nちょうど下記で__ais-highlight__M__/ais-highlight__arkdown内のfrontmatter部分だけ修正したいケースが発生し、スクリプトを書いたので参考程度にはなるはず\n\n[__ais-highlight__m__/ais-highlight__arkdown-importer/__ais-highlight__m__/ais-highlight__odify_daily_note_frontmatter.js at __ais-highlight__m__/ais-highlight__ain · swfz/__ais-highlight__m__/ais-highlight__arkdown-importer](https://github.com/swfz/__ais-highlight__m__/ais-highlight__arkdown-importer/blob/__ais-highlight__m__/ais-highlight__ain/__ais-highlight__m__/ais-highlight__odify_daily_note_frontmatter.js)\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "minioを使ってS3の環境をローカルで再現する",
          "date": "2016-08-30",
          "slug": "aws/minio_s3",
          "github": "https://github.com/swfz/memo/blob/master/docs/aws/minio_s3.md",
          "url": "http://swfz.hatenablog.com/entry/2016/08/31/031634",
          "section": "aws/minio_s3",
          "tags": [
            "AWS"
          ],
          "text": "# minioを使ってS3の環境をローカルで再現する\n\n# minio\n\nS3互換の環境を立ててくれるS3のクローンプロダクトだそうです\n\n[minio/minio: Minio is an object storage server compatible with Amazon S3 and licensed under Apache 2.0 License](https://github.com/minio/minio)\n\n[https://github.com/minio/minio:embed:cite]\n\n開発環境などでS3を用いたCIをまわすときとかに料金を気にせず使えそうですね\n\nさっそく試してみましょう\n\n# インストール、起動\n\n```\nmkdir s3dir\ncurl https://dl.minio.io/server/minio/release/linux-amd64/minio > minio\nchmod +x minio\n./minio server s3dir\n```\n\n`./minio ${command} ${directory}`\n\nサブコマンドとオブジェクトを保存するディレクトリを指定するとサーバが起動します\n\n```\nEndpoint:  http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\nAccessKey: PX511CAFVA1T4DBVSV6B\nSecretKey: YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\nRegion:    us-east-1\n\nBrowser Access:\n   http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\n\nCommand-line Access: https://docs.minio.io/docs/minio-client-quickstart-guide\n   $ mc config host add myminio http://192.168.30.93:9000 PX511CAFVA1T4DBVSV6B YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\n\nObject API (Amazon S3 compatible):\n   Go:         https://docs.minio.io/docs/golang-client-quickstart-guide\n   Java:       https://docs.minio.io/docs/java-client-quickstart-guide\n   Python:     https://docs.minio.io/docs/python-client-quickstart-guide\n   JavaScript: https://docs.minio.io/docs/javascript-client-quickstart-guide\n```\n\nエンドポイントやアクセスキーが表示されるのでそれを用いてCLIなどから操作していきます\n\n# Web UI\n\nデフォルト9000番でサービスが起動してWebからもminioに対して操作ができます\n\n![text](minio_s301.PNG )\n\n# docker image\n\ndockerのimageも用意してあるようなのでそっちを使ったほうが楽ですね\n\n[Minio Docs](https://docs.minio.io/docs/minio-docker-quickstart-guide)\n\n[https://docs.minio.io/docs/minio-docker-quickstart-guide:embed:cite]\n\n- docker-compose.yml\n\n```\n  s3minio:\n    image: minio/minio\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - \"./tmps3:/export\"\n    environment:\n      - \"MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\"\n      - \"MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n```\n\n事前に`./tmps3`ディレクトリは作成しておきます\n\n- コンテナ起動\n\n```\ndocker-compose up\n```\n\nこれだけ、簡単すぎる!\n\n# 一通り試してみる\n\n環境構築が終わったのでSDK経由の操作をやってみます\n\ncredentialsはdocker-compose.ymlで指定した値を入力します\n\n- s3-in-minio.rb\n\n```\nrequire \"aws-sdk-core\"\nrequire \"tapp\"\n\ncredentials = Aws::Credentials.new(\n  'AKIAIOSFODNN7EXAMPLE',\n  'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\n)\n\nclient = Aws::S3::Client.new(\n  credentials: credentials,\n  region: 'us-east-1',\n  endpoint: 'http://192.168.30.93:9000',\n  force_path_style: true\n)\n\nclient.list_buckets.tapp\nres = client.list_objects(bucket: \"sample\")\nres.contents.each do |o|\n  puts \"#{o.key}\"\nend\n\n# バケットの作成\n# client.create_bucket(bucket: 'aaa')\n#\n# ファイルのアップロード\n# file = File.open(\"sample.txt\")\n# filename = File.basename(\"sample.txt\")\n# client.put_object(\n#   bucket: \"sample\",\n#   body: file,\n#   key: filename\n# )\n\n# ファイルのダウンロード\n# dl_filename = \"index.html\"\n# File.open(dl_filename, \"w\") do |f|\n#   client.get_object(bucket: \"sample\", key: dl_filename) do |chunk|\n#     f.write(chunk)\n#   end\n# end\n```\n\n## gemのインストール\n\n```\n[s3sample]$ gem install aws-sdk tapp\n```\n\n一通りためした後のbucketリストなどが表示されました\n\n```\n[s3sample]$ ruby s3-in-minio.rb\n#<struct Aws::S3::Types::ListBucketsOutput\n buckets=\n  [#<struct Aws::S3::Types::Bucket\n    name=\"aaa\",\n    creation_date=2016-08-23 14:40:37 UTC>,\n   #<struct Aws::S3::Types::Bucket\n    name=\"sample\",\n    creation_date=2016-08-23 14:45:45 UTC>],\n owner=#<struct Aws::S3::Types::Owner display_name=\"minio\", id=\"minio\">>\nindex.html\nsample.txt\n```\n\n# まとめ\n\n簡単にS3互換の環境をローカルに立てることができました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nプロダクションならS3で良いと思いますが、CI回したり、開発時のローカル環境用で使えそうです\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n\n",
          "objectID": "aws/minio_s3",
          "_snippetResult": {
            "text": {
              "value": "そうですね\n\nさっそく試してみましょう\n\n# インストール、起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir s3dir\ncurl https://dl.__ais-highlight__m__/ais-highlight__inio.io/server/__ais-highlight__m__/ais-highlight__inio/release/linux-amd64/__ais-highlight__m__/ais-highlight__inio > __ais-highlight__m__/ais-highlight__inio\nchmod +x __ais-highlight__m__/ais-highlight__inio\n./__ais-highlight__m__/ais-highlight__inio server s3dir\n```\n\n`./__ais-highlight__m__/ais-highlight__inio ${command} ${directory",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__inioを使ってS3の環境をローカルで再現する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2016-08-30",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "aws/__ais-highlight__m__/ais-highlight__inio_s3",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/aws/__ais-highlight__m__/ais-highlight__inio_s3.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2016/08/31/031634",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "aws/__ais-highlight__m__/ais-highlight__inio_s3",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "AWS",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__inioを使ってS3の環境をローカルで再現する\n\n# __ais-highlight__m__/ais-highlight__inio\n\nS3互換の環境を立ててくれるS3のクローンプロダクトだそうです\n\n[__ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio: __ais-highlight__M__/ais-highlight__inio is an object storage server compatible with Amazon S3 and licensed under Apache 2.0 License](https://github.com/__ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio)\n\n[https://github.com/__ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio:embed:cite]\n\n開発環境などでS3を用いたCIをまわすときとかに料金を気にせず使えそうですね\n\nさっそく試してみましょう\n\n# インストール、起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir s3dir\ncurl https://dl.__ais-highlight__m__/ais-highlight__inio.io/server/__ais-highlight__m__/ais-highlight__inio/release/linux-amd64/__ais-highlight__m__/ais-highlight__inio > __ais-highlight__m__/ais-highlight__inio\nchmod +x __ais-highlight__m__/ais-highlight__inio\n./__ais-highlight__m__/ais-highlight__inio server s3dir\n```\n\n`./__ais-highlight__m__/ais-highlight__inio ${command} ${directory}`\n\nサブコマンドとオブジェクトを保存するディレクトリを指定するとサーバが起動します\n\n```\nEndpoint:  http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\nAccessKey: PX511CAFVA1T4DBVSV6B\nSecretKey: YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\nRegion:    us-east-1\n\nBrowser Access:\n   http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\n\nCommand-line Access: https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-client-quickstart-guide\n   $ __ais-highlight__m__/ais-highlight__c config host add __ais-highlight__m__/ais-highlight__yminio http://192.168.30.93:9000 PX511CAFVA1T4DBVSV6B YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\n\nObject API (Amazon S3 compatible):\n   Go:         https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/golang-client-quickstart-guide\n   Java:       https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/java-client-quickstart-guide\n   Python:     https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/python-client-quickstart-guide\n   JavaScript: https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/javascript-client-quickstart-guide\n```\n\nエンドポイントやアクセスキーが表示されるのでそれを用いてCLIなどから操作していきます\n\n# Web UI\n\nデフォルト9000番でサービスが起動してWebからも__ais-highlight__m__/ais-highlight__inioに対して操作ができます\n\n![text](__ais-highlight__m__/ais-highlight__inio_s301.PNG )\n\n# docker image\n\ndockerのimageも用意してあるようなのでそっちを使ったほうが楽ですね\n\n[__ais-highlight__M__/ais-highlight__inio Docs](https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-docker-quickstart-guide)\n\n[https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-docker-quickstart-guide:embed:cite]\n\n- docker-compose.yml\n\n```\n  s3minio:\n    image: __ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - \"./tmps3:/export\"\n    environment:\n      - \"__ais-highlight__M__/ais-highlight__INIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\"\n      - \"__ais-highlight__M__/ais-highlight__INIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n```\n\n事前に`./tmps3`ディレクトリは作成しておきます\n\n- コンテナ起動\n\n```\ndocker-compose up\n```\n\nこれだけ、簡単すぎる!\n\n# 一通り試してみる\n\n環境構築が終わったのでSDK経由の操作をやってみます\n\ncredentialsはdocker-compose.ymlで指定した値を入力します\n\n- s3-in-__ais-highlight__m__/ais-highlight__inio.rb\n\n```\nrequire \"aws-sdk-core\"\nrequire \"tapp\"\n\ncredentials = Aws::Credentials.new(\n  'AKIAIOSFODNN7EXAMPLE',\n  'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\n)\n\nclient = Aws::S3::Client.new(\n  credentials: credentials,\n  region: 'us-east-1',\n  endpoint: 'http://192.168.30.93:9000',\n  force_path_style: true\n)\n\nclient.list_buckets.tapp\nres = client.list_objects(bucket: \"sample\")\nres.contents.each do |o|\n  puts \"#{o.key}\"\nend\n\n# バケットの作成\n# client.create_bucket(bucket: 'aaa')\n#\n# ファイルのアップロード\n# file = File.open(\"sample.txt\")\n# filename = File.basename(\"sample.txt\")\n# client.put_object(\n#   bucket: \"sample\",\n#   body: file,\n#   key: filename\n# )\n\n# ファイルのダウンロード\n# dl_filename = \"index.html\"\n# File.open(dl_filename, \"w\") do |f|\n#   client.get_object(bucket: \"sample\", key: dl_filename) do |chunk|\n#     f.write(chunk)\n#   end\n# end\n```\n\n## gemのインストール\n\n```\n[s3sample]$ gem install aws-sdk tapp\n```\n\n一通りためした後のbucketリストなどが表示されました\n\n```\n[s3sample]$ ruby s3-in-__ais-highlight__m__/ais-highlight__inio.rb\n#<struct Aws::S3::Types::ListBucketsOutput\n buckets=\n  [#<struct Aws::S3::Types::Bucket\n    name=\"aaa\",\n    creation_date=2016-08-23 14:40:37 UTC>,\n   #<struct Aws::S3::Types::Bucket\n    name=\"sample\",\n    creation_date=2016-08-23 14:45:45 UTC>],\n owner=#<struct Aws::S3::Types::Owner display_name=\"__ais-highlight__m__/ais-highlight__inio\", id=\"__ais-highlight__m__/ais-highlight__inio\">>\nindex.html\nsample.txt\n```\n\n# まとめ\n\n簡単にS3互換の環境をローカルに立てることができました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nプロダクションならS3で良いと思いますが、CI回したり、開発時のローカル環境用で使えそうです\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "[B] mysql slow-logのlogrotate",
          "date": "2015-05-19",
          "slug": "mysql/20150519_mysql_logrotate",
          "github": "https://github.com/swfz/memo/blob/master/docs/mysql/20150519_mysql_logrotate.md",
          "url": "http://swfz.hatenablog.com/entry/2015/05/19/072711",
          "section": "mysql/20150519_mysql_logrotate",
          "tags": [
            "MySQL"
          ],
          "text": "# MySQL slow-logのlogrotate\n\n今まで動いていたログローテーションが動かなくなったので何だと思って調べたら色々はまったのでメモ\n\n```\n$ ls -al /var/lib/mysql\n-rw-rw---- 1 mysql mysql          0 May 14 04:08 mysql-slow.log\n-rw-rw---- 1 mysql mysql 7416685154 May 18 11:28 mysql-slow.log-20150514\n....\n....\n```\n\n現象は上記のようにファイル名は変わるけど書き込み先が変わらないというもの\n\n結果いつまでも20150514のファイルに書き込みいくし圧縮もされないしディスク容量も圧迫する\n\nまずはファイルを見てみましょう\n\n* /etc/logrotate.d/mysql\n\n```\n/var/lib/mysql/mysql-slow.log /var/lib/mysql/mysqld.log {\n        # create 600 mysql mysql\n        notifempty\n        daily\n        rotate 3\n        missingok\n        compress\n    postrotate\n        # just if mysqld is really running\n        if test -x /usr/bin/mysqladmin && \\\n           /usr/bin/mysqladmin ping &>/dev/null\n        then\n           /usr/bin/mysqladmin flush-logs\n        fi\n    endscript\n}\n```\n\n## パスワード設定\n\n設定自体は悪くなさそうだし、特に変更をしたわけではないのにどうして…。\n\nと思っていたらありました、直近でパスワードをrootユーザーに付与しましたw\n\nローテーション時にパスワードが入力できないのでmysqladminのflush-logsが実行されない\n\nよく見れば/etc/logrotate.d/mysqlにコメントアウトで書いてある…\n\nそれに従い/root/.my.cnfを設定\n\n* /root/.my.cnf\n\n```\n[mysqladmin]\npassword = passwd\nuser = root\n```\n\n600のパーミッションにもしたし。後は様子を見るだけ…。\n\nはい、ダメでしたー\n\n強制実行ではローテーションできるのにcrontabだと実行されない\n\n* 強制実行\n\n```\nlogrotate -f /etc/logrotate.d/mysql\n```\n\n## 環境変数\n\nコンソールで実行できてcronで実行できない、この手のトラブルはよくあるあれですね、環境変数\n\n他の記事にも書いてありましたが(URL忘れた...)\n\nrootユーザーのHOMEがうまく読み込まれていないことが原因\n\nなので下記のようにpostrotate実行時に適切な環境変数を設定してあげました\n\n```\n   postrotate\n        # just if mysqld is really running\n+        export HOME=/root/\n        if test -x /usr/bin/mysqladmin && \\\n}\n```\n\n## 無事\n\nrotateがされるようになりました、めでたしめでたしw\n\n\n",
          "objectID": "mysql/20150519_mysql_logrotate",
          "_snippetResult": {
            "text": {
              "value": "# MySQL slow-logのlogrotate\n\n今まで動いていたログローテーションが動かなくなったので何だと思って調べたら色々はまったの",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__m__/ais-highlight__ysql slow-logのlogrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2015-05-19",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20150519___ais-highlight__m__/ais-highlight__ysql_logrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/__ais-highlight__m__/ais-highlight__emo/blob/__ais-highlight__m__/ais-highlight__aster/docs/__ais-highlight__m__/ais-highlight__ysql/20150519___ais-highlight__m__/ais-highlight__ysql_logrotate.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2015/05/19/072711",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20150519___ais-highlight__m__/ais-highlight__ysql_logrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__ySQL slow-logのlogrotate\n\n今まで動いていたログローテーションが動かなくなったので何だと思って調べたら色々はまったのでメモ\n\n```\n$ ls -al /var/lib/__ais-highlight__m__/ais-highlight__ysql\n-rw-rw---- 1 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql          0 __ais-highlight__M__/ais-highlight__ay 14 04:08 __ais-highlight__m__/ais-highlight__ysql-slow.log\n-rw-rw---- 1 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql 7416685154 __ais-highlight__M__/ais-highlight__ay 18 11:28 __ais-highlight__m__/ais-highlight__ysql-slow.log-20150514\n....\n....\n```\n\n現象は上記のようにファイル名は変わるけど書き込み先が変わらないというもの\n\n結果いつまでも20150514のファイルに書き込みいくし圧縮もされないしディスク容量も圧迫する\n\nまずはファイルを見てみましょう\n\n* /etc/logrotate.d/__ais-highlight__m__/ais-highlight__ysql\n\n```\n/var/lib/__ais-highlight__m__/ais-highlight__ysql/__ais-highlight__m__/ais-highlight__ysql-slow.log /var/lib/__ais-highlight__m__/ais-highlight__ysql/__ais-highlight__m__/ais-highlight__ysqld.log {\n        # create 600 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql\n        notifempty\n        daily\n        rotate 3\n        __ais-highlight__m__/ais-highlight__issingok\n        compress\n    postrotate\n        # just if __ais-highlight__m__/ais-highlight__ysqld is really running\n        if test -x /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin && \\\n           /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin ping &>/dev/null\n        then\n           /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin flush-logs\n        fi\n    endscript\n}\n```\n\n## パスワード設定\n\n設定自体は悪くなさそうだし、特に変更をしたわけではないのにどうして…。\n\nと思っていたらありました、直近でパスワードをrootユーザーに付与しましたw\n\nローテーション時にパスワードが入力できないので__ais-highlight__m__/ais-highlight__ysqladminのflush-logsが実行されない\n\nよく見れば/etc/logrotate.d/__ais-highlight__m__/ais-highlight__ysqlにコメントアウトで書いてある…\n\nそれに従い/root/.__ais-highlight__m__/ais-highlight__y.cnfを設定\n\n* /root/.__ais-highlight__m__/ais-highlight__y.cnf\n\n```\n[__ais-highlight__m__/ais-highlight__ysqladmin]\npassword = passwd\nuser = root\n```\n\n600のパーミッションにもしたし。後は様子を見るだけ…。\n\nはい、ダメでしたー\n\n強制実行ではローテーションできるのにcrontabだと実行されない\n\n* 強制実行\n\n```\nlogrotate -f /etc/logrotate.d/mysql\n```\n\n## 環境変数\n\nコンソールで実行できてcronで実行できない、この手のトラブルはよくあるあれですね、環境変数\n\n他の記事にも書いてありましたが(URL忘れた...)\n\nrootユーザーのHOMEがうまく読み込まれていないことが原因\n\nなので下記のようにpostrotate実行時に適切な環境変数を設定してあげました\n\n```\n   postrotate\n        # just if mysqld is really running\n+        export HOME=/root/\n        if test -x /usr/bin/mysqladmin && \\\n}\n```\n\n## 無事\n\nrotateがされるようになりました、めでたしめでたしw\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            }
          }
        },
        {
          "title": "[B] MySQLのレプリケーション設定",
          "date": "2014-08-31",
          "slug": "mysql/20140831_mysql_replication",
          "github": "https://github.com/swfz/memo/blob/master/docs/mysql/20140831_mysql_replication.md",
          "url": "http://swfz.hatenablog.com/entry/2014/08/31/233321",
          "section": "mysql/20140831_mysql_replication",
          "tags": [
            "MySQL"
          ],
          "text": "# MySQLのレプリケーション設定\r\n\r\n基本的なレプリケーションについて、master-slave1台ずつの構成をサンプルにしてます。\r\n\r\n* master(192.168.1.11)\r\n* slave(192.168.1.12)\r\n\r\n## masterの設定\r\n\r\n* レプリケーション用ユーザーの作成\r\n\r\nslave(192.168.1.0/24)からserver2というユーザーでrelay_logを取得しにくる許可をする\r\n\r\n```txt\r\n> GRANT REPLICATION SLAVE ON *.* TO 'server2'@'192.168.1.0/255.255.255.0';\r\n```\r\n\r\n* my.cnf\r\n\r\n```txt\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nserver-id=1\r\n```\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nserver-idは実運用のときはIPの台4オクテットとか分かりやすいようにしたほうが良いと思います。\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\n## slaveの設定\r\n\r\n```txt\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nlog_slave_updates\r\nserver-id=2\r\n```\r\n\r\nslaveをmasterとして使う場合がある場合は下記を追加\r\n\r\n`log_slave_updates`\r\n\r\n\r\n## スナップショットの作成 at master\r\n\r\n* ロック、binlogのポジションを確認\r\n\r\n```txt\r\n> flush tables with read lock;\r\n> show master status;\r\n+------------------+----------+--------------+------------------+\r\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n+------------------+----------+--------------+------------------+\r\n| mysql-bin.000001 |      396 |              |                  |\r\n+------------------+----------+--------------+------------------+\r\n```\r\n\r\n* ロックしている間にダンプファイルを作成する\r\n\r\n```txt\r\nmysqldump -u root -p database_name --lock-all-tables > dump.sql\r\n```\r\n\r\n* ロック解除\r\n\r\n```sql\r\nunlock tables;\r\n```\r\n\r\nextrabackupなどですでにバックアップをとっていてslave_infoなどがある場合\r\n\r\nそちらを使えばダンプファイルを生成するためのロックやダンプは必要なくて、ただバックアップファイルからslaveを構築するだけです。\r\n\r\n## レプリケーションの設定 at slave\r\n\r\nshow amster statusで得た情報をchange master toでmaster_log_file,master_log_posに入力\r\n\r\n* dumpファイルの展開\r\n\r\n`mysql -u root --default-character-set=utf8 -A database_name < dump.sql`\r\n\r\n* masterの情報登録\r\n\r\n```txt\r\nchange master to\r\n  master_host='192.168.1.11', #masterのIP\r\n  master_user='server2',      #レプリケーション用のユーザ名(masterにGRANTで追加したユーザ名)\r\n  master_password='',\r\n  master_log_file='mysql-bin.000004',\r\n  master_log_pos=107;\r\n\r\nstart slave;\r\n```\r\n\r\n* 確認\r\n\r\n```txt\r\n> show slave status\\G\r\n```\r\n\r\n下記項目を確認し問題なければOK\r\n```txt\r\nSlave_IO_Running: Yes\r\nSlave_SQL_Running: Yes\r\nLast_IO_Error:\r\nLast_SQL_Error:\r\n```\r\n\r\nmasterで更新系クエリ発行、slaveで確認\r\n\r\n無事レプリケーションは完了\r\n\r\n* スレーブの停止\r\n\r\n`change master to`を発行するときはslaveの機能は止まっている必要があるので\r\n\r\nすでにslaveが動いているときに`change master to`を発行したいときは`stop slave`でレプリケーションをとめてあげる必要がある\r\n\r\n```txt\r\n> stop slave;\r\n```\r\n\r\n",
          "objectID": "mysql/20140831_mysql_replication",
          "_snippetResult": {
            "text": {
              "value": "# MySQLのレプリケーション設定\r\n\r\n基本的なレプリケーションについて、master-slave1台ずつの構成をサンプルにしてます。\r\n\r\n* master(192.168",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] MySQLのレプリケーション設定",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2014-08-31",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "mysql/20140831_mysql_replication",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/mysql/20140831_mysql_replication.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2014/08/31/233321",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "mysql/20140831_mysql_replication",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "MySQL",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# MySQLのレプリケーション設定\r\n\r\n基本的なレプリケーションについて、master-slave1台ずつの構成をサンプルにしてます。\r\n\r\n* master(192.168.1.11)\r\n* slave(192.168.1.12)\r\n\r\n## masterの設定\r\n\r\n* レプリケーション用ユーザーの作成\r\n\r\nslave(192.168.1.0/24)からserver2というユーザーでrelay_logを取得しにくる許可をする\r\n\r\n```txt\r\n> GRANT REPLICATION SLAVE ON *.* TO 'server2'@'192.168.1.0/255.255.255.0';\r\n```\r\n\r\n* my.cnf\r\n\r\n```txt\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nserver-id=1\r\n```\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nserver-idは実運用のときはIPの台4オクテットとか分かりやすいようにしたほうが良いと思います。\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\n## slaveの設定\r\n\r\n```txt\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nlog_slave_updates\r\nserver-id=2\r\n```\r\n\r\nslaveをmasterとして使う場合がある場合は下記を追加\r\n\r\n`log_slave_updates`\r\n\r\n\r\n## スナップショットの作成 at master\r\n\r\n* ロック、binlogのポジションを確認\r\n\r\n```txt\r\n> flush tables with read lock;\r\n> show master status;\r\n+------------------+----------+--------------+------------------+\r\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n+------------------+----------+--------------+------------------+\r\n| mysql-bin.000001 |      396 |              |                  |\r\n+------------------+----------+--------------+------------------+\r\n```\r\n\r\n* ロックしている間にダンプファイルを作成する\r\n\r\n```txt\r\nmysqldump -u root -p database_name --lock-all-tables > dump.sql\r\n```\r\n\r\n* ロック解除\r\n\r\n```sql\r\nunlock tables;\r\n```\r\n\r\nextrabackupなどですでにバックアップをとっていてslave_infoなどがある場合\r\n\r\nそちらを使えばダンプファイルを生成するためのロックやダンプは必要なくて、ただバックアップファイルからslaveを構築するだけです。\r\n\r\n## レプリケーションの設定 at slave\r\n\r\nshow amster statusで得た情報をchange master toでmaster_log_file,master_log_posに入力\r\n\r\n* dumpファイルの展開\r\n\r\n`mysql -u root --default-character-set=utf8 -A database_name < dump.sql`\r\n\r\n* masterの情報登録\r\n\r\n```txt\r\nchange master to\r\n  master_host='192.168.1.11', #masterのIP\r\n  master_user='server2',      #レプリケーション用のユーザ名(masterにGRANTで追加したユーザ名)\r\n  master_password='',\r\n  master_log_file='mysql-bin.000004',\r\n  master_log_pos=107;\r\n\r\nstart slave;\r\n```\r\n\r\n* 確認\r\n\r\n```txt\r\n> show slave status\\G\r\n```\r\n\r\n下記項目を確認し問題なければOK\r\n```txt\r\nSlave_IO_Running: Yes\r\nSlave_SQL_Running: Yes\r\nLast_IO_Error:\r\nLast_SQL_Error:\r\n```\r\n\r\nmasterで更新系クエリ発行、slaveで確認\r\n\r\n無事レプリケーションは完了\r\n\r\n* スレーブの停止\r\n\r\n`change master to`を発行するときはslaveの機能は止まっている必要があるので\r\n\r\nすでにslaveが動いているときに`change master to`を発行したいときは`stop slave`でレプリケーションをとめてあげる必要がある\r\n\r\n```txt\r\n> stop slave;\r\n```\r\n\r\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "[B] mysqldump",
          "date": "2013-09-10",
          "slug": "mysql/20130910_dump",
          "github": "https://github.com/swfz/memo/blob/master/docs/mysql/20130910_dump.md",
          "url": "http://swfz.hatenablog.com/entry/2013/09/10/014708",
          "section": "mysql/20130910_dump",
          "tags": [
            "MySQL"
          ],
          "text": "# MySQL dumpのオプション\r\n\r\nテスト用にデータ持ってくるときとか、開発時たまに使うけど、いざ使おうとするときに忘れているパターンがあったので備忘録として。\r\n\r\nmysqldumpで条件指定したりするときのメモ\r\n\r\n\r\n* データ構造のみ取得したい場合\r\n\r\n```\r\nmysqldump -u user -d database table > dump.sql\r\n```\r\n\r\n* データだけ取得したいとき\r\n\r\n```\r\n mysqldump -u user -t database table > dump.sql\r\n```\r\n\r\n* 条件を指定して出力\r\n\r\n`\"--where=*****\"`,`\"-w=*****\"`\r\n\r\n*****には普通にWHERE句を指定する感じで複数条件を指定可能\r\n\r\n```\r\n mysqldump -u user -t database table \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n\r\n* 該当テーブルにトリガーがあったりする場合は「--skip-triggers」を入れる\r\n公式には書いてありますが、期間が開くとつい忘れる…\r\n\r\n```\r\n mysqldump -u user -t database table --skip-triggers \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n",
          "objectID": "mysql/20130910_dump",
          "_snippetResult": {
            "text": {
              "value": "# MySQL dumpのオプション\r\n\r\nテスト用にデータ持ってくるときとか、開発時たまに使うけど、いざ使おうとするときに忘れて",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] mysqldump",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2013-09-10",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "mysql/20130910_dump",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/mysql/20130910_dump.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2013/09/10/014708",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "mysql/20130910_dump",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "MySQL",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# MySQL dumpのオプション\r\n\r\nテスト用にデータ持ってくるときとか、開発時たまに使うけど、いざ使おうとするときに忘れているパターンがあったので備忘録として。\r\n\r\nmysqldumpで条件指定したりするときのメモ\r\n\r\n\r\n* データ構造のみ取得したい場合\r\n\r\n```\r\nmysqldump -u user -d database table > dump.sql\r\n```\r\n\r\n* データだけ取得したいとき\r\n\r\n```\r\n mysqldump -u user -t database table > dump.sql\r\n```\r\n\r\n* 条件を指定して出力\r\n\r\n`\"--where=*****\"`,`\"-w=*****\"`\r\n\r\n*****には普通にWHERE句を指定する感じで複数条件を指定可能\r\n\r\n```\r\n mysqldump -u user -t database table \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n\r\n* 該当テーブルにトリガーがあったりする場合は「--skip-triggers」を入れる\r\n公式には書いてありますが、期間が開くとつい忘れる…\r\n\r\n```\r\n mysqldump -u user -t database table --skip-triggers \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "[B] mongoDBを使ってみる",
          "date": "2015-03-11",
          "slug": "mongoDB/20150311_mongodb_start",
          "github": "https://github.com/swfz/memo/blob/master/docs/mongoDB/20150311_mongodb_start.md",
          "url": "http://swfz.hatenablog.com/entry/2015/03/11/230932",
          "section": "mongoDB/20150311_mongodb_start",
          "tags": [
            "MongoDB"
          ],
          "text": "# mongoDBを使ってみる\n\n## インストール\n\n* /etc/yum.repo.d/10gen.reop\n\n```\n[10gen]\nname=10gen Repository\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686\ngpgcheck=0\nenabled=1\n```\n\n* インストール\n\n```\nyum install mongo-10gen mongo-10gen-server\n```\n\n* 起動\n\n```\n/etc/init.d/mongod start\nmongod --version\n```\n\n* シェルの起動\n\n```\n$ mongo\n# DB一覧\n> show dbs\n# 使用するDBを選択\n> use aaa (存在していなくてもOK)\n# コレクション一覧\n> show collections\n# 現在使用しているDB\n> db\naaa\n```\n\n* CRUD操作\ndb.${コレクション名}.${メソッド名}\n\n```\n# insert\n> db.test.insert({ \"key1\": \"value1\", \"key2\": \"value2\" })\n# 全件取得\n> db.test.find()\n# 条件付き取得\n> db.test.find({\"key1\": \"value1\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n> db.test.find({\"key2\": \"value2\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n# keyの指定(第2引数で返却するkeyを指定できる)\n> db.test.find(null, {key3: 1})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\") }\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\" }\n# 1件取得\n> db.test.findOne()\n\n# 更新\n> db.test.update({\"key3\": \"value3\"}, {settest: true})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"settest\" : true }\n# $setで特定のkeyを更新できる\n> db.test.update({\"key3\": \"value3\"},{$set: {settest: true}})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\", \"key4\" : \"value4\", \"settest\" : true }\n# 数値計算\n> db.test.insert({\"key\": \"count\", \"count\": 1})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 1, \"key\" : \"count\" }\n> db.test.update({key: \"count\"}, {$inc: {count: -1}})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 0, \"key\" : \"count\" }\n# update or insert\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 1 }\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 2 }\n# 複数更新(updateはデフォルトで最後に見つかったドキュメントのみを更新する)\ndb.test.update({},{$set: {\"bulk\": true}},false,true)\n```\n\n* 入れ子\n\n```\n# keyを.でつなげて指定ができる\n> db.test.insert({ name: \"Taro\", family: {mother: \"Hanako\", father: \"Ichiro\"}})\ndb.test.find({ 'family.mother': \"Hanako\"})\n{ \"_id\" : ObjectId(\"54ff0fe8bb8ce4ca0f6b9913\"), \"name\" : \"Taro\", \"family\" : { \"mother\" : \"Hanako\", \"father\" : \"Ichiro\" } }\n```\n\n* 他\n\n```\n# コレクションの情報を表示\n> db.test.stats()\n# 見やすいように成形\n> db.test.find().pretty()\n```\n\n# Perlから使ってみる\n\nちょっと触ってみて面白くなってきたのでPerlから使ってみました\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nuse utf8;\n\nuse MongoDB;\nuse Data::Dumper;\nuse JSON;\n\nmy $client = MongoDB::MongoClient->new();\nmy $db = $client->get_database('perl_db');\nmy $collection = $db->get_collection('perl_collection');\n# $collection->insert({ \"key\" => \"value1\"});\n# $collection->update({ \"key\"=>\"value\"},{ '$set'=>{\"name\" => \"taro\"} } );\n$collection->update({ \"key\" => \"count\"}, {'$inc' => {\"count\" => 2 }});\n\nmy $results = $collection->find();\n\nwhile ( my $row = $results->next ) {\n  print \"ObjectId: \" . $row->{ _id } . \"\\t\";\n  delete $row->{ _id };\n  my $json = encode_json( $row );\n  print $json . \"\\n\";\n}\n```\n\n```\n$ perl mongo.pl\nObjectId: 54ff29e6e138232f91316fb1 {\"key\":\"value1\"}\nObjectId: 54ff2af2e13823430d0ac901 {\"key\":\"value1\"}\nObjectId: 54ff29bbe138230f647018c1 {\"key\":\"value\",\"name\":\"taro\"}\nObjectId: 55003842e138236f7c3d91e1 {\"key\":\"count\",\"count\":19}\n```\n\nとても簡単に実装できそう、とりあえずアンケートアプリケーションでも作ろうか…\n",
          "objectID": "mongoDB/20150311_mongodb_start",
          "_snippetResult": {
            "text": {
              "value": "# mongoDBを使ってみる\n\n## インストール\n\n* /etc/yum.repo.d/10gen.reop\n\n```\n[10gen]\nname=10gen Repository\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686\ngpgcheck=0\nenabled=1\n```\n\n* インストール\n\n```\nyum install mongo-10gen mongo-10gen",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] mongoDBを使ってみる",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2015-03-11",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "mongoDB/20150311_mongodb_start",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/mongoDB/20150311_mongodb_start.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2015/03/11/230932",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "mongoDB/20150311_mongodb_start",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "MongoDB",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# mongoDBを使ってみる\n\n## インストール\n\n* /etc/yum.repo.d/10gen.reop\n\n```\n[10gen]\nname=10gen Repository\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686\ngpgcheck=0\nenabled=1\n```\n\n* インストール\n\n```\nyum install mongo-10gen mongo-10gen-server\n```\n\n* 起動\n\n```\n/etc/init.d/mongod start\nmongod --version\n```\n\n* シェルの起動\n\n```\n$ mongo\n# DB一覧\n> show dbs\n# 使用するDBを選択\n> use aaa (存在していなくてもOK)\n# コレクション一覧\n> show collections\n# 現在使用しているDB\n> db\naaa\n```\n\n* CRUD操作\ndb.${コレクション名}.${メソッド名}\n\n```\n# insert\n> db.test.insert({ \"key1\": \"value1\", \"key2\": \"value2\" })\n# 全件取得\n> db.test.find()\n# 条件付き取得\n> db.test.find({\"key1\": \"value1\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n> db.test.find({\"key2\": \"value2\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n# keyの指定(第2引数で返却するkeyを指定できる)\n> db.test.find(null, {key3: 1})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\") }\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\" }\n# 1件取得\n> db.test.findOne()\n\n# 更新\n> db.test.update({\"key3\": \"value3\"}, {settest: true})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"settest\" : true }\n# $setで特定のkeyを更新できる\n> db.test.update({\"key3\": \"value3\"},{$set: {settest: true}})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\", \"key4\" : \"value4\", \"settest\" : true }\n# 数値計算\n> db.test.insert({\"key\": \"count\", \"count\": 1})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 1, \"key\" : \"count\" }\n> db.test.update({key: \"count\"}, {$inc: {count: -1}})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 0, \"key\" : \"count\" }\n# update or insert\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 1 }\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 2 }\n# 複数更新(updateはデフォルトで最後に見つかったドキュメントのみを更新する)\ndb.test.update({},{$set: {\"bulk\": true}},false,true)\n```\n\n* 入れ子\n\n```\n# keyを.でつなげて指定ができる\n> db.test.insert({ name: \"Taro\", family: {mother: \"Hanako\", father: \"Ichiro\"}})\ndb.test.find({ 'family.mother': \"Hanako\"})\n{ \"_id\" : ObjectId(\"54ff0fe8bb8ce4ca0f6b9913\"), \"name\" : \"Taro\", \"family\" : { \"mother\" : \"Hanako\", \"father\" : \"Ichiro\" } }\n```\n\n* 他\n\n```\n# コレクションの情報を表示\n> db.test.stats()\n# 見やすいように成形\n> db.test.find().pretty()\n```\n\n# Perlから使ってみる\n\nちょっと触ってみて面白くなってきたのでPerlから使ってみました\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nuse utf8;\n\nuse MongoDB;\nuse Data::Dumper;\nuse JSON;\n\nmy $client = MongoDB::MongoClient->new();\nmy $db = $client->get_database('perl_db');\nmy $collection = $db->get_collection('perl_collection');\n# $collection->insert({ \"key\" => \"value1\"});\n# $collection->update({ \"key\"=>\"value\"},{ '$set'=>{\"name\" => \"taro\"} } );\n$collection->update({ \"key\" => \"count\"}, {'$inc' => {\"count\" => 2 }});\n\nmy $results = $collection->find();\n\nwhile ( my $row = $results->next ) {\n  print \"ObjectId: \" . $row->{ _id } . \"\\t\";\n  delete $row->{ _id };\n  my $json = encode_json( $row );\n  print $json . \"\\n\";\n}\n```\n\n```\n$ perl mongo.pl\nObjectId: 54ff29e6e138232f91316fb1 {\"key\":\"value1\"}\nObjectId: 54ff2af2e13823430d0ac901 {\"key\":\"value1\"}\nObjectId: 54ff29bbe138230f647018c1 {\"key\":\"value\",\"name\":\"taro\"}\nObjectId: 55003842e138236f7c3d91e1 {\"key\":\"count\",\"count\":19}\n```\n\nとても簡単に実装できそう、とりあえずアンケートアプリケーションでも作ろうか…\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "[B] memcachedの接続数",
          "date": "2014-09-21",
          "slug": "memcached/20140921_memcached",
          "github": "https://github.com/swfz/memo/blob/master/docs/memcached/20140921_memcached.md",
          "url": "http://swfz.hatenablog.com/entry/2014/09/21/225248",
          "section": "memcached/20140921_memcached",
          "tags": [
            "memcached"
          ],
          "text": "# memcachedの接続数\r\n\r\n障害が起きたときの話\r\n\r\n現象としては処理の詰まり\r\n\r\n結構何度か起きていたんだけど今までは\r\n\r\n* 分間2000アクセスくらい発生(MySQLの同一レコードへのupdateが発生)\r\n* 同一レコードへのロックが発生してロック待ち\r\n* バックエンドの同時接続数がオーバーしてアラート\r\n\r\nっていう流れでした。\r\n\r\n同一レコードへのupdateは性質上変えるのが難しいということで、おおがかりな修正で対応する予定だったのですが\r\n\r\n先日同じ現象が起きたときは分間500位しかなかったので別の原因があるのではという流れに\r\n\r\n同時位にmemcachedのアラートも飛んでいたので調べてみる\r\n\r\n```\r\n$ ps aux | grep memcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 memcached -d -p 11211 -u memcached -m 3072 -c 2048 -P /var/run/memcached/memcached.pid\r\n```\r\n\r\nグラフで接続数を見ると2000超えている!\r\n\r\nアプリケーション側でのmemcacheへの接続timeout秒数はデフォルトで25秒のようなのでこのmemcacheが詰っていた可能性が高いかも\r\n\r\nバックエンドのアラートが上がったのとcacheへのsetエラーが出てきたのもほぼ同時なのでほぼ間違いないと判断\r\n\r\n```\r\n$ cat /etc/sysconfig/memcached\r\nPORT=\"11211\"     #ポート\r\nUSER=\"memcached\" #ユーザー\r\nMAXCONN=\"4096\"   #同時接続上限数\r\nCACHESIZE=\"3072\" #キャッシュサイズ\r\nOPTIONS=\"\"       #オプション\r\n```\r\n\r\nMAXCONNを書き換えて4096にしました。\r\n\r\n```\r\n$ /etc/init.d/memcached restart\r\n$ ps aux | grep memcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 memcached -d -p 11211 -u memcached -m 3072 -c 4096 -P /var/run/memcached/memcached.pid\r\n```\r\n\r\n```\r\n$ ps aux | grep memcached\r\n25486\r\n```\r\n\r\n<!-- textlint-disable spellcheck-tech-word,prh -->\r\nファイルディスクリプタも変更されているのを確認\r\n<!-- textlint-enable spellcheck-tech-word,prh -->\r\n\r\n```\r\ncat /proc/25486/limits\r\nMax open files            4096                 4096                 files\r\n```\r\n\r\nこれでとりあえず様子見\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nもしかしたら他にも原因があるのかもしれないけど現状落ち着いたのでおそらく問題ないかなと…\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\nってかバランサ(httpd)の接続数増やしたときにmemcachedも増やしておくべきでしたね\r\n\r\n",
          "objectID": "memcached/20140921_memcached",
          "_snippetResult": {
            "text": {
              "value": "# memcachedの接続数\r\n\r\n障害が起きたときの話\r\n\r\n現象としては処理の詰まり\r\n\r\n結構何度か起きていたんだけど今までは\r\n\r\n* 分間2000ア",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] memcachedの接続数",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2014-09-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "memcached/20140921_memcached",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/memcached/20140921_memcached.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2014/09/21/225248",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "memcached/20140921_memcached",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "memcached",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# memcachedの接続数\r\n\r\n障害が起きたときの話\r\n\r\n現象としては処理の詰まり\r\n\r\n結構何度か起きていたんだけど今までは\r\n\r\n* 分間2000アクセスくらい発生(MySQLの同一レコードへのupdateが発生)\r\n* 同一レコードへのロックが発生してロック待ち\r\n* バックエンドの同時接続数がオーバーしてアラート\r\n\r\nっていう流れでした。\r\n\r\n同一レコードへのupdateは性質上変えるのが難しいということで、おおがかりな修正で対応する予定だったのですが\r\n\r\n先日同じ現象が起きたときは分間500位しかなかったので別の原因があるのではという流れに\r\n\r\n同時位にmemcachedのアラートも飛んでいたので調べてみる\r\n\r\n```\r\n$ ps aux | grep memcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 memcached -d -p 11211 -u memcached -m 3072 -c 2048 -P /var/run/memcached/memcached.pid\r\n```\r\n\r\nグラフで接続数を見ると2000超えている!\r\n\r\nアプリケーション側でのmemcacheへの接続timeout秒数はデフォルトで25秒のようなのでこのmemcacheが詰っていた可能性が高いかも\r\n\r\nバックエンドのアラートが上がったのとcacheへのsetエラーが出てきたのもほぼ同時なのでほぼ間違いないと判断\r\n\r\n```\r\n$ cat /etc/sysconfig/memcached\r\nPORT=\"11211\"     #ポート\r\nUSER=\"memcached\" #ユーザー\r\nMAXCONN=\"4096\"   #同時接続上限数\r\nCACHESIZE=\"3072\" #キャッシュサイズ\r\nOPTIONS=\"\"       #オプション\r\n```\r\n\r\nMAXCONNを書き換えて4096にしました。\r\n\r\n```\r\n$ /etc/init.d/memcached restart\r\n$ ps aux | grep memcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 memcached -d -p 11211 -u memcached -m 3072 -c 4096 -P /var/run/memcached/memcached.pid\r\n```\r\n\r\n```\r\n$ ps aux | grep memcached\r\n25486\r\n```\r\n\r\n<!-- textlint-disable spellcheck-tech-word,prh -->\r\nファイルディスクリプタも変更されているのを確認\r\n<!-- textlint-enable spellcheck-tech-word,prh -->\r\n\r\n```\r\ncat /proc/25486/limits\r\nMax open files            4096                 4096                 files\r\n```\r\n\r\nこれでとりあえず様子見\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nもしかしたら他にも原因があるのかもしれないけど現状落ち着いたのでおそらく問題ないかなと…\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\nってかバランサ(httpd)の接続数増やしたときにmemcachedも増やしておくべきでしたね\r\n\r\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "[angular] moment-rangeを使いたい",
          "date": "2017-10-06",
          "slug": "javascript/angular_moment_range",
          "github": "https://github.com/swfz/memo/blob/master/docs/javascript/angular_moment_range.md",
          "url": "http://swfz.hatenablog.com/entry/2017/10/06/045529",
          "section": "javascript/angular_moment_range",
          "tags": [
            "JavaScript",
            "TypeScript",
            "Angular"
          ],
          "text": "# [Angular]moment-rangeを使いたい\n\n単純にmomentとmoment-rangeをimportしただけだとコンパイルが通らず使えないので対応する必要がありました\n\nstackoverflowなどでこうしたら良いよって書いてあったのでやってみたがコンパイルエラーで通らない\n\n使えるようになるまでにやったことのメモ\n\nversionは4です\n\n- install\n\n```\nnpm install --save moment moment-range @types/moment @types/moment-range\n```\n\n- 参考\n\n[Typescript usage · Issue #120 · rotaready/moment-range](https://github.com/rotaready/moment-range/issues/120)\n\n[https://github.com/rotaready/moment-range/issues/120:embed:cite]\n\n上記参考にしてextendmomentを使ってrangeを使えるようにしてみた\n\n- app.component.ts\n\n```\nimport Moment from 'moment';\nimport {extendMoment} from 'moment-range';\nconst moment = extendMoment(Moment);\n```\n\n上記で、できるかと思ったができなかった\n\n\nコンパイルできずにエラー\n\n```\nModule '\"/home/vagrant/sandbox/ngx-sample/node_modules/moment/moment\"' has no default export.\n```\n\nTypeScriptのimportに制限があるようでオプションを変えることで上記のコードでmoment-rangeが使えるようになるそう\n\n- tsconfig.json\n\n```\n\"allowSyntheticDefaultImports\": true,\n```\n\nこのオプションをつけることで`extendMoment`がimportできるようになる\n\n- 参考\n\n[TypeScript の ES6 modules の解釈と allowSyntheticDefaultImports の整理 - Qiita](https://qiita.com/bouzuya/items/edf5274241b50f32c621)\n\n[https://qiita.com/bouzuya/items/edf5274241b50f32c621:embed:cite]\n\nworkarroundっぽいけどいったんはこれで使えます\n\n",
          "objectID": "javascript/angular_moment_range",
          "_snippetResult": {
            "text": {
              "value": "# [Angular]moment-rangeを使いたい\n\n単純にmomentとmoment-rangeをimportしただけだとコンパイルが通らず使えないので対応する必要がありまし",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[angular] moment-rangeを使いたい",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2017-10-06",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "javascript/angular_moment_range",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/javascript/angular_moment_range.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2017/10/06/045529",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "javascript/angular_moment_range",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Angular",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# [Angular]moment-rangeを使いたい\n\n単純にmomentとmoment-rangeをimportしただけだとコンパイルが通らず使えないので対応する必要がありました\n\nstackoverflowなどでこうしたら良いよって書いてあったのでやってみたがコンパイルエラーで通らない\n\n使えるようになるまでにやったことのメモ\n\nversionは4です\n\n- install\n\n```\nnpm install --save moment moment-range @types/moment @types/moment-range\n```\n\n- 参考\n\n[Typescript usage · Issue #120 · rotaready/moment-range](https://github.com/rotaready/moment-range/issues/120)\n\n[https://github.com/rotaready/moment-range/issues/120:embed:cite]\n\n上記参考にしてextendmomentを使ってrangeを使えるようにしてみた\n\n- app.component.ts\n\n```\nimport Moment from 'moment';\nimport {extendMoment} from 'moment-range';\nconst moment = extendMoment(Moment);\n```\n\n上記で、できるかと思ったができなかった\n\n\nコンパイルできずにエラー\n\n```\nModule '\"/home/vagrant/sandbox/ngx-sample/node_modules/moment/moment\"' has no default export.\n```\n\nTypeScriptのimportに制限があるようでオプションを変えることで上記のコードでmoment-rangeが使えるようになるそう\n\n- tsconfig.json\n\n```\n\"allowSyntheticDefaultImports\": true,\n```\n\nこのオプションをつけることで`extendMoment`がimportできるようになる\n\n- 参考\n\n[TypeScript の ES6 modules の解釈と allowSyntheticDefaultImports の整理 - Qiita](https://qiita.com/bouzuya/items/edf5274241b50f32c621)\n\n[https://qiita.com/bouzuya/items/edf5274241b50f32c621:embed:cite]\n\nworkarroundっぽいけどいったんはこれで使えます\n\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "[B] mod_rewriteでReverseProxy",
          "date": "2014-05-29",
          "slug": "httpd/20140529_httpd_mod_rewrite",
          "github": "https://github.com/swfz/memo/blob/master/docs/httpd/20140529_httpd_mod_rewrite.md",
          "url": "http://swfz.hatenablog.com/entry/2014/05/29/235623",
          "section": "httpd/20140529_httpd_mod_rewrite",
          "tags": [
            "httpd"
          ],
          "text": "# mod_rewriteでReverseProxy\r\n\r\n* reverse proxy\r\n\r\n<!-- textlint-disable prh -->\r\nApacheのworkerでバランサ、backendにサーバが何台かある状態でサブドメインによって振り分け先を変えたいという用件がありました。\r\n<!-- textlint-enable prh -->\r\n\r\nググると最初はVirtualHostでやるみたいなのが一般的みたいだったので僕も乗っかろうと思っていましたが色々面倒なことに\r\n\r\nまずmod_rewriteの設定や共通な設定もVirtualHostごとに書かなくてはいけない点\r\n\r\n今回切り分けたいのは振り分け先のサーバだけでしたがその他の設定もVirtualHostの中に書かなくてはいけないような挙動がありました\r\n\r\nVirtualHostごとに違う設定だけ活かしたいってことをしたかったのですが…\r\n\r\nで、結局mod_rewriteで解決しました。\r\n\r\n```\r\nRewriteCond %{HTTP_HOST} subdomain.testhost.jp\r\nRewriteRule ^/(.*)$ balancer://cluster/$1 [P,L]\r\nProxyPassReverse / balancer://cluster/\r\n\r\n<Proxy balancer://cluster>\r\n  BalancerMember http://192.168.10.1:80\r\n  BalancerMember http://192.168.10.2:80\r\n  BalancerMember http://192.168.10.3:80\r\n</Proxy>\r\n```\r\n\r\nこんな感じでドメイン名をマッチさせて転送先にclusterを指定してあげればOK\r\nその際にP(roxy)オプションを付けてあげます\r\n\r\nclusterの台数を増やすことも可能なのでサブドメイン単位で役割を分ることができるようになりました\r\n\r\n勉強になりました。\r\n",
          "objectID": "httpd/20140529_httpd_mod_rewrite",
          "_snippetResult": {
            "text": {
              "value": "# mod_rewriteでReverseProxy\r\n\r\n* reverse proxy\r\n\r\n<!-- textlint-disable prh -->\r\nApacheのworkerでバランサ、backendにサーバが何台かある状態でサブドメインによって振り分け先を変え",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] mod_rewriteでReverseProxy",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2014-05-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "httpd/20140529_httpd_mod_rewrite",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/httpd/20140529_httpd_mod_rewrite.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://swfz.hatenablog.com/entry/2014/05/29/235623",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "httpd/20140529_httpd_mod_rewrite",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "httpd",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# mod_rewriteでReverseProxy\r\n\r\n* reverse proxy\r\n\r\n<!-- textlint-disable prh -->\r\nApacheのworkerでバランサ、backendにサーバが何台かある状態でサブドメインによって振り分け先を変えたいという用件がありました。\r\n<!-- textlint-enable prh -->\r\n\r\nググると最初はVirtualHostでやるみたいなのが一般的みたいだったので僕も乗っかろうと思っていましたが色々面倒なことに\r\n\r\nまずmod_rewriteの設定や共通な設定もVirtualHostごとに書かなくてはいけない点\r\n\r\n今回切り分けたいのは振り分け先のサーバだけでしたがその他の設定もVirtualHostの中に書かなくてはいけないような挙動がありました\r\n\r\nVirtualHostごとに違う設定だけ活かしたいってことをしたかったのですが…\r\n\r\nで、結局mod_rewriteで解決しました。\r\n\r\n```\r\nRewriteCond %{HTTP_HOST} subdomain.testhost.jp\r\nRewriteRule ^/(.*)$ balancer://cluster/$1 [P,L]\r\nProxyPassReverse / balancer://cluster/\r\n\r\n<Proxy balancer://cluster>\r\n  BalancerMember http://192.168.10.1:80\r\n  BalancerMember http://192.168.10.2:80\r\n  BalancerMember http://192.168.10.3:80\r\n</Proxy>\r\n```\r\n\r\nこんな感じでドメイン名をマッチさせて転送先にclusterを指定してあげればOK\r\nその際にP(roxy)オプションを付けてあげます\r\n\r\nclusterの台数を増やすことも可能なのでサブドメイン単位で役割を分ることができるようになりました\r\n\r\n勉強になりました。\r\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "CloudLogging+MonitoringでDataformの実行完了をSlack通知する",
          "date": "2024-03-24",
          "slug": "gcp/monitoring_alert_with_logbase_for_dataform",
          "github": "https://github.com/swfz/memo/blob/master/docs/gcp/monitoring_alert_with_logbase_for_dataform.md",
          "url": "https://swfz.hatenablog.com/entry/2024/03/24/173141",
          "section": "gcp/monitoring_alert_with_logbase_for_dataform",
          "tags": [
            "GoogleCloudPlatform"
          ],
          "text": "# CloudLogging+MonitoringでDataformの実行完了をSlack通知する\n\nDataformの実行結果はCloudLoggingに流れるので流れた結果をもとにログベースのAlertを作成しSlackへ通知する\n\nMonitoring Alertの設定だけでSlackにDataformの実行が完了した旨の通知を行える（CloudFunctionsが不要）\n\n設定で行ったことを残しておく\n\n## Dataform実行結果のログ\n\nMonitoringのログエクスプローラで対象のDataform実行ログを探す\n\nGUI上でフィールド検索の隣の項目から`ログ名`フォームでdataformと検索したらそれっぽい項目が出てきたため選択した\n\n`logName`を指定することになる\n\n```\nlogName=\"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\"\n```\n\n対象と思われるExecutionを発見した\n\n```json\n{\n  \"insertId\": \"13yxu9zcnph\",\n  \"jsonPayload\": {\n    \"terminalState\": \"SUCCEEDED\",\n    \"workflowInvocationId\": \"1709515650-8e29a9a5-5a84-4548-843b-e7a41dc16e90\",\n    \"@type\": \"type.googleapis.com/google.cloud.dataform.logging.v1.WorkflowInvocationCompletionLogEntry\"\n  },\n  \"resource\": {\n    \"type\": \"dataform.googleapis.com/Repository\",\n    \"labels\": {\n      \"resource_container\": \"800688344033\",\n      \"location\": \"asia-northeast1\",\n      \"repository_id\": \"github-projects\"\n    }\n  },\n  \"timestamp\": \"2024-03-04T01:28:02.645125486Z\",\n  \"severity\": \"INFO\",\n  \"logName\": \"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\",\n  \"receiveTimestamp\": \"2024-03-04T01:28:03.343511633Z\"\n}\n```\n\n### 失敗時のログ\n\n```json\n{\n  \"insertId\": \"13yxu9zcfiv\",\n  \"jsonPayload\": {\n    \"terminalState\": \"FAILED\",\n    \"@type\": \"type.googleapis.com/google.cloud.dataform.logging.v1.WorkflowInvocationCompletionLogEntry\",\n    \"workflowInvocationId\": \"1709415323-ca53cff8-fb05-47e9-8d2f-41f27faec3c6\"\n  },\n  \"resource\": {\n    \"type\": \"dataform.googleapis.com/Repository\",\n    \"labels\": {\n      \"location\": \"asia-northeast1\",\n      \"repository_id\": \"sample-dataform\",\n      \"resource_container\": \"467341840626\"\n    }\n  },\n  \"timestamp\": \"2024-03-02T21:35:44.831502320Z\",\n  \"severity\": \"ERROR\",\n  \"logName\": \"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\",\n  \"receiveTimestamp\": \"2024-03-02T21:35:45.439551331Z\"\n}\n```\n\nフォーマットに変化はない、そしてエラーの詳細はのっていない…\n\n## LogBaseのアラートポリシー設定\n\nログベースのアラート設定\n\n特定条件のログが発生した際にアラートとして扱う\n\nすでに通知先チャンネルにSlackのチャンネルは設定している前提\n\n### 対象ログの選定\n\n設定の順序的には前後してしまうが先に説明する\n\n`Choose logs to include in the alert`でアラート対象とするログを特定するためのクエリを記述する\n\nログエクスプローラで確認して設定する\n\n```\nlogName=\"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\" AND jsonPayload.terminalState: SUCCEEDED\n```\n\n`logName`とログの中のステータスをもとに絞り込みした\n\n\n### ログの内容からラベル付けする\n\n![alt](monitoring_alert_with_logbase_for_dataform01.png)\n\n後の工程で使うために、特定の値を任意のラベルとして使用できるようにする\n\n今回は下記のように指定した\n\n`ラベル: ログから取得できるデータのパス`\n\n- location: resource.labels.location\n- repo: resource.labels.repository_id\n    - 対象のリポジトリ名\n- config: jsonPayload.workflowConfigId\n    - dataformのワークフロー構成の名前\n- invocationId: jsonPayload.workflowInvocationId\n- state: jsonPayload.terminalState\n    - SUCCEEDED,FAILEDなど\n\n### ユーザー定義のアノテーション\n\nドキュメント内のテキストはカスタマイズできる、`${varname}`形式で変数を使うこともできる\n\n指定できる値は下記ドキュメントを参照\n\n[ユーザー定義のドキュメントでアラートにアノテーションを付ける  |  Cloud Monitoring  |  Google Cloud](https://cloud.google.com/monitoring/alerts/doc-variables?hl=ja)\n\n[https://cloud.google.com/monitoring/alerts/doc-variables?hl=ja:embed:cite]\n\n意味合い的にはこの形式のログの場合はこういう対応手順です、とかそういうのを乗せるのが想定できる\n\n次のように設定した\n\n```text\n${project}\n\n${log.extracted_label.repo}\n\n${log.extracted_label.config}\n\nState: ${log.extracted_label.state}\n\nhttps://console.cloud.google.com/bigquery/dataform/locations/${log.extracted_label.location}/repositories/${log.extracted_label.repo}/workflows/${log.extracted_label.invocationId}?hl=ja&project=${project}\n```\n\n`log.extracted_label.`というような指定方法で、前工程で指定したラベルの値を使用できる\n\n### どのワークフロー構成の実行か特定したい\n\n実行時のワークフロー構成はDataformで特定のタグだけ実行する、すべて実行するなどで違う値となる(別途Dataform側で設定が必要)\n\n通知のDocumentに含めておけば、どのワークフロー構成が失敗したかまでは通知だけで判断できるようになる\n\n![alt](monitoring_alert_with_logbase_for_dataform04.png)\n\nラベル付けしたので、`${log.extracted_label.config}`に`名前`の値が入ってくる\n\n### urlを作りたい\n\n失敗してた場合、理由もしりたい\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n対象のログ自体には手がかりは何も乗っていないため、Dataformの実行リスト画面(WORKFLOW EXECUTION LOGS)から対象の実行に遷移し「詳細を表示」した後の画面まですぐ行けるようにしたい\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n\n![alt](monitoring_alert_with_logbase_for_dataform03.png)\n\nアラート設定時にラベル付けした値を用いると、次のようなフォーマットでエラーを確認できるURLを生成できる\n\n```\nhttps://console.cloud.google.com/bigquery/dataform/locations/${log.extracted_label.location}/repositories/${log.extracted_label.repo}/workflows/${log.extracted_label.invocationId}?hl=ja&project=${project}\n```\n\n### 通知\n\n実際の通知\n\n![alt](monitoring_alert_with_logbase_for_dataform02.png)\n\n来た\n\n成功のログでもSlackのAttachementは赤の通知なのがちょっと微妙ではある、本来想定された用途とマッチしてない感がある\n\nしかし、これだけのために通知用のFunctionを作るのも管理が増えるし微妙…\n\nということでいったん、成功時と失敗時のアラート設定を分けてタイトルで区別できるようにした…\n",
          "objectID": "gcp/monitoring_alert_with_logbase_for_dataform",
          "_snippetResult": {
            "text": {
              "value": "# CloudLogging+MonitoringでDataformの実行完了をSlack通知する\n\nDataformの実行結果はCloudLoggingに流れるので流れた結果をもとにログベースのAlertを作成し",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "CloudLogging+MonitoringでDataformの実行完了をSlack通知する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2024-03-24",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "gcp/monitoring_alert_with_logbase_for_dataform",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/gcp/monitoring_alert_with_logbase_for_dataform.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "https://swfz.hatenablog.com/entry/2024/03/24/173141",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "gcp/monitoring_alert_with_logbase_for_dataform",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# CloudLogging+MonitoringでDataformの実行完了をSlack通知する\n\nDataformの実行結果はCloudLoggingに流れるので流れた結果をもとにログベースのAlertを作成しSlackへ通知する\n\nMonitoring Alertの設定だけでSlackにDataformの実行が完了した旨の通知を行える（CloudFunctionsが不要）\n\n設定で行ったことを残しておく\n\n## Dataform実行結果のログ\n\nMonitoringのログエクスプローラで対象のDataform実行ログを探す\n\nGUI上でフィールド検索の隣の項目から`ログ名`フォームでdataformと検索したらそれっぽい項目が出てきたため選択した\n\n`logName`を指定することになる\n\n```\nlogName=\"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\"\n```\n\n対象と思われるExecutionを発見した\n\n```json\n{\n  \"insertId\": \"13yxu9zcnph\",\n  \"jsonPayload\": {\n    \"terminalState\": \"SUCCEEDED\",\n    \"workflowInvocationId\": \"1709515650-8e29a9a5-5a84-4548-843b-e7a41dc16e90\",\n    \"@type\": \"type.googleapis.com/google.cloud.dataform.logging.v1.WorkflowInvocationCompletionLogEntry\"\n  },\n  \"resource\": {\n    \"type\": \"dataform.googleapis.com/Repository\",\n    \"labels\": {\n      \"resource_container\": \"800688344033\",\n      \"location\": \"asia-northeast1\",\n      \"repository_id\": \"github-projects\"\n    }\n  },\n  \"timestamp\": \"2024-03-04T01:28:02.645125486Z\",\n  \"severity\": \"INFO\",\n  \"logName\": \"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\",\n  \"receiveTimestamp\": \"2024-03-04T01:28:03.343511633Z\"\n}\n```\n\n### 失敗時のログ\n\n```json\n{\n  \"insertId\": \"13yxu9zcfiv\",\n  \"jsonPayload\": {\n    \"terminalState\": \"FAILED\",\n    \"@type\": \"type.googleapis.com/google.cloud.dataform.logging.v1.WorkflowInvocationCompletionLogEntry\",\n    \"workflowInvocationId\": \"1709415323-ca53cff8-fb05-47e9-8d2f-41f27faec3c6\"\n  },\n  \"resource\": {\n    \"type\": \"dataform.googleapis.com/Repository\",\n    \"labels\": {\n      \"location\": \"asia-northeast1\",\n      \"repository_id\": \"sample-dataform\",\n      \"resource_container\": \"467341840626\"\n    }\n  },\n  \"timestamp\": \"2024-03-02T21:35:44.831502320Z\",\n  \"severity\": \"ERROR\",\n  \"logName\": \"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\",\n  \"receiveTimestamp\": \"2024-03-02T21:35:45.439551331Z\"\n}\n```\n\nフォーマットに変化はない、そしてエラーの詳細はのっていない…\n\n## LogBaseのアラートポリシー設定\n\nログベースのアラート設定\n\n特定条件のログが発生した際にアラートとして扱う\n\nすでに通知先チャンネルにSlackのチャンネルは設定している前提\n\n### 対象ログの選定\n\n設定の順序的には前後してしまうが先に説明する\n\n`Choose logs to include in the alert`でアラート対象とするログを特定するためのクエリを記述する\n\nログエクスプローラで確認して設定する\n\n```\nlogName=\"projects/project-111111/logs/dataform.googleapis.com%2Fworkflow_invocation_completion\" AND jsonPayload.terminalState: SUCCEEDED\n```\n\n`logName`とログの中のステータスをもとに絞り込みした\n\n\n### ログの内容からラベル付けする\n\n![alt](monitoring_alert_with_logbase_for_dataform01.png)\n\n後の工程で使うために、特定の値を任意のラベルとして使用できるようにする\n\n今回は下記のように指定した\n\n`ラベル: ログから取得できるデータのパス`\n\n- location: resource.labels.location\n- repo: resource.labels.repository_id\n    - 対象のリポジトリ名\n- config: jsonPayload.workflowConfigId\n    - dataformのワークフロー構成の名前\n- invocationId: jsonPayload.workflowInvocationId\n- state: jsonPayload.terminalState\n    - SUCCEEDED,FAILEDなど\n\n### ユーザー定義のアノテーション\n\nドキュメント内のテキストはカスタマイズできる、`${varname}`形式で変数を使うこともできる\n\n指定できる値は下記ドキュメントを参照\n\n[ユーザー定義のドキュメントでアラートにアノテーションを付ける  |  Cloud Monitoring  |  Google Cloud](https://cloud.google.com/monitoring/alerts/doc-variables?hl=ja)\n\n[https://cloud.google.com/monitoring/alerts/doc-variables?hl=ja:embed:cite]\n\n意味合い的にはこの形式のログの場合はこういう対応手順です、とかそういうのを乗せるのが想定できる\n\n次のように設定した\n\n```text\n${project}\n\n${log.extracted_label.repo}\n\n${log.extracted_label.config}\n\nState: ${log.extracted_label.state}\n\nhttps://console.cloud.google.com/bigquery/dataform/locations/${log.extracted_label.location}/repositories/${log.extracted_label.repo}/workflows/${log.extracted_label.invocationId}?hl=ja&project=${project}\n```\n\n`log.extracted_label.`というような指定方法で、前工程で指定したラベルの値を使用できる\n\n### どのワークフロー構成の実行か特定したい\n\n実行時のワークフロー構成はDataformで特定のタグだけ実行する、すべて実行するなどで違う値となる(別途Dataform側で設定が必要)\n\n通知のDocumentに含めておけば、どのワークフロー構成が失敗したかまでは通知だけで判断できるようになる\n\n![alt](monitoring_alert_with_logbase_for_dataform04.png)\n\nラベル付けしたので、`${log.extracted_label.config}`に`名前`の値が入ってくる\n\n### urlを作りたい\n\n失敗してた場合、理由もしりたい\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n対象のログ自体には手がかりは何も乗っていないため、Dataformの実行リスト画面(WORKFLOW EXECUTION LOGS)から対象の実行に遷移し「詳細を表示」した後の画面まですぐ行けるようにしたい\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n\n![alt](monitoring_alert_with_logbase_for_dataform03.png)\n\nアラート設定時にラベル付けした値を用いると、次のようなフォーマットでエラーを確認できるURLを生成できる\n\n```\nhttps://console.cloud.google.com/bigquery/dataform/locations/${log.extracted_label.location}/repositories/${log.extracted_label.repo}/workflows/${log.extracted_label.invocationId}?hl=ja&project=${project}\n```\n\n### 通知\n\n実際の通知\n\n![alt](monitoring_alert_with_logbase_for_dataform02.png)\n\n来た\n\n成功のログでもSlackのAttachementは赤の通知なのがちょっと微妙ではある、本来想定された用途とマッチしてない感がある\n\nしかし、これだけのために通知用のFunctionを作るのも管理が増えるし微妙…\n\nということでいったん、成功時と失敗時のアラート設定を分けてタイトルで区別できるようにした…\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "VS Code Markdown CheckboxプラグインでToDo管理",
          "date": "2022-09-21",
          "slug": "other/vscode_checkbox_extension",
          "github": "https://github.com/swfz/memo/blob/master/docs/other/vscode_checkbox_extension.md",
          "url": "https://swfz.hatenablog.com/entry/2022/09/21/190153",
          "section": "other/vscode_checkbox_extension",
          "tags": [
            "other",
            "VSCode"
          ],
          "text": "# VS Code Markdown CheckboxプラグインでToDo管理\n\n最近自分の中での仕事のToDo管理はまずVS Codeで開いたMarkdownファイルを見る習慣がついている\n\n<!-- TrelloやNotionなどさまざまなツールで管理したり共有したり試していたが、次の点でなじまなかった -->\n\n理由としては次のような感じ\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n- すでに仕事中のメモ用途にVS Codeを開いていて、だいたいのことはMarkdownにメモとして残しているので常にVS Codeを開いている、開いているのでその流れでToDoリストもチェックする流れが自然\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n- 役割上いろんなところからタスクが降ってくるのでとりあえずすぐメモしておきたい場面でツール開いて色々入力して登録…というのが結構面倒に感じてまった\n\nもちろんチームやプロジェクトでツールを使って管理している部分もあるのでそちらは使っているが…\n\n結局自分の中では、単純なリストで一ヵ所に一覧が集まっているほうが意識しやすいのでMarkdownのチェックリスト形式で書いてこなしたらチェックを入れるという感じで落ち着いている\n\nまた、各種ツールで管理しているタスクよりタスクの粒度を細かくすることでチェックを入れやすくしてこなしている感を出したいのもある（`○○のスケジュールを取る`など）\n\n```markdown\n- [ ] TaskA\n- [ ] TaskB\n- [ ] TaskC\n```\n\n今までチェックリストは普通に編集していたのだがふとしたきっかけでチェックのショートカットはないのかな?と調べてみたらあった+使ってみたら良さそうだったので運用を開始した\n\n[Markdown Checkbox - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox)\n\n[https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox:embed:cite]\n\n`Ctrl`+`Shift`+`Enter`でチェック\n\n`Ctrl`+`Shift`+`C`でチェックボックスを生成\n\nその他設定できるオプションはドキュメントを見るのが一番早いがリストの文字(`-`,`*`)やチェックの文字など設定で選択できる\n\nまた、チェックしたら日付を入れる、チェックしたら取り消し線、イタリックにするなども設定できる\n\n自分はシンプルでよかったのでチェックしたら～系の設定はすべて外した\n\nチェックした後またチェック外すみたいなパターンはないがショートカットでチェックボックスをチェックできるのは便利\n\nただ、運用を変えたところでToDoの消化がはかどるわけではない…",
          "objectID": "other/vscode_checkbox_extension",
          "_snippetResult": {
            "text": {
              "value": "# VS Code Markdown CheckboxプラグインでToDo管理\n\n最近自分の中での仕事のToDo管理はまずVS Codeで開いたMarkdownファイルを見る習慣がつい",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "VS Code Markdown CheckboxプラグインでToDo管理",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2022-09-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/vscode_checkbox_extension",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/other/vscode_checkbox_extension.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "https://swfz.hatenablog.com/entry/2022/09/21/190153",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/vscode_checkbox_extension",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "other",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "VSCode",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# VS Code Markdown CheckboxプラグインでToDo管理\n\n最近自分の中での仕事のToDo管理はまずVS Codeで開いたMarkdownファイルを見る習慣がついている\n\n<!-- TrelloやNotionなどさまざまなツールで管理したり共有したり試していたが、次の点でなじまなかった -->\n\n理由としては次のような感じ\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n- すでに仕事中のメモ用途にVS Codeを開いていて、だいたいのことはMarkdownにメモとして残しているので常にVS Codeを開いている、開いているのでその流れでToDoリストもチェックする流れが自然\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n- 役割上いろんなところからタスクが降ってくるのでとりあえずすぐメモしておきたい場面でツール開いて色々入力して登録…というのが結構面倒に感じてまった\n\nもちろんチームやプロジェクトでツールを使って管理している部分もあるのでそちらは使っているが…\n\n結局自分の中では、単純なリストで一ヵ所に一覧が集まっているほうが意識しやすいのでMarkdownのチェックリスト形式で書いてこなしたらチェックを入れるという感じで落ち着いている\n\nまた、各種ツールで管理しているタスクよりタスクの粒度を細かくすることでチェックを入れやすくしてこなしている感を出したいのもある（`○○のスケジュールを取る`など）\n\n```markdown\n- [ ] TaskA\n- [ ] TaskB\n- [ ] TaskC\n```\n\n今までチェックリストは普通に編集していたのだがふとしたきっかけでチェックのショートカットはないのかな?と調べてみたらあった+使ってみたら良さそうだったので運用を開始した\n\n[Markdown Checkbox - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox)\n\n[https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox:embed:cite]\n\n`Ctrl`+`Shift`+`Enter`でチェック\n\n`Ctrl`+`Shift`+`C`でチェックボックスを生成\n\nその他設定できるオプションはドキュメントを見るのが一番早いがリストの文字(`-`,`*`)やチェックの文字など設定で選択できる\n\nまた、チェックしたら日付を入れる、チェックしたら取り消し線、イタリックにするなども設定できる\n\n自分はシンプルでよかったのでチェックしたら～系の設定はすべて外した\n\nチェックした後またチェック外すみたいなパターンはないがショートカットでチェックボックスをチェックできるのは便利\n\nただ、運用を変えたところでToDoの消化がはかどるわけではない…",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "title": "GitHubActionsでmatrixの値を動的に扱う",
          "date": "2021-06-29",
          "slug": "github/actions_dynamic_matrix",
          "github": "https://github.com/swfz/memo/blob/master/docs/github/actions_dynamic_matrix.md",
          "url": "https://swfz.hatenablog.com/entry/2021/06/29/195359",
          "section": "github/actions_dynamic_matrix",
          "tags": [
            "GitHub",
            "GitHub Actions",
            "shell script"
          ],
          "text": "# GitHubActionsでmatrixの値を動的に扱う\n\n実際使うかと言うとどうなんだろうという気もするが、できるの知らなかったので残しておく\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nいきなりサンプルコードだがこれだけで理解はできると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n- .github/workflows/dynamic-matrix.yml\n\n```yaml\nname: dynamic matrix\n\non: [push]\n\njobs:\n  set-matrix:\n    runs-on: ubuntu-latest\n    outputs:\n      something: ${{ steps.set-matrix.outputs.value }}\n    steps:\n      - name: make values\n        id: set-matrix\n        run: |\n          echo '[\"hoge\",\"fuga\"]' | jq -c\n          list=$(echo '[\"hoge\",\"fuga\"]' | jq -c)\n          echo \"value=${list}\" >> $GITHUB_OUTPUT\n\n  execute:\n    needs: set-matrix\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        hoge: ${{fromJson(needs.set-matrix.outputs.something)}}\n    steps:\n      - run: echo ${{ matrix.hoge }}\n```\n\n`set-matrix`のjobで`hoge`,`fuga`を配列としてJSON形式でoutputに格納している\n\n後続の`execute`では`strategy.matrix.hoge`で`fromJson`を使って値を取得している\n\n実行結果はこんな感じ\n\n![alt](actions_dynamic_matrix01.png)\n\n今回の例では`Array<string>`だが`set-matrix`で`Array<Object>`となるような値を生成しても同様に参照させればOK\n\nサンプルでは固定値だがシェルスクリプトでよしなに指定することも可能なのでさまざまな場面に対応できる\n\n参考\n[How to make a Dynamic Matrix in GitHub Actions | Tomas Votruba](https://tomasvotruba.com/blog/2020/11/16/how-to-make-dynamic-matrix-in-github-actions/)\n\n",
          "objectID": "github/actions_dynamic_matrix",
          "_snippetResult": {
            "text": {
              "value": "# GitHubActionsでmatrixの値を動的に扱う\n\n実際使うかと言うとどうなんだろうという気もするが、できるの知らなかったので残し",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "GitHubActionsでmatrixの値を動的に扱う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-06-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "github/actions_dynamic_matrix",
              "matchLevel": "none",
              "matchedWords": []
            },
            "github": {
              "value": "https://github.com/swfz/memo/blob/master/docs/github/actions_dynamic_matrix.md",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "https://swfz.hatenablog.com/entry/2021/06/29/195359",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "github/actions_dynamic_matrix",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GitHub",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GitHub Actions",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "shell script",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# GitHubActionsでmatrixの値を動的に扱う\n\n実際使うかと言うとどうなんだろうという気もするが、できるの知らなかったので残しておく\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nいきなりサンプルコードだがこれだけで理解はできると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n- .github/workflows/dynamic-matrix.yml\n\n```yaml\nname: dynamic matrix\n\non: [push]\n\njobs:\n  set-matrix:\n    runs-on: ubuntu-latest\n    outputs:\n      something: ${{ steps.set-matrix.outputs.value }}\n    steps:\n      - name: make values\n        id: set-matrix\n        run: |\n          echo '[\"hoge\",\"fuga\"]' | jq -c\n          list=$(echo '[\"hoge\",\"fuga\"]' | jq -c)\n          echo \"value=${list}\" >> $GITHUB_OUTPUT\n\n  execute:\n    needs: set-matrix\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        hoge: ${{fromJson(needs.set-matrix.outputs.something)}}\n    steps:\n      - run: echo ${{ matrix.hoge }}\n```\n\n`set-matrix`のjobで`hoge`,`fuga`を配列としてJSON形式でoutputに格納している\n\n後続の`execute`では`strategy.matrix.hoge`で`fromJson`を使って値を取得している\n\n実行結果はこんな感じ\n\n![alt](actions_dynamic_matrix01.png)\n\n今回の例では`Array<string>`だが`set-matrix`で`Array<Object>`となるような値を生成しても同様に参照させればOK\n\nサンプルでは固定値だがシェルスクリプトでよしなに指定することも可能なのでさまざまな場面に対応できる\n\n参考\n[How to make a Dynamic Matrix in GitHub Actions | Tomas Votruba](https://tomasvotruba.com/blog/2020/11/16/how-to-make-dynamic-matrix-in-github-actions/)\n\n",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 489,
      "page": 0,
      "nbPages": 25,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": {
        "nbHits": true,
        "typo": true
      },
      "query": "m",
      "params": "highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&page=0&query=m",
      "index": "hatenablog",
      "renderingContent": {},
      "processingTimeMS": 1,
      "processingTimingsMS": {
        "_request": {
          "roundTrip": 1
        },
        "afterFetch": {
          "format": {
            "highlighting": 3,
            "snippeting": 5,
            "total": 10
          }
        },
        "total": 1
      },
      "serverTimeMS": 18
    },
    {
      "hits": [
        {
          "url": "https://til.swfz.io//entries/mui_inputprops/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/mui_inputprops/index.md",
          "text": "\n仕事でMUIを使ったコードを読んでたらTextFieldのプロパティに`inputProps`, `InputProps`と`i`,`I`で両方あることに気付いた\n\n違いは何だと言うことで調べた\n\n[TextField API - Material UI](https://mui.com/material-ui/api/text-field/)\n\n## InputProps\n\nInput要素に適用されるプロパティ\n\n> variant prop の値に応じて、FilledInput、OutlinedInput、Inputコンポーネントのいずれかになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなるほど、TextFieldはFilledInput,OutlinedInput,Inputをより抽象化したコンポーネントで、この3つのコンポーネントのどれかに適用させるプロパティを指定するということのよう\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n試しにFilledInputのAPIドキュメントを見に行くと`inputProps`のみしかないのでなるほどとなった\n\n[FilledInput API - Material UI](https://mui.com/material-ui/api/filled-input/)\n\nこのページでのPropsの中で指定したいものがあれば指定するとういことと理解した\n\nたとえば`color`とか\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nあとはTextFieldを使って汎用的なカスタムコンポーネントを作った場合なども`InputProps`を受け取ってそのまま`TextField`に流すことでカスタマイズ可能で汎用的なカスタムコンポーネントを作れる\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n## inputProps\n\ninput要素に適用するプロパティを指定する\n\nお馴染みの`input`タグに指定するプロパティを指定する\n\nたとえば`value`とか\n\n\nどのタグやコンポーネントに作用させたいかでPropsの大文字小文字を切り替えると理解した\n\nよく考えられているなーと感じたが初見ではとっつきづらいしややこしいな…と感じた\n",
          "date": "2023-02-16",
          "title": "MUI TextFieldのInputPropsとinputPropsの違い",
          "tags": [
            "MUI",
            "MaterialUI",
            "React"
          ],
          "description": "適用させるコンポーネントが違う",
          "slug": "/entries/mui_inputprops/",
          "internal": {
            "contentDigest": "c221d46b31ee3059e13c1dc0a51c6117"
          },
          "timeToRead": 1,
          "objectID": "f2290c6a-65ba-5bcb-96a5-aa68fbaa5db0",
          "_snippetResult": {
            "text": {
              "value": "… あることに気付いた\n\n違いは何だと言うことで調べた\n\n[TextField API - __ais-highlight__M__/ais-highlight__aterial UI](https://__ais-highlight__m__/ais-highlight__ui.com/__ais-highlight__m__/ais-highlight__aterial-ui/api/text-field/)\n\n## InputProps\n\nInput要素に適用されるプロパティ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ui_inputprops/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__ui_inputprops/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n仕事で__ais-highlight__M__/ais-highlight__UIを使ったコードを読んでたらTextFieldのプロパティに`inputProps`, `InputProps`と`i`,`I`で両方あることに気付いた\n\n違いは何だと言うことで調べた\n\n[TextField API - __ais-highlight__M__/ais-highlight__aterial UI](https://__ais-highlight__m__/ais-highlight__ui.com/__ais-highlight__m__/ais-highlight__aterial-ui/api/text-field/)\n\n## InputProps\n\nInput要素に適用されるプロパティ\n\n> variant prop の値に応じて、FilledInput、OutlinedInput、Inputコンポーネントのいずれかになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなるほど、TextFieldはFilledInput,OutlinedInput,Inputをより抽象化したコンポーネントで、この3つのコンポーネントのどれかに適用させるプロパティを指定するということのよう\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n試しにFilledInputのAPIドキュメントを見に行くと`inputProps`のみしかないのでなるほどとなった\n\n[FilledInput API - __ais-highlight__M__/ais-highlight__aterial UI](https://__ais-highlight__m__/ais-highlight__ui.com/__ais-highlight__m__/ais-highlight__aterial-ui/api/filled-input/)\n\nこのページでのPropsの中で指定したいものがあれば指定するとういことと理解した\n\nたとえば`color`とか\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nあとはTextFieldを使って汎用的なカスタムコンポーネントを作った場合なども`InputProps`を受け取ってそのまま`TextField`に流すことでカスタマイズ可能で汎用的なカスタムコンポーネントを作れる\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n## inputProps\n\ninput要素に適用するプロパティを指定する\n\nお馴染みの`input`タグに指定するプロパティを指定する\n\nたとえば`value`とか\n\n\nどのタグやコンポーネントに作用させたいかでPropsの大文字小文字を切り替えると理解した\n\nよく考えられているなーと感じたが初見ではとっつきづらいしややこしいな…と感じた\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-02-16",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__UI TextFieldのInputPropsとinputPropsの違い",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__UI",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__aterialUI",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "React",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "適用させるコンポーネントが違う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ui_inputprops/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "c221d46b31ee3059e13c1dc0a51c6117",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/multi_ssh_command/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/multi_ssh_command/index.md",
          "text": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
          "date": "2020-06-20",
          "title": "多段SSHをワンライナーで行う",
          "tags": [
            "ssh",
            "ワンライナー",
            "ShellScript"
          ],
          "description": "ssh -o ProxyCommand",
          "slug": "/entries/multi_ssh_command/",
          "internal": {
            "contentDigest": "3aa3b715105a091c49e8ce4fd60d2003"
          },
          "timeToRead": 1,
          "objectID": "e24e524b-eda9-5ddc-bc25-8dc38ab552a9",
          "_snippetResult": {
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__ulti_ssh_command/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2020-06-20",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "多段SSHをワンライナーで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "ssh",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ワンライナー",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ShellScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ssh -o ProxyCommand",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "3aa3b715105a091c49e8ce4fd60d2003",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysqldump_in_docker_compose/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/mysqldump_in_docker_compose/index.md",
          "text": "\ndocker-composeからmysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database mysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database mysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
          "date": "2020-09-18",
          "title": "docker-composeからmysqldumpコマンドを実行する",
          "tags": [
            "Docker",
            "MySQL"
          ],
          "description": "exec -Tを使う",
          "slug": "/entries/mysqldump_in_docker_compose/",
          "internal": {
            "contentDigest": "d350921da69740ca29b745d912081fd4"
          },
          "timeToRead": 1,
          "objectID": "cf7cdb23-92db-5307-9054-f492bec0d258",
          "_snippetResult": {
            "text": {
              "value": "\ndocker-composeから__ais-highlight__m__/ais-highlight__ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database __ais-highlight__m__/ais-highlight__ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database __ais-highlight__m__/ais-highlight__ysql -u root -phoge hoge < hoge_dump …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__ysqldump_in_docker_compose/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\ndocker-composeから__ais-highlight__m__/ais-highlight__ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database __ais-highlight__m__/ais-highlight__ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database __ais-highlight__m__/ais-highlight__ysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2020-09-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "docker-composeから__ais-highlight__m__/ais-highlight__ysqldumpコマンドを実行する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Docker",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "exec -Tを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "d350921da69740ca29b745d912081fd4",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysql_direct_gz/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/mysql_direct_gz/index.md",
          "text": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\nmysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接MySQLに流し込む\n\n```shell\nzcat dump.gz | mysql -u user -p password dbname \n```\n",
          "date": "2021-01-22",
          "title": "MySQLでgzipをそのまま流し込む",
          "tags": [
            "MySQL"
          ],
          "description": "",
          "slug": "/entries/mysql_direct_gz/",
          "internal": {
            "contentDigest": "88f1bf9cf31fb96bb3bc39b582cc0111"
          },
          "timeToRead": 1,
          "objectID": "94c6b4da-c8bb-5f36-a0b9-ab003ce8091c",
          "_snippetResult": {
            "text": {
              "value": "… したファイルを生成する\n\n```shell\n__ais-highlight__m__/ais-highlight__ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接__ais-highlight__M__/ais-highlight__ySQLに流し込む\n\n```shell\nzcat dump.gz | __ais-highlight__m__/ais-highlight__ysql -u user -p password dbname \n```\n",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__ysql_direct_gz/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\n__ais-highlight__m__/ais-highlight__ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接__ais-highlight__M__/ais-highlight__ySQLに流し込む\n\n```shell\nzcat dump.gz | __ais-highlight__m__/ais-highlight__ysql -u user -p password dbname \n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-01-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__ySQLでgzipをそのまま流し込む",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "88f1bf9cf31fb96bb3bc39b582cc0111",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/msw_mock_svg/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/msw_mock_svg/index.md",
          "text": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.me/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\nmswを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということでmswを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - Mock Service Worker Docs](https://mswjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev msw\nmkdir src/mocks\ntouch src/mocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx msw init static/ --save\n```\n\nすると`static/mockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/mocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-mock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/mocks/browser.js\n\n```javascript\n// src/mocks/browser.js\nimport { setupWorker } from 'msw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/mocks/handler.ts\n\n```typescript\nimport { rest } from 'msw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to mock an img src url? · Issue #461 · mswjs/msw](https://github.com/mswjs/msw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\nmswを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
          "date": "2021-12-29",
          "title": "mswでSVGをモックする",
          "tags": [
            "JavaScript",
            "TypeScript",
            "Gatsby",
            "msw"
          ],
          "description": "Pixelaを題材としてモックしてみた",
          "slug": "/entries/msw_mock_svg/",
          "internal": {
            "contentDigest": "71397493f188ec4f06b2ff7879cacb1b"
          },
          "timeToRead": 3,
          "objectID": "93160714-a398-50c1-8c1a-bdbf52be4d8c",
          "_snippetResult": {
            "text": {
              "value": "… にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev __ais-highlight__m__/ais-highlight__sw\n__ais-highlight__m__/ais-highlight__kdir src/__ais-highlight__m__/ais-highlight__ocks\ntouch src/__ais-highlight__m__/ais-highlight__ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx __ais-highlight__m__/ais-highlight__sw …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__sw___ais-highlight__m__/ais-highlight__ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__sw___ais-highlight__m__/ais-highlight__ock_svg/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.__ais-highlight__m__/ais-highlight__e/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\n__ais-highlight__m__/ais-highlight__swを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということで__ais-highlight__m__/ais-highlight__swを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - __ais-highlight__M__/ais-highlight__ock Service Worker Docs](https://__ais-highlight__m__/ais-highlight__swjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev __ais-highlight__m__/ais-highlight__sw\n__ais-highlight__m__/ais-highlight__kdir src/__ais-highlight__m__/ais-highlight__ocks\ntouch src/__ais-highlight__m__/ais-highlight__ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx __ais-highlight__m__/ais-highlight__sw init static/ --save\n```\n\nすると`static/__ais-highlight__m__/ais-highlight__ockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/__ais-highlight__m__/ais-highlight__ocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-__ais-highlight__m__/ais-highlight__ock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/__ais-highlight__m__/ais-highlight__ocks/browser.js\n\n```javascript\n// src/__ais-highlight__m__/ais-highlight__ocks/browser.js\nimport { setupWorker } from '__ais-highlight__m__/ais-highlight__sw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/__ais-highlight__m__/ais-highlight__ocks/handler.ts\n\n```typescript\nimport { rest } from '__ais-highlight__m__/ais-highlight__sw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to __ais-highlight__m__/ais-highlight__ock an img src url? · Issue #461 · __ais-highlight__m__/ais-highlight__swjs/__ais-highlight__m__/ais-highlight__sw](https://github.com/__ais-highlight__m__/ais-highlight__swjs/__ais-highlight__m__/ais-highlight__sw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\n__ais-highlight__m__/ais-highlight__swを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-12-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__swでSVGをモックする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Gatsby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "Pixelaを題材としてモックしてみた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__sw___ais-highlight__m__/ais-highlight__ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "71397493f188ec4f06b2ff7879cacb1b",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/multibyte_string_using_github_actions/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/multibyte_string_using_github_actions/index.md",
          "text": "\nマルチバイト文字列をActionsの中で扱う場合に気を付けようという話\n\n`git diff --name-only`で出力される内容からマルチバイト文字列を含むファイル名をgrepで検索して後続につなげるような処理をしたかった\n\n```shell\ngit diff --name-only | grep --color=no 'ファイル名' | xargs ....\n```\n\nというイメージ\n\nローカルではうまく動いたのでActionsの環境でも動かしてみたが期待通りの動作をせず\n\npipefail使っていなかったからってのもあるけど原因を突きとめるまで時間をとってしまった\n\nで、追っていったら`git diff --name-only`の結果が下記のようになっていた\n\n```\n'\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.md'\n```\n\nUTF-8エンコーディングされたバイト列が表示されていた…なるほどね…\n\n```shell\n$ printf '\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.md'\n買うもの.md\n```\n\npipeの後続でこの値ありきの処理をしていたのでgrepに引っかからずそれ以降の処理がされなかったというもの\n\nあんまりマルチバイト文字列をそのまま扱うっていうパターンがなかったのもあるが…\n\n## 対応\n\n下記どちらかで対応できる\n\n```\ngit config --global core.quotepath false\n```\n\n```\ngit -c core.quotepath=false diff --name-only\n```\n\n気を付けよう\n\nよく見たらローカルの`.gitconfig`には設定がしっかり入っていた\n\n### pipefail\n\n蛇足だが基本的にActionsに限らずシェルスクリプトではpipefail入れておいたほうがどこで問題があるか気付きやすいので入れておいたほうが良いといのをあらためて実感した\n\nActionsで設定するには下記\n\n### 参考\n- [Workflow syntax for GitHub Actions - GitHub Docs](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#custom-shell)\n- [GitHub Actions の shell option](https://zenn.dev/shunsuke_suzuki/scraps/172683d8bad652)\n\n## まとめ\n\n- Actions+Gitでマルチバイト文字を扱う場合は`core.auotepath`を設定する\n- 基本的にpipefailを有効にする\n",
          "date": "2024-11-26",
          "title": "GitHub Actions+Gitでのマルチバイト文字列表示",
          "tags": [
            "Git",
            "GitHubActions"
          ],
          "description": "core.quotepath",
          "slug": "/entries/multibyte_string_using_github_actions/",
          "internal": {
            "contentDigest": "2faed074af90601fe40b23e093f3534a"
          },
          "timeToRead": 1,
          "objectID": "1df88170-3ab4-5973-8b18-1decee93442a",
          "_snippetResult": {
            "text": {
              "value": "… 示されていた…なるほどね…\n\n```shell\n$ printf '\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.__ais-highlight__m__/ais-highlight__d'\n買うもの.__ais-highlight__m__/ais-highlight__d\n```\n\npipeの後続でこの値ありきの処理をしていた …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ultibyte_string_using_github_actions/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__ultibyte_string_using_github_actions/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nマルチバイト文字列をActionsの中で扱う場合に気を付けようという話\n\n`git diff --name-only`で出力される内容からマルチバイト文字列を含むファイル名をgrepで検索して後続につなげるような処理をしたかった\n\n```shell\ngit diff --name-only | grep --color=no 'ファイル名' | xargs ....\n```\n\nというイメージ\n\nローカルではうまく動いたのでActionsの環境でも動かしてみたが期待通りの動作をせず\n\npipefail使っていなかったからってのもあるけど原因を突きとめるまで時間をとってしまった\n\nで、追っていったら`git diff --name-only`の結果が下記のようになっていた\n\n```\n'\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.__ais-highlight__m__/ais-highlight__d'\n```\n\nUTF-8エンコーディングされたバイト列が表示されていた…なるほどね…\n\n```shell\n$ printf '\\262\\267\\343\\201\\206\\343\\202\\202\\343\\201\\256.__ais-highlight__m__/ais-highlight__d'\n買うもの.__ais-highlight__m__/ais-highlight__d\n```\n\npipeの後続でこの値ありきの処理をしていたのでgrepに引っかからずそれ以降の処理がされなかったというもの\n\nあんまりマルチバイト文字列をそのまま扱うっていうパターンがなかったのもあるが…\n\n## 対応\n\n下記どちらかで対応できる\n\n```\ngit config --global core.quotepath false\n```\n\n```\ngit -c core.quotepath=false diff --name-only\n```\n\n気を付けよう\n\nよく見たらローカルの`.gitconfig`には設定がしっかり入っていた\n\n### pipefail\n\n蛇足だが基本的にActionsに限らずシェルスクリプトではpipefail入れておいたほうがどこで問題があるか気付きやすいので入れておいたほうが良いといのをあらためて実感した\n\nActionsで設定するには下記\n\n### 参考\n- [Workflow syntax for GitHub Actions - GitHub Docs](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#custom-shell)\n- [GitHub Actions の shell option](https://zenn.dev/shunsuke_suzuki/scraps/172683d8bad652)\n\n## まとめ\n\n- Actions+Gitでマルチバイト文字を扱う場合は`core.auotepath`を設定する\n- 基本的にpipefailを有効にする\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2024-11-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub Actions+Gitでのマルチバイト文字列表示",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Git",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GitHubActions",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "core.quotepath",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ultibyte_string_using_github_actions/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "2faed074af90601fe40b23e093f3534a",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/markdownlint/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/markdownlint/index.md",
          "text": "\n[DavidAnson/markdownlint: A Node.js style checker and lint tool for Markdown/CommonMark files.](https://github.com/DavidAnson/markdownlint)\n\nMarkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .markdownlint.yml\n\n```yaml\nMD007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
          "date": "2022-07-26",
          "title": "markdownlintを使ってみた",
          "tags": [
            "markdownlint"
          ],
          "description": "markdownlint",
          "slug": "/entries/markdownlint/",
          "internal": {
            "contentDigest": "410a8e6ffe646cbda6a0c5821757d8a9"
          },
          "timeToRead": 1,
          "objectID": "1ac795c9-2538-521d-91e7-18bb390f82ce",
          "_snippetResult": {
            "text": {
              "value": "\n[DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint: A Node.js style checker and lint tool for __ais-highlight__M__/ais-highlight__arkdown/CommonMark files.](https://github.com/DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint)\n\n__ais-highlight__M__/ais-highlight__arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくら …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/__ais-highlight__m__/ais-highlight__arkdownlint/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n[DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint: A Node.js style checker and lint tool for __ais-highlight__M__/ais-highlight__arkdown/CommonMark files.](https://github.com/DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint)\n\n__ais-highlight__M__/ais-highlight__arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .__ais-highlight__m__/ais-highlight__arkdownlint.yml\n\n```yaml\n__ais-highlight__M__/ais-highlight__D007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2022-07-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__arkdownlintを使ってみた",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__m__/ais-highlight__arkdownlint",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "__ais-highlight__m__/ais-highlight__arkdownlint",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "410a8e6ffe646cbda6a0c5821757d8a9",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/algolia_mock_with_msw/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/algolia_mock_with_msw/index.md",
          "text": "\nAlgoliaの検索リクエストをmswでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、mswで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONをmswを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスがmsw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"msw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
          "date": "2022-08-12",
          "title": "Algoliaのレスポンスをmswでモックして開発ではダミーレスポンスを扱う",
          "tags": [
            "Algolia",
            "msw",
            "TypeScript"
          ],
          "description": "実際のJSONを用意する",
          "slug": "/entries/algolia_mock_with_msw/",
          "internal": {
            "contentDigest": "7bd7f8494ba8c00196e1ea10d11e4c68"
          },
          "timeToRead": 3,
          "objectID": "f49a2a18-3ffc-5f6a-87b1-d66c7163e3b3",
          "_snippetResult": {
            "text": {
              "value": "\nAlgoliaの検索リクエストを__ais-highlight__m__/ais-highlight__swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしな …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/algolia___ais-highlight__m__/ais-highlight__ock_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/algolia___ais-highlight__m__/ais-highlight__ock_with___ais-highlight__m__/ais-highlight__sw/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nAlgoliaの検索リクエストを__ais-highlight__m__/ais-highlight__swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、__ais-highlight__m__/ais-highlight__swで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONを__ais-highlight__m__/ais-highlight__swを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスが__ais-highlight__m__/ais-highlight__sw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"__ais-highlight__m__/ais-highlight__sw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2022-08-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Algoliaのレスポンスを__ais-highlight__m__/ais-highlight__swでモックして開発ではダミーレスポンスを扱う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Algolia",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "実際のJSONを用意する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/algolia___ais-highlight__m__/ais-highlight__ock_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "7bd7f8494ba8c00196e1ea10d11e4c68",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gatsby_migrate_v5/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/gatsby_migrate_v5/index.md",
          "text": "\n本ブログがGatsbyv4を使用していたのでv5に上げた\n\n合わせてNode18とも依存があるので18にもした（CloudflareにデプロイしているのでNode18対応を待ってた\n\nしっかり読まずに雰囲気で始めてしまったので時間かけてしまったが、基本的にMigrationガイド見ながら進めれば問題なさそう\n\n[Migrating from v4 to v5 | Gatsby](https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v4-to-v5/)\n\n以下やったこと\n\n## 依存モジュールの更新\n\nnode_modules削除、yarn.lock削除で再インストール\n\nrenovateだけだと各モジュール依存モジュールのバージョンまでは更新してくれないのでいろいろ不整合が発生した\n\nひとつずつ潰していく前にとりあえず試してみるで良い気がする\n\n```shell\n$ rm yarn.lock\n$ rm -rf node_modules\n$ yarn\n```\n\n結構lockファイルに差が出た\n\n## GraphQLのクエリ更新\n\ngroupとsortのフィールド指定の方法が変わったよう\n\nマイグレーションガイドみたら下記実行しろとのこと\n\n```\nnpx gatsby-codemods@latest sort-and-aggr-graphql .\n```\n\ncodemodsがBRAKING CHANGESの修正をしてくれる\n\n便利…\n\n結構時間かけてしまったけど完全にドキュメント読め案件\n\n\n## 型エラーの解消\n\nこれは自分のコードの問題だが一応合わせて対応したので残しておく\n\n```\n$ tsc --noEmit\ngatsby-browser.tsx:28:11 - error TS2559: Type '{ children: ReactNode; }' has no properties in common with type 'IntrinsicAttributes'.\n\n28   return <Layout {...props}>{element}</Layout>\n             ~~~~~~\n\nsrc/components/layout.tsx:9:29 - error TS2339: Property 'children' does not exist on type '{}'.\n\n9 const Layout: React.FC = ({ children }) => {\n```\n\n[React: Type {children: Element} has no properties in common with type IntrinsicAttributes | bobbyhadz](https://bobbyhadz.com/blog/react-type-children-has-no-properties-in-common)\n\nここを参考にした\n\nようはpropsを受け取らないコンポーネントに`props`渡すなって話らしい\n\nしかしながら`children`は必要なのでLayout側ではReactNodeの型定義を用意した\n\n他にもwarningはいくつか残っているがGatsby5で動作させられるところまで持っていけた\n\n## 該当PR\n\n[feature/gatsby v5 and node18 by swfz · Pull Request #1408 · swfz/til](https://github.com/swfz/til/pull/1408)",
          "date": "2023-04-26",
          "title": "Gatsbyのバージョンを5に上げた",
          "tags": [
            "Gatsby",
            "Node"
          ],
          "description": "マイグレーションガイドをしっかり読みましょう",
          "slug": "/entries/gatsby_migrate_v5/",
          "internal": {
            "contentDigest": "207719587907f26ffb5182515272b5df"
          },
          "timeToRead": 1,
          "objectID": "eece61fc-468c-5aa7-b89b-bc4e04f713ea",
          "_snippetResult": {
            "text": {
              "value": "… ったが、基本的に__ais-highlight__M__/ais-highlight__igrationガイド見ながら進めれば問題なさそう\n\n[__ais-highlight__M__/ais-highlight__igrating from v4 to v5 | Gatsby](https://www.gatsbyjs.com/docs/reference/release-notes/__ais-highlight__m__/ais-highlight__igrating-from-v4-to-v5/)\n\n以下やったこ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gatsby___ais-highlight__m__/ais-highlight__igrate_v5/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/gatsby___ais-highlight__m__/ais-highlight__igrate_v5/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n本ブログがGatsbyv4を使用していたのでv5に上げた\n\n合わせてNode18とも依存があるので18にもした（CloudflareにデプロイしているのでNode18対応を待ってた\n\nしっかり読まずに雰囲気で始めてしまったので時間かけてしまったが、基本的に__ais-highlight__M__/ais-highlight__igrationガイド見ながら進めれば問題なさそう\n\n[__ais-highlight__M__/ais-highlight__igrating from v4 to v5 | Gatsby](https://www.gatsbyjs.com/docs/reference/release-notes/__ais-highlight__m__/ais-highlight__igrating-from-v4-to-v5/)\n\n以下やったこと\n\n## 依存モジュールの更新\n\nnode___ais-highlight__m__/ais-highlight__odules削除、yarn.lock削除で再インストール\n\nrenovateだけだと各モジュール依存モジュールのバージョンまでは更新してくれないのでいろいろ不整合が発生した\n\nひとつずつ潰していく前にとりあえず試してみるで良い気がする\n\n```shell\n$ rm yarn.lock\n$ rm -rf node___ais-highlight__m__/ais-highlight__odules\n$ yarn\n```\n\n結構lockファイルに差が出た\n\n## GraphQLのクエリ更新\n\ngroupとsortのフィールド指定の方法が変わったよう\n\nマイグレーションガイドみたら下記実行しろとのこと\n\n```\nnpx gatsby-codemods@latest sort-and-aggr-graphql .\n```\n\ncodemodsがBRAKING CHANGESの修正をしてくれる\n\n便利…\n\n結構時間かけてしまったけど完全にドキュメント読め案件\n\n\n## 型エラーの解消\n\nこれは自分のコードの問題だが一応合わせて対応したので残しておく\n\n```\n$ tsc --noEmit\ngatsby-browser.tsx:28:11 - error TS2559: Type '{ children: ReactNode; }' has no properties in common with type 'IntrinsicAttributes'.\n\n28   return <Layout {...props}>{element}</Layout>\n             ~~~~~~\n\nsrc/components/layout.tsx:9:29 - error TS2339: Property 'children' does not exist on type '{}'.\n\n9 const Layout: React.FC = ({ children }) => {\n```\n\n[React: Type {children: Element} has no properties in common with type IntrinsicAttributes | bobbyhadz](https://bobbyhadz.com/blog/react-type-children-has-no-properties-in-common)\n\nここを参考にした\n\nようはpropsを受け取らないコンポーネントに`props`渡すなって話らしい\n\nしかしながら`children`は必要なのでLayout側ではReactNodeの型定義を用意した\n\n他にもwarningはいくつか残っているがGatsby5で動作させられるところまで持っていけた\n\n## 該当PR\n\n[feature/gatsby v5 and node18 by swfz · Pull Request #1408 · swfz/til](https://github.com/swfz/til/pull/1408)",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-04-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Gatsbyのバージョンを5に上げた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Gatsby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Node",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "マイグレーションガイドをしっかり読みましょう",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gatsby___ais-highlight__m__/ais-highlight__igrate_v5/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "207719587907f26ffb5182515272b5df",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/spreadsheet_month_calc/",
          "text": "\nどうやるんだろうと調べたら`EDATE`という月計算をするための関数があった\n\n[EDATE - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3092974?hl=ja)\n\nこんな感じ\n\n![alt](spreadsheet_month_calc01.png)\n\n![alt](spreadsheet_month_calc02.png)\n\n他にもあるんだろうかと調べてみたら月末日を算出する関数もあった\n\n[EOMONTH - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3093044?hl=ja)\n\n![alt](spreadsheet_month_calc03.png)\n\nプログラムだと結構月末日出したいっていうパターンはよくあるがSpreadsheetだとあんまり機会がないかも\n\nとはいえ両方めちゃくちゃはかどる",
          "date": "2023-03-15",
          "title": "スプレッドシートで月計算",
          "tags": [
            "Spreadsheet"
          ],
          "description": "EDATE",
          "slug": "/entries/spreadsheet_month_calc/",
          "internal": {
            "contentDigest": "3d452b62553d96694603ae778fe594f9"
          },
          "timeToRead": 1,
          "objectID": "cad626c1-34b5-5742-ae5c-9791dffefebb",
          "_snippetResult": {
            "text": {
              "value": "… ント エディタ ヘルプ](https://support.google.com/docs/answer/3092974?hl=ja)\n\nこんな感じ\n\n![alt](spreadsheet___ais-highlight__m__/ais-highlight__onth_calc01.png)\n\n![alt](spreadsheet___ais-highlight__m__/ais-highlight__onth_calc02.png)\n\n他にもあるんだろうかと調べてみたら …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/spreadsheet___ais-highlight__m__/ais-highlight__onth_calc/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nどうやるんだろうと調べたら`EDATE`という月計算をするための関数があった\n\n[EDATE - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3092974?hl=ja)\n\nこんな感じ\n\n![alt](spreadsheet___ais-highlight__m__/ais-highlight__onth_calc01.png)\n\n![alt](spreadsheet___ais-highlight__m__/ais-highlight__onth_calc02.png)\n\n他にもあるんだろうかと調べてみたら月末日を算出する関数もあった\n\n[EOMONTH - Google ドキュメント エディタ ヘルプ](https://support.google.com/docs/answer/3093044?hl=ja)\n\n![alt](spreadsheet___ais-highlight__m__/ais-highlight__onth_calc03.png)\n\nプログラムだと結構月末日出したいっていうパターンはよくあるがSpreadsheetだとあんまり機会がないかも\n\nとはいえ両方めちゃくちゃはかどる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-03-15",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "スプレッドシートで月計算",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Spreadsheet",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "EDATE",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/spreadsheet___ais-highlight__m__/ais-highlight__onth_calc/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "3d452b62553d96694603ae778fe594f9",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/netlify_manual_deploy/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/netlify_manual_deploy/index.md",
          "text": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get more Operations.\nError: Operations quota exceeded. Change plan to get more Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node_modules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your main site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to main site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== 'master' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `master`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
          "date": "2021-07-03",
          "title": "Netlifyに手動でデプロイする",
          "tags": [
            "Netlify",
            "Gatsby"
          ],
          "description": "netlify-cliを使う",
          "slug": "/entries/netlify_manual_deploy/",
          "internal": {
            "contentDigest": "45c18548227f9607682dc9da126cfa86"
          },
          "timeToRead": 3,
          "objectID": "baedc0a0-5eca-5bbd-8226-430fd35f98b1",
          "_snippetResult": {
            "text": {
              "value": "… まったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\nError: Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\n```\n\n途中で落ちてしまいデプロイ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/netlify___ais-highlight__m__/ais-highlight__anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/netlify___ais-highlight__m__/ais-highlight__anual_deploy/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\nError: Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node___ais-highlight__m__/ais-highlight__odules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your __ais-highlight__m__/ais-highlight__ain site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to __ais-highlight__m__/ais-highlight__ain site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== '__ais-highlight__m__/ais-highlight__aster' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `__ais-highlight__m__/ais-highlight__aster`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-07-03",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Netlifyに手動でデプロイする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Netlify",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Gatsby",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "netlify-cliを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/netlify___ais-highlight__m__/ais-highlight__anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "45c18548227f9607682dc9da126cfa86",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gem_maintenance/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/gem_maintenance/index.md",
          "text": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
          "date": "2021-01-04",
          "title": "Gemのメンテ時などで使用するコマンドの覚書",
          "tags": [
            "Ruby",
            "Gem"
          ],
          "description": "リリースとかまで",
          "slug": "/entries/gem_maintenance/",
          "internal": {
            "contentDigest": "87cd2efec3d37568c0137a4059bcb6a1"
          },
          "timeToRead": 1,
          "objectID": "844525cc-323a-5b4f-95bc-16b8a090ab50",
          "_snippetResult": {
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化し …",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gem___ais-highlight__m__/ais-highlight__aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/gem___ais-highlight__m__/ais-highlight__aintenance/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-01-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Gemのメンテ時などで使用するコマンドの覚書",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Ruby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "Gem",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "リリースとかまで",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gem___ais-highlight__m__/ais-highlight__aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "87cd2efec3d37568c0137a4059bcb6a1",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/secret_manager_with_cli/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/secret_manager_with_cli/index.md",
          "text": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
          "date": "2021-04-06",
          "title": "SecretManagerの作成や更新をCLIで行う",
          "tags": [
            "GoogleCloudPlatform",
            "SecretManager"
          ],
          "description": "secrets versions add",
          "slug": "/entries/secret_manager_with_cli/",
          "internal": {
            "contentDigest": "1234a3f2fa105dad050e5e69a6948cce"
          },
          "timeToRead": 1,
          "objectID": "7b1a1351-c1b2-5749-8e6d-a337ced89eac",
          "_snippetResult": {
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレ …",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/secret___ais-highlight__m__/ais-highlight__anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/secret___ais-highlight__m__/ais-highlight__anager_with_cli/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-04-06",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "SecretManagerの作成や更新をCLIで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "SecretManager",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "secrets versions add",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/secret___ais-highlight__m__/ais-highlight__anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "1234a3f2fa105dad050e5e69a6948cce",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/node_map/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/node_map/index.md",
          "text": "\nSet,Mapを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## Map\n\n```javascript\nconst uniq = new Map();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [Map Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
          "date": "2020-06-29",
          "title": "ES2015のMap,Setで重複カット",
          "tags": [
            "ES2015",
            "JavaScript"
          ],
          "description": "Map Setを使うことで重複カット的なことが簡単に行える",
          "slug": "/entries/node_map/",
          "internal": {
            "contentDigest": "b15e6101a3eb086795fa344ddc902ffa"
          },
          "timeToRead": 1,
          "objectID": "4b36850f-8954-50e9-8c79-e8d0d0918a09",
          "_snippetResult": {
            "text": {
              "value": "… ようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## __ais-highlight__M__/ais-highlight__ap\n\n```javascript\nconst uniq = new __ais-highlight__M__/ais-highlight__ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/node___ais-highlight__m__/ais-highlight__ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/node___ais-highlight__m__/ais-highlight__ap/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nSet,__ais-highlight__M__/ais-highlight__apを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## __ais-highlight__M__/ais-highlight__ap\n\n```javascript\nconst uniq = new __ais-highlight__M__/ais-highlight__ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [__ais-highlight__M__/ais-highlight__ap Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2020-06-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "ES2015の__ais-highlight__M__/ais-highlight__ap,Setで重複カット",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "ES2015",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__M__/ais-highlight__ap Setを使うことで重複カット的なことが簡単に行える",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/node___ais-highlight__m__/ais-highlight__ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "b15e6101a3eb086795fa344ddc902ffa",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gsutil_move_bucket/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/gsutil_move_bucket/index.md",
          "text": "\n```shell\ngsutil -m cp -r 'gs://old-bucket/*' gs://new-bucket\n```\n\n`-m`はgsutilのオプションで並列実行\n\n`*`を入れないと同じディレクトリ構成にならない（シェルでの操作と同様）\n\n```\nnew-bucket/old-bucket\n```\n\nという感じでディレクトリが作成されてしまう\n",
          "date": "2023-09-07",
          "title": "gsutilで特定バケット以下のすべてのファイルを別バケットへコピーする",
          "tags": [
            "GoogleCloudPlatform",
            "GCS",
            "gsutil"
          ],
          "description": "ファイル移動と同様",
          "slug": "/entries/gsutil_move_bucket/",
          "internal": {
            "contentDigest": "f105fffdfc91f94a6475c593a64f17bd"
          },
          "timeToRead": 1,
          "objectID": "3a638eec-7862-504e-bc7e-5eee601bbfe7",
          "_snippetResult": {
            "text": {
              "value": "\n```shell\ngsutil -__ais-highlight__m__/ais-highlight__ cp -r 'gs://old-bucket/*' gs://new-bucket\n```\n\n`-__ais-highlight__m__/ais-highlight__`はgsutilのオプションで並列実行\n\n`*`を入れないと同じディレクトリ構成にならない（シェル …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gsutil___ais-highlight__m__/ais-highlight__ove_bucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/gsutil___ais-highlight__m__/ais-highlight__ove_bucket/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n```shell\ngsutil -__ais-highlight__m__/ais-highlight__ cp -r 'gs://old-bucket/*' gs://new-bucket\n```\n\n`-__ais-highlight__m__/ais-highlight__`はgsutilのオプションで並列実行\n\n`*`を入れないと同じディレクトリ構成にならない（シェルでの操作と同様）\n\n```\nnew-bucket/old-bucket\n```\n\nという感じでディレクトリが作成されてしまう\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2023-09-07",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "gsutilで特定バケット以下のすべてのファイルを別バケットへコピーする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GCS",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "gsutil",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ファイル移動と同様",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gsutil___ais-highlight__m__/ais-highlight__ove_bucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "f105fffdfc91f94a6475c593a64f17bd",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/jest_with_msw/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/jest_with_msw/index.md",
          "text": "\n開発用に定義したmswの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../mocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // mswでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"msw\"\nimport { setupServer } from \"msw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + mswのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
          "date": "2022-08-19",
          "title": "mswのモックをjestのテストでも使う",
          "tags": [
            "Jest",
            "msw",
            "TypeScript"
          ],
          "description": "開発時と同様",
          "slug": "/entries/jest_with_msw/",
          "internal": {
            "contentDigest": "cb26c9401a09c7486cd06eff588ff7a7"
          },
          "timeToRead": 1,
          "objectID": "b42b1c17-8031-515a-b628-71a053c72bf4",
          "_snippetResult": {
            "text": {
              "value": "… ト\", async () => {\n    // __ais-highlight__m__/ais-highlight__swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"__ais-highlight__m__/ais-highlight__sw\"\nimport { setupServer } from \"__ais-highlight__m__/ais-highlight__sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/jest_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/jest_with___ais-highlight__m__/ais-highlight__sw/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n開発用に定義した__ais-highlight__m__/ais-highlight__swの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../__ais-highlight__m__/ais-highlight__ocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // __ais-highlight__m__/ais-highlight__swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"__ais-highlight__m__/ais-highlight__sw\"\nimport { setupServer } from \"__ais-highlight__m__/ais-highlight__sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + __ais-highlight__m__/ais-highlight__swのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2022-08-19",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__swのモックをjestのテストでも使う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Jest",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "開発時と同様",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/jest_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "cb26c9401a09c7486cd06eff588ff7a7",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/ruby_front_matter_parser/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/ruby_front_matter_parser/index.md",
          "text": "\n## metadata\n\nGatsbyなどでも使っているMarkdownにタイトルなどの情報を付与するための構文\n\nfront_matterと言うらしい\n\nRubyでMarkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront_matterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include metadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-metadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.md\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front_matter_parser\"\ntags:\n  - Ruby\n  - Markdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(main)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(main)> parsed = FrontMatterParser::Parser.parse_file('hoge.md', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front_matter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front_matter_parser\",\n   \"tags\"=>[\"Ruby\", \"Markdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
          "date": "2020-09-14",
          "title": "Rubyでmarkdownのmetadata(front_matter)をパースする",
          "tags": [
            "Ruby",
            "Markdown"
          ],
          "description": "front_matter_parser",
          "slug": "/entries/ruby_front_matter_parser/",
          "internal": {
            "contentDigest": "d14ff38728ef3e9d2dd18a1e40741c64"
          },
          "timeToRead": 2,
          "objectID": "a1400a00-3780-5fa7-ba31-98a21079d347",
          "_snippetResult": {
            "text": {
              "value": "\n## __ais-highlight__m__/ais-highlight__etadata\n\nGatsbyなどでも使っている__ais-highlight__M__/ais-highlight__arkdownにタイトルなどの情報を付与するための構文\n\nfront___ais-highlight__m__/ais-highlight__atterと言うらしい\n\nRubyで__ais-highlight__M__/ais-highlight__arkdownをパースして …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/ruby_front___ais-highlight__m__/ais-highlight__atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/ruby_front___ais-highlight__m__/ais-highlight__atter_parser/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n## __ais-highlight__m__/ais-highlight__etadata\n\nGatsbyなどでも使っている__ais-highlight__M__/ais-highlight__arkdownにタイトルなどの情報を付与するための構文\n\nfront___ais-highlight__m__/ais-highlight__atterと言うらしい\n\nRubyで__ais-highlight__M__/ais-highlight__arkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront___ais-highlight__m__/ais-highlight__atterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include __ais-highlight__m__/ais-highlight__etadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-__ais-highlight__m__/ais-highlight__etadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser: Ruby library to parse files or strings with a front __ais-highlight__m__/ais-highlight__atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.__ais-highlight__m__/ais-highlight__d\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front___ais-highlight__m__/ais-highlight__atter_parser\"\ntags:\n  - Ruby\n  - __ais-highlight__M__/ais-highlight__arkdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(__ais-highlight__m__/ais-highlight__ain)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(__ais-highlight__m__/ais-highlight__ain)> parsed = FrontMatterParser::Parser.parse_file('hoge.__ais-highlight__m__/ais-highlight__d', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front___ais-highlight__m__/ais-highlight__atter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front___ais-highlight__m__/ais-highlight__atter_parser\",\n   \"tags\"=>[\"Ruby\", \"__ais-highlight__M__/ais-highlight__arkdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser: Ruby library to parse files or strings with a front __ais-highlight__m__/ais-highlight__atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2020-09-14",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Rubyで__ais-highlight__m__/ais-highlight__arkdownの__ais-highlight__m__/ais-highlight__etadata(front___ais-highlight__m__/ais-highlight__atter)をパースする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "Ruby",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              }
            ],
            "description": {
              "value": "front___ais-highlight__m__/ais-highlight__atter_parser",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/ruby_front___ais-highlight__m__/ais-highlight__atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "d14ff38728ef3e9d2dd18a1e40741c64",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/looker_studio_metrics_selector/",
          "text": "\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n最近またLookerStudioで頻繁にダッシュボードをいじることが増えて発見してよいなと思った機能\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n`オプション指標`という設定がほぼどのグラフにもついていて、通常表示する指標のほかにプラスで指定できるというもの\n\nグラフの種類によっては複数選択可能になっている（単一指標しか選択できないグラフもある）\n\n## 設定箇所\n\n![alt](looker_studio_metrics_selector01.png)\n\nたとえば、Togglの作業記録を取っていて可視化した場合に、分と時間という異なる単位の指標を切り分ける\n\n<!-- textlint-disable prh -->\n## 週と曜日のピボットテーブルでの作業時間\n<!-- textlint-enable prh -->\n\n### 時間で表示\n\n読書時間をフィルタした結果\n\n1未満が多くしっくり来ない…\n\n![alt](looker_studio_metrics_selector02.png)\n\nハイライト部分をクリックすると設定で指定した指標が選べる\n\n![alt](looker_studio_metrics_selector03.png)\n\n### 複数表示\n\n![alt](looker_studio_metrics_selector04.png)\n\n\n### 分のみ表示\n\n\nあまり多くないので分表示のほうがしっくり頭に入ってくる\n\n逆に大まかな分類の場合は時間での表示のほうが頭に入ってきやすい\n\n![alt](looker_studio_metrics_selector05.png)\n\n他にも時系列グラフでも指定可能なのでバリエーションは結構広がる\n",
          "date": "2024-06-28",
          "title": "LookerStudioで表示する指標を選べるようにする",
          "tags": [
            "LookerStudio"
          ],
          "description": "",
          "slug": "/entries/looker_studio_metrics_selector/",
          "internal": {
            "contentDigest": "49b33705dfe4360864aad9e0d6abd896"
          },
          "timeToRead": 1,
          "objectID": "3e845a62-e2e6-5d86-a81d-1011a2832055",
          "_snippetResult": {
            "text": {
              "value": "… 分をクリックすると設定で指定した指標が選べる\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector03.png)\n\n### 複数表示\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector04.png)\n\n\n### 分のみ表示\n\n\nあまり多くない …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/looker_studio___ais-highlight__m__/ais-highlight__etrics_selector/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n最近またLookerStudioで頻繁にダッシュボードをいじることが増えて発見してよいなと思った機能\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n`オプション指標`という設定がほぼどのグラフにもついていて、通常表示する指標のほかにプラスで指定できるというもの\n\nグラフの種類によっては複数選択可能になっている（単一指標しか選択できないグラフもある）\n\n## 設定箇所\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector01.png)\n\nたとえば、Togglの作業記録を取っていて可視化した場合に、分と時間という異なる単位の指標を切り分ける\n\n<!-- textlint-disable prh -->\n## 週と曜日のピボットテーブルでの作業時間\n<!-- textlint-enable prh -->\n\n### 時間で表示\n\n読書時間をフィルタした結果\n\n1未満が多くしっくり来ない…\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector02.png)\n\nハイライト部分をクリックすると設定で指定した指標が選べる\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector03.png)\n\n### 複数表示\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector04.png)\n\n\n### 分のみ表示\n\n\nあまり多くないので分表示のほうがしっくり頭に入ってくる\n\n逆に大まかな分類の場合は時間での表示のほうが頭に入ってきやすい\n\n![alt](looker_studio___ais-highlight__m__/ais-highlight__etrics_selector05.png)\n\n他にも時系列グラフでも指定可能なのでバリエーションは結構広がる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2024-06-28",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "LookerStudioで表示する指標を選べるようにする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "LookerStudio",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/looker_studio___ais-highlight__m__/ais-highlight__etrics_selector/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "49b33705dfe4360864aad9e0d6abd896",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/cloudwatch_logs_multi_line_log/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/cloudwatch_logs_multi_line_log/index.md",
          "text": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`multi_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"multi_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route matches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
          "date": "2021-04-02",
          "title": "CloudWatchLogsで複数行またいだログを適切に扱う",
          "tags": [
            "AWS",
            "CloudWatchLogs"
          ],
          "description": "multi_line_start_parttern",
          "slug": "/entries/cloudwatch_logs_multi_line_log/",
          "internal": {
            "contentDigest": "783a8a9991c33692940b554910785efe"
          },
          "timeToRead": 1,
          "objectID": "2dbf17a8-49aa-51f4-8d38-4a67b4a9d21a",
          "_snippetResult": {
            "text": {
              "value": "… 複数行のログでも1つのまとまりとして扱いたい\n\nそこで`__ais-highlight__m__/ais-highlight__ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現に …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/cloudwatch_logs___ais-highlight__m__/ais-highlight__ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/cloudwatch_logs___ais-highlight__m__/ais-highlight__ulti_line_log/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`__ais-highlight__m__/ais-highlight__ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"__ais-highlight__m__/ais-highlight__ulti_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route __ais-highlight__m__/ais-highlight__atches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2021-04-02",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "CloudWatchLogsで複数行またいだログを適切に扱う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "AWS",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "CloudWatchLogs",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__m__/ais-highlight__ulti_line_start_parttern",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "slug": {
              "value": "/entries/cloudwatch_logs___ais-highlight__m__/ais-highlight__ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "783a8a9991c33692940b554910785efe",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/zip_response_using_msw/",
          "github": "https://github.com/swfz/til/blob/master/content/blog//entries/zip_response_using_msw/index.md",
          "text": "\nmswでモックする対象として`zip`や動画などバイナリファイルも扱える\n\n次の例はGitHub Actionsの各ジョブのログをあらかじめDLしておきそれを読み込みレスポンスとして返す処理\n\n- handlerの例\n\n```typescript\nexport const handlers = [\n  http.get('https://api.github.com/repos/*/*/actions/runs/*/logs', () => {\n    const buffer = fs.readFileSync(\n      path.resolve(process.cwd(), './src/mocks/responses/failed_log.zip')\n    )\n\n    return HttpResponse.arrayBuffer(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip'\n      }\n    })\n  })\n]\n```\n\n公式の例では`mp4`をバイナリとして返している\n\n基本的にはこの方法でバイナリファイルでもレスポンスをモックすることが可能\n\n- 公式\n\n[Responding with binary - Mock Service Worker](https://mswjs.io/docs/recipes/responding-with-binary/)\n",
          "date": "2024-01-23",
          "title": "mswでzipレスポンスを返す",
          "tags": [
            "msw",
            "zip"
          ],
          "description": "HttpResponse.arrayBuffer",
          "slug": "/entries/zip_response_using_msw/",
          "internal": {
            "contentDigest": "7f9b54300aa0d7b74023b091384b3ec7"
          },
          "timeToRead": 1,
          "objectID": "48c1d237-66e6-5a93-aaa4-3b1026447702",
          "_snippetResult": {
            "text": {
              "value": "… の例\n\n```typescript\nexport const handlers = [\n  http.get('https://api.github.com/repos/*/*/actions/runs/*/logs', () => {\n    const buffer = fs.readFileSync(\n      path.resolve(process.cwd(), './src/__ais-highlight__m__/ais-highlight__ocks/responses/failed_log.zip')\n    )\n\n    return HttpResponse.arrayBuffer(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip'\n      }\n    })\n  })\n]\n```\n\n公式の例では`__ais-highlight__m__/ais-highlight__p4`をバ …",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/zip_response_using___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "github": {
              "value": "https://github.com/swfz/til/blob/__ais-highlight__m__/ais-highlight__aster/content/blog//entries/zip_response_using___ais-highlight__m__/ais-highlight__sw/index.__ais-highlight__m__/ais-highlight__d",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "text": {
              "value": "\n__ais-highlight__m__/ais-highlight__swでモックする対象として`zip`や動画などバイナリファイルも扱える\n\n次の例はGitHub Actionsの各ジョブのログをあらかじめDLしておきそれを読み込みレスポンスとして返す処理\n\n- handlerの例\n\n```typescript\nexport const handlers = [\n  http.get('https://api.github.com/repos/*/*/actions/runs/*/logs', () => {\n    const buffer = fs.readFileSync(\n      path.resolve(process.cwd(), './src/__ais-highlight__m__/ais-highlight__ocks/responses/failed_log.zip')\n    )\n\n    return HttpResponse.arrayBuffer(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip'\n      }\n    })\n  })\n]\n```\n\n公式の例では`__ais-highlight__m__/ais-highlight__p4`をバイナリとして返している\n\n基本的にはこの方法でバイナリファイルでもレスポンスをモックすることが可能\n\n- 公式\n\n[Responding with binary - __ais-highlight__M__/ais-highlight__ock Service Worker](https://__ais-highlight__m__/ais-highlight__swjs.io/docs/recipes/responding-with-binary/)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "date": {
              "value": "2024-01-23",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__swでzipレスポンスを返す",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "tags": [
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": [
                  "m"
                ]
              },
              {
                "value": "zip",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "HttpResponse.arrayBuffer",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/zip_response_using___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": [
                "m"
              ]
            },
            "internal": {
              "contentDigest": {
                "value": "7f9b54300aa0d7b74023b091384b3ec7",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 205,
      "page": 0,
      "nbPages": 11,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": {
        "nbHits": true,
        "typo": true
      },
      "query": "m",
      "params": "highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&page=0&query=m",
      "index": "til",
      "renderingContent": {},
      "processingTimeMS": 1,
      "processingTimingsMS": {
        "_request": {
          "roundTrip": 1
        },
        "afterFetch": {
          "format": {
            "highlighting": 1,
            "snippeting": 2,
            "total": 4
          }
        },
        "total": 0
      },
      "serverTimeMS": 23
    }
  ]
}