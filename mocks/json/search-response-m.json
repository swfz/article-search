{
  "results": [
    {
      "hits": [
        {
          "url": "https://til.swfz.io//entries/markdownlint/",
          "text": "\n[DavidAnson/markdownlint: A Node.js style checker and lint tool for Markdown/CommonMark files.](https://github.com/DavidAnson/markdownlint)\n\nMarkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .markdownlint.yml\n\n```yaml\nMD007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
          "date": "2022-07-26",
          "title": "markdownlintを使ってみた",
          "tags": ["markdownlint"],
          "description": "markdownlint",
          "slug": "/entries/markdownlint/",
          "timeToRead": 1,
          "objectID": "df9fc27d-5a94-581e-bb15-bc6d9e79d00d",
          "_snippetResult": {
            "text": {
              "value": "\n[DavidAnson/<em>m</em>arkdownlint: A Node.js style checker and lint tool for <em>M</em>arkdown/CommonMark files.](https://github.com/DavidAnson/<em>m</em>arkdownlint)\n\n<em>M</em>arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくら",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n[DavidAnson/<em>m</em>arkdownlint: A Node.js style checker and lint tool for <em>M</em>arkdown/CommonMark files.](https://github.com/DavidAnson/<em>m</em>arkdownlint)\n\n<em>M</em>arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .<em>m</em>arkdownlint.yml\n\n```yaml\n<em>M</em>D007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-07-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>arkdownlintを使ってみた",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "<em>m</em>arkdownlint",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "<em>m</em>arkdownlint",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/<em>m</em>arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysqldump_in_docker_compose/",
          "text": "\ndocker-composeからmysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database mysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database mysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
          "date": "2020-09-18",
          "title": "docker-composeからmysqldumpコマンドを実行する",
          "tags": ["Docker", "MySQL"],
          "description": "exec -Tを使う",
          "slug": "/entries/mysqldump_in_docker_compose/",
          "timeToRead": 1,
          "objectID": "a8119391-1f4e-58b2-9087-150d4279cbfe",
          "_snippetResult": {
            "text": {
              "value": "\ndocker-composeから<em>m</em>ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database <em>m</em>ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database <em>m</em>ysql -u root -phoge hoge < hoge_dump",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\ndocker-composeから<em>m</em>ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database <em>m</em>ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database <em>m</em>ysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-09-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "docker-composeから<em>m</em>ysqldumpコマンドを実行する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Docker", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "<em>M</em>ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "exec -Tを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/msw_mock_svg/",
          "text": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.me/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\nmswを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということでmswを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - Mock Service Worker Docs](https://mswjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev msw\nmkdir src/mocks\ntouch src/mocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx msw init static/ --save\n```\n\nすると`static/mockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/mocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-mock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/mocks/browser.js\n\n```javascript\n// src/mocks/browser.js\nimport { setupWorker } from 'msw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/mocks/handler.ts\n\n```typescript\nimport { rest } from 'msw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to mock an img src url? · Issue #461 · mswjs/msw](https://github.com/mswjs/msw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\nmswを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
          "date": "2021-12-29",
          "title": "mswでSVGをモックする",
          "tags": ["JavaScript", "TypeScript", "Gatsby", "msw"],
          "description": "Pixelaを題材としてモックしてみた",
          "slug": "/entries/msw_mock_svg/",
          "timeToRead": 3,
          "objectID": "75a9abd2-0b34-54b0-b919-36e1513da0ed",
          "_snippetResult": {
            "text": {
              "value": "にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev <em>m</em>sw\n<em>m</em>kdir src/<em>m</em>ocks\ntouch src/<em>m</em>ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx <em>m</em>sw",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>sw_<em>m</em>ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.<em>m</em>e/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\n<em>m</em>swを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということで<em>m</em>swを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - <em>M</em>ock Service Worker Docs](https://<em>m</em>swjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev <em>m</em>sw\n<em>m</em>kdir src/<em>m</em>ocks\ntouch src/<em>m</em>ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx <em>m</em>sw init static/ --save\n```\n\nすると`static/<em>m</em>ockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/<em>m</em>ocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-<em>m</em>ock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/<em>m</em>ocks/browser.js\n\n```javascript\n// src/<em>m</em>ocks/browser.js\nimport { setupWorker } from '<em>m</em>sw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/<em>m</em>ocks/handler.ts\n\n```typescript\nimport { rest } from '<em>m</em>sw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to <em>m</em>ock an img src url? · Issue #461 · <em>m</em>swjs/<em>m</em>sw](https://github.com/<em>m</em>swjs/<em>m</em>sw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\n<em>m</em>swを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-12-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>swでSVGをモックする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "Gatsby", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "Pixelaを題材としてモックしてみた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>sw_<em>m</em>ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysql_direct_gz/",
          "text": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\nmysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接MySQLに流し込む\n\n```shell\nzcat dump.gz | mysql -u user -p password dbname \n```\n",
          "date": "2021-01-22",
          "title": "MySQLでgzipをそのまま流し込む",
          "tags": ["MySQL"],
          "description": "",
          "slug": "/entries/mysql_direct_gz/",
          "timeToRead": 1,
          "objectID": "25ff08d9-c14a-5578-b660-137c5c714081",
          "_snippetResult": {
            "text": {
              "value": "したファイルを生成する\n\n```shell\n<em>m</em>ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接<em>M</em>ySQLに流し込む\n\n```shell\nzcat dump.gz | <em>m</em>ysql -u user -p password dbname \n```\n",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\n<em>m</em>ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接<em>M</em>ySQLに流し込む\n\n```shell\nzcat dump.gz | <em>m</em>ysql -u user -p password dbname \n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-01-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>M</em>ySQLでgzipをそのまま流し込む",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "<em>M</em>ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/multi_ssh_command/",
          "text": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
          "date": "2020-06-20",
          "title": "多段SSHをワンライナーで行う",
          "tags": ["ssh", "ワンライナー", "ShellScript"],
          "description": "ssh -o ProxyCommand",
          "slug": "/entries/multi_ssh_command/",
          "timeToRead": 1,
          "objectID": "01010979-2db3-54b9-ad97-90882bf80ade",
          "_snippetResult": {
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/<em>m</em>ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2020-06-20",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "多段SSHをワンライナーで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "ssh", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "ワンライナー",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ShellScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ssh -o ProxyCommand",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/<em>m</em>ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/algolia_mock_with_msw/",
          "text": "\nAlgoliaの検索リクエストをmswでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、mswで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONをmswを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスがmsw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"msw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
          "date": "2022-08-12",
          "title": "Algoliaのレスポンスをmswでモックして開発ではダミーレスポンスを扱う",
          "tags": ["Algolia", "msw", "TypeScript"],
          "description": "実際のJSONを用意する",
          "slug": "/entries/algolia_mock_with_msw/",
          "timeToRead": 3,
          "objectID": "c8728ebf-22ac-5299-ba20-c595cab71ff1",
          "_snippetResult": {
            "text": {
              "value": "\nAlgoliaの検索リクエストを<em>m</em>swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしな",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/algolia_<em>m</em>ock_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nAlgoliaの検索リクエストを<em>m</em>swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、<em>m</em>swで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONを<em>m</em>swを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスが<em>m</em>sw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"<em>m</em>sw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-08-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Algoliaのレスポンスを<em>m</em>swでモックして開発ではダミーレスポンスを扱う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Algolia", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "実際のJSONを用意する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/algolia_<em>m</em>ock_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/secret_manager_with_cli/",
          "text": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
          "date": "2021-04-06",
          "title": "SecretManagerの作成や更新をCLIで行う",
          "tags": ["GoogleCloudPlatform", "SecretManager"],
          "description": "secrets versions add",
          "slug": "/entries/secret_manager_with_cli/",
          "timeToRead": 1,
          "objectID": "ba54f21d-4493-567b-a3fa-279d78422d20",
          "_snippetResult": {
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレ",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/secret_<em>m</em>anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-04-06",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "SecretManagerの作成や更新をCLIで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "SecretManager",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "secrets versions add",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/secret_<em>m</em>anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gem_maintenance/",
          "text": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
          "date": "2021-01-04",
          "title": "Gemのメンテ時などで使用するコマンドの覚書",
          "tags": ["Ruby", "Gem"],
          "description": "リリースとかまで",
          "slug": "/entries/gem_maintenance/",
          "timeToRead": 2,
          "objectID": "4cda0d7b-303c-5ca5-888b-cc14e0621894",
          "_snippetResult": {
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化し",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gem_<em>m</em>aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-01-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Gemのメンテ時などで使用するコマンドの覚書",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Ruby", "matchLevel": "none", "matchedWords": [] },
              { "value": "Gem", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "リリースとかまで",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gem_<em>m</em>aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/netlify_manual_deploy/",
          "text": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get more Operations.\nError: Operations quota exceeded. Change plan to get more Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node_modules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your main site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to main site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== 'master' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `master`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
          "date": "2021-07-03",
          "title": "Netlifyに手動でデプロイする",
          "tags": ["Netlify", "Gatsby"],
          "description": "netlify-cliを使う",
          "slug": "/entries/netlify_manual_deploy/",
          "timeToRead": 4,
          "objectID": "2031610b-8a69-521a-8efe-7c3719d8f208",
          "_snippetResult": {
            "text": {
              "value": "まったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\nError: Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\n```\n\n途中で落ちてしまいデプロイ",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/netlify_<em>m</em>anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\nError: Operations quota exceeded. Change plan to get <em>m</em>ore Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node_<em>m</em>odules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your <em>m</em>ain site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to <em>m</em>ain site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== '<em>m</em>aster' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `<em>m</em>aster`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-07-03",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Netlifyに手動でデプロイする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Netlify", "matchLevel": "none", "matchedWords": [] },
              { "value": "Gatsby", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "netlify-cliを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/netlify_<em>m</em>anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "4",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/node_map/",
          "text": "\nSet,Mapを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## Map\n\n```javascript\nconst uniq = new Map();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [Map Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
          "date": "2020-06-29",
          "title": "ES2015のMap,Setで重複カット",
          "tags": ["ES2015", "JavaScript"],
          "description": "Map Setを使うことで重複カット的なことが簡単に行える",
          "slug": "/entries/node_map/",
          "timeToRead": 1,
          "objectID": "01172dcf-31fe-5816-b48f-13a57bfc9c26",
          "_snippetResult": {
            "text": {
              "value": "ようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## <em>M</em>ap\n\n```javascript\nconst uniq = new <em>M</em>ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/node_<em>m</em>ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nSet,<em>M</em>apを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## <em>M</em>ap\n\n```javascript\nconst uniq = new <em>M</em>ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [<em>M</em>ap Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-06-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "ES2015の<em>M</em>ap,Setで重複カット",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "ES2015", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "<em>M</em>ap Setを使うことで重複カット的なことが簡単に行える",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/node_<em>m</em>ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/ruby_front_matter_parser/",
          "text": "\n## metadata\n\nGatsbyなどでも使っているMarkdownにタイトルなどの情報を付与するための構文\n\nfront_matterと言うらしい\n\nRubyでMarkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront_matterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include metadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-metadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.md\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front_matter_parser\"\ntags:\n  - Ruby\n  - Markdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(main)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(main)> parsed = FrontMatterParser::Parser.parse_file('hoge.md', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front_matter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front_matter_parser\",\n   \"tags\"=>[\"Ruby\", \"Markdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
          "date": "2020-09-14",
          "title": "Rubyでmarkdownのmetadata(front_matter)をパースする",
          "tags": ["Ruby", "Markdown"],
          "description": "front_matter_parser",
          "slug": "/entries/ruby_front_matter_parser/",
          "timeToRead": 2,
          "objectID": "e71a004c-2195-512e-856e-4561c762e977",
          "_snippetResult": {
            "text": {
              "value": "\n## <em>m</em>etadata\n\nGatsbyなどでも使っている<em>M</em>arkdownにタイトルなどの情報を付与するための構文\n\nfront_<em>m</em>atterと言うらしい\n\nRubyで<em>M</em>arkdownをパースして",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/ruby_front_<em>m</em>atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n## <em>m</em>etadata\n\nGatsbyなどでも使っている<em>M</em>arkdownにタイトルなどの情報を付与するための構文\n\nfront_<em>m</em>atterと言うらしい\n\nRubyで<em>M</em>arkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront_<em>m</em>atterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include <em>m</em>etadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-<em>m</em>etadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front_<em>m</em>atter_parser: Ruby library to parse files or strings with a front <em>m</em>atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_<em>m</em>atter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.<em>m</em>d\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front_<em>m</em>atter_parser\"\ntags:\n  - Ruby\n  - <em>M</em>arkdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(<em>m</em>ain)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(<em>m</em>ain)> parsed = FrontMatterParser::Parser.parse_file('hoge.<em>m</em>d', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front_<em>m</em>atter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front_<em>m</em>atter_parser\",\n   \"tags\"=>[\"Ruby\", \"<em>M</em>arkdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front_<em>m</em>atter_parser: Ruby library to parse files or strings with a front <em>m</em>atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_<em>m</em>atter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-09-14",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Rubyで<em>m</em>arkdownの<em>m</em>etadata(front_<em>m</em>atter)をパースする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Ruby", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "<em>M</em>arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "front_<em>m</em>atter_parser",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/ruby_front_<em>m</em>atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/cloudwatch_logs_multi_line_log/",
          "text": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`multi_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"multi_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route matches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
          "date": "2021-04-02",
          "title": "CloudWatchLogsで複数行またいだログを適切に扱う",
          "tags": ["AWS", "CloudWatchLogs"],
          "description": "multi_line_start_parttern",
          "slug": "/entries/cloudwatch_logs_multi_line_log/",
          "timeToRead": 1,
          "objectID": "e70e9bba-0cf7-5871-bc3e-0b2b73be6cd4",
          "_snippetResult": {
            "text": {
              "value": "複数行のログでも1つのまとまりとして扱いたい\n\nそこで`<em>m</em>ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現に",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/cloudwatch_logs_<em>m</em>ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`<em>m</em>ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"<em>m</em>ulti_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route <em>m</em>atches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-04-02",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "CloudWatchLogsで複数行またいだログを適切に扱う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "CloudWatchLogs",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "<em>m</em>ulti_line_start_parttern",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/cloudwatch_logs_<em>m</em>ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/jest_with_msw/",
          "text": "\n開発用に定義したmswの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../mocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // mswでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"msw\"\nimport { setupServer } from \"msw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + mswのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
          "date": "2022-08-19",
          "title": "mswのモックをjestのテストでも使う",
          "tags": ["Jest", "msw", "TypeScript"],
          "description": "開発時と同様",
          "slug": "/entries/jest_with_msw/",
          "timeToRead": 1,
          "objectID": "3cb05eab-dd49-525f-9761-98eaccf45fa7",
          "_snippetResult": {
            "text": {
              "value": "ト\", async () => {\n    // <em>m</em>swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"<em>m</em>sw\"\nimport { setupServer } from \"<em>m</em>sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/jest_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n開発用に定義した<em>m</em>swの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../<em>m</em>ocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // <em>m</em>swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"<em>m</em>sw\"\nimport { setupServer } from \"<em>m</em>sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + <em>m</em>swのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-08-19",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "<em>m</em>swのモックをjestのテストでも使う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Jest", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "<em>m</em>sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "開発時と同様",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/jest_with_<em>m</em>sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/s3_content_disposition_with_metadata/",
          "text": "\nS3でpresigned_urlを発行してファイルをDLさせる場合（サンプルはAWS-SDKのRubyクライアントを使用）\n\nS3にあるファイルを別名でダウンロードさせるためには`response_content_disposition`の指定を良しなにする\n\n```\n  response_content_disposition: \"attachment; filename=hoge.txt\"\n```\n\n上記の場合はDL時`hoge.txt`というファイル名でDLされる\n\nまた、S3へのファイル作成時に`metadata`というキーで任意のパラメータ指定が可能\n\n下記のようにファイル生成時の情報を元にファイル名を決めたいと言うようなケースにも対応できる\n\n以下例\n\n## ファイル作成時\n\n```ruby\ns3client = Aws::S3::Client.new\ns3client.put_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  body: File.read(filename),\n  content_type: 'text/csv',\n  metadata: {\n    hoge: 'fuga'\n  }\n)\n```\n\n## presigned url生成時\n\n```ruby\ns3client = Aws::S3::Client.new\n\nobject = s3client.head_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key'\n)\nmetadata = object.metadata\n\nsigner = Aws::S3::Presigner.new\nsigner.presigned_url(\n  :get_object,\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  expires_in: 300,\n  response_content_disposition: \"attachment; filename=#{metadata['hoge']}.txt\"\n)\n```\n\nファイル生成時に`metadata.hoge`の値`fuga`をファイル名に含めることができた\n\n上記例だと`fuga.txt`というファイル名でダウンロードできる\n",
          "date": "2021-07-25",
          "title": "S3のpresigned_url発行時にキー以外の名前のファイルをDL可能にする",
          "tags": ["S3", "AWS"],
          "description": "response_content_disposition",
          "slug": "/entries/s3_content_disposition_with_metadata/",
          "timeToRead": 1,
          "objectID": "d7bc3477-f972-50b8-9cda-1587fc460c7d",
          "_snippetResult": {
            "text": {
              "value": "csv',\n  <em>m</em>etadata: {\n    hoge: 'fuga'\n  }\n)\n```\n\n## presigned url生成時\n\n```ruby\ns3client = Aws::S3::Client.new\n\nobject = s3client.head_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key'\n)\n<em>m</em>etadata = object.<em>m</em>etadata\n\nsigner = Aws::S3::Presigner.new\nsigner.presigned_url(\n  :get_object,\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  expires_in: 300,\n  response_content_disposition",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/s3_content_disposition_with_<em>m</em>etadata/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nS3でpresigned_urlを発行してファイルをDLさせる場合（サンプルはAWS-SDKのRubyクライアントを使用）\n\nS3にあるファイルを別名でダウンロードさせるためには`response_content_disposition`の指定を良しなにする\n\n```\n  response_content_disposition: \"attachment; filename=hoge.txt\"\n```\n\n上記の場合はDL時`hoge.txt`というファイル名でDLされる\n\nまた、S3へのファイル作成時に`<em>m</em>etadata`というキーで任意のパラメータ指定が可能\n\n下記のようにファイル生成時の情報を元にファイル名を決めたいと言うようなケースにも対応できる\n\n以下例\n\n## ファイル作成時\n\n```ruby\ns3client = Aws::S3::Client.new\ns3client.put_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  body: File.read(filename),\n  content_type: 'text/csv',\n  <em>m</em>etadata: {\n    hoge: 'fuga'\n  }\n)\n```\n\n## presigned url生成時\n\n```ruby\ns3client = Aws::S3::Client.new\n\nobject = s3client.head_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key'\n)\n<em>m</em>etadata = object.<em>m</em>etadata\n\nsigner = Aws::S3::Presigner.new\nsigner.presigned_url(\n  :get_object,\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  expires_in: 300,\n  response_content_disposition: \"attachment; filename=#{<em>m</em>etadata['hoge']}.txt\"\n)\n```\n\nファイル生成時に`<em>m</em>etadata.hoge`の値`fuga`をファイル名に含めることができた\n\n上記例だと`fuga.txt`というファイル名でダウンロードできる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-07-25",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "S3のpresigned_url発行時にキー以外の名前のファイルをDL可能にする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "S3", "matchLevel": "none", "matchedWords": [] },
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "response_content_disposition",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/s3_content_disposition_with_<em>m</em>etadata/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/start_pocket_api/",
          "text": "\nまず`My Applications`から`CREATE APP`でアプリケーションを作成して`consumer key`を取得する\n\n取得した`consumer key`を環境変数に入れておく\n\n```shell\n$ export CONSUMER_KEY=xxxxx\n```\n\n## request tokenの発行\n\n適当なリダイレクト先を指定してrequest tokenを生成する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\n   https://getpocket.com/v3/oauth/request \\\n   -d @-<<EOS\n{\n  \"consumer_key\" : \"${CONSUMER_KEY}\",\n  \"redirect_uri\":\"http://localhost:8001/\"\n}\nEOS\ncode=xxxxx\n```\n\n結果を環境変数に入れておく\n\n```shell\n$ export REQUEST_TOKEN=xxxxx\n```\n\n## ブラウザへ遷移してアプリケーションのアクセス許可を行う\n\nリダイレクト先は適当に\n\n```shell\nopen \"https://getpocket.com/auth/authorize?request_token=${REQUEST_TOKEN}&redirect_uri=http://localhost:8001/\"\n```\n\n## access tokenの発行\n\n先の手順で得たrequest tokenを用いてaccess tokenの発行する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/oauth/authorize \\\n-d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"code\":\"${REQUEST_TOKEN}\"\n}\nEOS\naccess_token=xxxxx&username=hoge\n```\n\n`access_token=`の部分を環境変数に入れておく\n\n```shell\n$ export ACCESS_TOKEN=xxxxx\n```\n\nこれで準備が完了した\n\n## 何かしら問い合わせてみる\n\n記事データを取得してみる\n\n```shell\ncurl -o res.json -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/get -d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"access_token\":\"${ACCESS_TOKEN}\",\n  \"state\":\"unread\",\n  \"detailType\":\"complete\",\n  \"count\":3\n}\nEOS\n```\n\n[Pocket API: Retrieving a User's Pocket Data](https://getpocket.com/developer/docs/v3/retrieve)\n\nretrieveのAPIの仕様についてはこの辺\n\n## おまけ\n\nここで得たJSONをBigQueryに放り込んでよしなにやろうとしたが一筋縄では行かなかった\n\n次のエラーはレスポンスのJSONファイルをそのままGCSにあげて`bq load`しようとした結果\n\n```\nError in query string: Error processing job 'project-111111:bqjob_r75b06933ac2f4481_0000017942c36b05_1': Invalid field name \"3292257344\". Fields must contain only letters, numbers, and\nunderscores, start with a letter or underscore, and be at most 300 characters long. Table: sample_8bb5a901_3d95_41f4_9512_e7f4fad8a737_source\n```\n\nエラー文言自体は`文字またはアンダースコアで始まり`の部分に違反しているのでエラーがでているがそもそもこのキーがIDなので記事によって可変であるためスキーマ定義ができない\n\njson形式が微妙すぎるのでどうしてもフォーマットしてあげないとダメそう\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": {\n    \"3324677936\": {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    \"3324677937\": {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n```\n\nこんな感じで数値キーのハッシュとして出力されている\n\n配列で表現してほしかった…\n\nということで数値キーになっている要素を数値キーを削除した形で保持させる\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": [\n    {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n  ]\n```\n\nこんな感じ\n\n中身を見た感じ`.list`以外にも同様の形式だったのでそちらも同様に配列に変更する必要がある\n\n### ハッシュ→配列にする必要がある要素\n\n執筆時点で把握しているのは下記\n\n- .list\n- .list.images\n- .list.videos\n- .list.authors\n\n### jqでよしなにやる\n\n```\ncat res.json| jq  -cr '.list=(.list|to_entries|map(.value)|map(.images=if has(\"images\") then .images|to_entries|map(.value) else [] end)|map(.videos=if has(\"videos\") then .videos|to_entries|map(.value) else [] end)|map(.authors=if has(\"authors\") then .authors|to_entries|map(.value) else [] end))' > list.json\n```\n\nキー自体がそもそもない場合もあったのでその場合は空配列にする\n\n### BigQueryに入れ込む\n\n```\nbq load --replace --autodetect --source_format=NEWLINE_DELIMITED_JSON sample_dataset.sample list.json\n```\n\nこれでOK",
          "date": "2021-05-07",
          "title": "PocketのデータをAPI経由でBigQueryに取り込む",
          "tags": ["Pocket", "BigQuery", "GoogleCloudPlatform", "jq"],
          "description": "ACCESS KEYの発行とRetrieveエンドポイントを叩くまで、おまけでBigQueryにいれてみた",
          "slug": "/entries/start_pocket_api/",
          "timeToRead": 3,
          "objectID": "d0cde5d5-f1ec-5985-81c7-88e10adaf52c",
          "_snippetResult": {
            "text": {
              "value": "る\n\n```\ncat res.json| jq  -cr '.list=(.list|to_entries|<em>m</em>ap(.value)|<em>m</em>ap(.images=if has(\"images\") then .images|to_entries|<em>m</em>ap(.value) else [] end)|<em>m</em>ap(.videos=if has(\"videos\") then .videos|to_entries|<em>m</em>ap(.value) else [] end)|<em>m</em>ap(.authors=if has(\"authors\") then .authors|to_entries|<em>m</em>ap(.value) else",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/start_pocket_api/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\nまず`<em>M</em>y Applications`から`CREATE APP`でアプリケーションを作成して`consumer key`を取得する\n\n取得した`consumer key`を環境変数に入れておく\n\n```shell\n$ export CONSUMER_KEY=xxxxx\n```\n\n## request tokenの発行\n\n適当なリダイレクト先を指定してrequest tokenを生成する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\n   https://getpocket.com/v3/oauth/request \\\n   -d @-<<EOS\n{\n  \"consumer_key\" : \"${CONSUMER_KEY}\",\n  \"redirect_uri\":\"http://localhost:8001/\"\n}\nEOS\ncode=xxxxx\n```\n\n結果を環境変数に入れておく\n\n```shell\n$ export REQUEST_TOKEN=xxxxx\n```\n\n## ブラウザへ遷移してアプリケーションのアクセス許可を行う\n\nリダイレクト先は適当に\n\n```shell\nopen \"https://getpocket.com/auth/authorize?request_token=${REQUEST_TOKEN}&redirect_uri=http://localhost:8001/\"\n```\n\n## access tokenの発行\n\n先の手順で得たrequest tokenを用いてaccess tokenの発行する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/oauth/authorize \\\n-d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"code\":\"${REQUEST_TOKEN}\"\n}\nEOS\naccess_token=xxxxx&username=hoge\n```\n\n`access_token=`の部分を環境変数に入れておく\n\n```shell\n$ export ACCESS_TOKEN=xxxxx\n```\n\nこれで準備が完了した\n\n## 何かしら問い合わせてみる\n\n記事データを取得してみる\n\n```shell\ncurl -o res.json -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/get -d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"access_token\":\"${ACCESS_TOKEN}\",\n  \"state\":\"unread\",\n  \"detailType\":\"complete\",\n  \"count\":3\n}\nEOS\n```\n\n[Pocket API: Retrieving a User's Pocket Data](https://getpocket.com/developer/docs/v3/retrieve)\n\nretrieveのAPIの仕様についてはこの辺\n\n## おまけ\n\nここで得たJSONをBigQueryに放り込んでよしなにやろうとしたが一筋縄では行かなかった\n\n次のエラーはレスポンスのJSONファイルをそのままGCSにあげて`bq load`しようとした結果\n\n```\nError in query string: Error processing job 'project-111111:bqjob_r75b06933ac2f4481_0000017942c36b05_1': Invalid field name \"3292257344\". Fields <em>m</em>ust contain only letters, numbers, and\nunderscores, start with a letter or underscore, and be at <em>m</em>ost 300 characters long. Table: sample_8bb5a901_3d95_41f4_9512_e7f4fad8a737_source\n```\n\nエラー文言自体は`文字またはアンダースコアで始まり`の部分に違反しているのでエラーがでているがそもそもこのキーがIDなので記事によって可変であるためスキーマ定義ができない\n\njson形式が微妙すぎるのでどうしてもフォーマットしてあげないとダメそう\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": {\n    \"3324677936\": {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    \"3324677937\": {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n```\n\nこんな感じで数値キーのハッシュとして出力されている\n\n配列で表現してほしかった…\n\nということで数値キーになっている要素を数値キーを削除した形で保持させる\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": [\n    {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n  ]\n```\n\nこんな感じ\n\n中身を見た感じ`.list`以外にも同様の形式だったのでそちらも同様に配列に変更する必要がある\n\n### ハッシュ→配列にする必要がある要素\n\n執筆時点で把握しているのは下記\n\n- .list\n- .list.images\n- .list.videos\n- .list.authors\n\n### jqでよしなにやる\n\n```\ncat res.json| jq  -cr '.list=(.list|to_entries|<em>m</em>ap(.value)|<em>m</em>ap(.images=if has(\"images\") then .images|to_entries|<em>m</em>ap(.value) else [] end)|<em>m</em>ap(.videos=if has(\"videos\") then .videos|to_entries|<em>m</em>ap(.value) else [] end)|<em>m</em>ap(.authors=if has(\"authors\") then .authors|to_entries|<em>m</em>ap(.value) else [] end))' > list.json\n```\n\nキー自体がそもそもない場合もあったのでその場合は空配列にする\n\n### BigQueryに入れ込む\n\n```\nbq load --replace --autodetect --source_format=NEWLINE_DELIMITED_JSON sample_dataset.sample list.json\n```\n\nこれでOK",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-05-07",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "PocketのデータをAPI経由でBigQueryに取り込む",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Pocket", "matchLevel": "none", "matchedWords": [] },
              { "value": "BigQuery", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "jq", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "ACCESS KEYの発行とRetrieveエンドポイントを叩くまで、おまけでBigQueryにいれてみた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/start_pocket_api/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/tfenv/",
          "text": "\n[tfutils/tfenv: Terraform version manager](https://github.com/tfutils/tfenv)\n\nTerraformのバージョンを切り替えて使用するためのツール\n\n### インストール\n\n```shell\n$ git clone https://github.com/tfutils/tfenv.git ~/.tfenv\n$ mkdir ~/.local/bin\n$ ln -s ~/.tfenv/bin/* ~/.local/bin\n```\n\n### PATHへの追加\n\n- .bashrc\n\n```\nexport PATH=\"$HOME/.tfenv/bin:$PATH\"\n```\n\n当たり前だが既存のパスより前にtfenvのパスが先にないと既存でterraformを使っている場合そっちが先に見つかってしまうのでtfenvのパスを先にする\n\n### 切り替え、使用\n\n```\n$ tfenv install 0.14.6\n$ tfenv use 0.14.6\n$ terraform --version\nTerraform v0.14.6\n```\n",
          "date": "2021-02-13",
          "title": "tfenvを使いTerraformのバージョンを切り替える",
          "tags": ["Terraform"],
          "description": "tfenv",
          "slug": "/entries/tfenv/",
          "timeToRead": 1,
          "objectID": "c2cc61fc-bb15-51f6-b648-3e7b00b73da7",
          "_snippetResult": {
            "text": {
              "value": "\n[tfutils/tfenv: Terraform version <em>m</em>anager](https://github.com/tfutils/tfenv)\n\nTerraformのバージョンを切り替えて使用するためのツール\n\n### インストール\n\n```shell\n$ git clone https://github.com/tfutils/tfenv.git",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/tfenv/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n[tfutils/tfenv: Terraform version <em>m</em>anager](https://github.com/tfutils/tfenv)\n\nTerraformのバージョンを切り替えて使用するためのツール\n\n### インストール\n\n```shell\n$ git clone https://github.com/tfutils/tfenv.git ~/.tfenv\n$ <em>m</em>kdir ~/.local/bin\n$ ln -s ~/.tfenv/bin/* ~/.local/bin\n```\n\n### PATHへの追加\n\n- .bashrc\n\n```\nexport PATH=\"$HOME/.tfenv/bin:$PATH\"\n```\n\n当たり前だが既存のパスより前にtfenvのパスが先にないと既存でterraformを使っている場合そっちが先に見つかってしまうのでtfenvのパスを先にする\n\n### 切り替え、使用\n\n```\n$ tfenv install 0.14.6\n$ tfenv use 0.14.6\n$ terraform --version\nTerraform v0.14.6\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-02-13",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "tfenvを使いTerraformのバージョンを切り替える",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Terraform", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "tfenv",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/tfenv/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/zx_arguments/",
          "text": "\n```shell\nzx query.mjs hoge\n[\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/node',\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/zx',\n  'query.mjs',\n  'hoge'\n]\n```\n\n普通のnodeスクリプトだと`process.argv.slice(2)`でコマンドライン引数のリストを取得するが、zxの場合には`process.argv.slice(3)`になる\n",
          "date": "2022-06-21",
          "title": "zx使用時のコマンドライン引数のリスト",
          "tags": ["zx", "JavaScript"],
          "description": "process.argv",
          "slug": "/entries/zx_arguments/",
          "timeToRead": 1,
          "objectID": "949f37a7-3fa6-51ed-9f67-66d6346e744c",
          "_snippetResult": {
            "text": {
              "value": "\n```shell\nzx query.<em>m</em>js hoge\n[\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/node',\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/zx',\n  'query.<em>m</em>js',\n  'hoge'\n]\n```\n\n普通のnodeスクリプトだと`process.argv.slice(2)`でコマン",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/zx_arguments/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n```shell\nzx query.<em>m</em>js hoge\n[\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/node',\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/zx',\n  'query.<em>m</em>js',\n  'hoge'\n]\n```\n\n普通のnodeスクリプトだと`process.argv.slice(2)`でコマンドライン引数のリストを取得するが、zxの場合には`process.argv.slice(3)`になる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-06-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "zx使用時のコマンドライン引数のリスト",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "zx", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "process.argv",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/zx_arguments/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/javascript_destructuring_assignment/",
          "text": "\n[分割代入 - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n## 連想配列\n\nできるのは知ってたけどGatsbyのチュートリアル動画を見てたら下記のような代入をしていてなるほどとなったのでメモ\n\n```javascript\n> const response = {code: 200, body: {name: 'hoge', id: 1}}\nundefined\n> response\n{ code: 200, body: { name: 'hoge', id: 1 } }\n> const { name } = response.body\nundefined\n> name\n'hoge'\n\n// 下記と同様\n> const name2 = response.body.name\nundefined\n> name2\n'hoge'\n```\n\n例のパターンだとどちらでも良いといえば良いが多少スッキリする\n\nまた、複数代入したいみたいなときは有効かなと感じる\n\n```javascript\n> const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};\nundefined\n> a\n10\n> b\n20\n> rest\n{ c: 30, d: 40 }\n```\n\n`...rest`で残りの連想配列も代入できるのが地味に良い\n\n## 配列\n\n```javascript\n> const [a, b, ...rest] = [10, 20, 30, 40, 50];\nundefined\n> a\n10\n> b\n20\n> rest\n[ 30, 40, 50 ]\n```\n\nこちらも`...rest`で残りの要素を代入できる\n\n直近だとGoogleFormsの解答結果を集計する際に相性が良かった\n\nスプレッドシートのデータ扱う場合は基本的に2次元配列であることと、A列のデータは○、B列のデータは△みたいに固定になっていることが多いのでそれを分割代入で代入してよしなにやるパターンでサッと書ける\n\n便利さを実感したので今後意識しておこうと思った\n",
          "date": "2021-08-12",
          "title": "JavaScriptの分割代入",
          "tags": ["JavaScript"],
          "description": "メモ",
          "slug": "/entries/javascript_destructuring_assignment/",
          "timeToRead": 1,
          "objectID": "5db7c80c-6692-5591-ac07-32031398a4be",
          "_snippetResult": {
            "text": {
              "value": "\n[分割代入 - JavaScript | <em>M</em>DN](https://developer.<em>m</em>ozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n## 連想配列\n\nできるのは知ってたけどGatsbyのチュートリアル動画を見てたら",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/javascript_destructuring_assignment/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n[分割代入 - JavaScript | <em>M</em>DN](https://developer.<em>m</em>ozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n## 連想配列\n\nできるのは知ってたけどGatsbyのチュートリアル動画を見てたら下記のような代入をしていてなるほどとなったのでメモ\n\n```javascript\n> const response = {code: 200, body: {name: 'hoge', id: 1}}\nundefined\n> response\n{ code: 200, body: { name: 'hoge', id: 1 } }\n> const { name } = response.body\nundefined\n> name\n'hoge'\n\n// 下記と同様\n> const name2 = response.body.name\nundefined\n> name2\n'hoge'\n```\n\n例のパターンだとどちらでも良いといえば良いが多少スッキリする\n\nまた、複数代入したいみたいなときは有効かなと感じる\n\n```javascript\n> const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};\nundefined\n> a\n10\n> b\n20\n> rest\n{ c: 30, d: 40 }\n```\n\n`...rest`で残りの連想配列も代入できるのが地味に良い\n\n## 配列\n\n```javascript\n> const [a, b, ...rest] = [10, 20, 30, 40, 50];\nundefined\n> a\n10\n> b\n20\n> rest\n[ 30, 40, 50 ]\n```\n\nこちらも`...rest`で残りの要素を代入できる\n\n直近だとGoogleFormsの解答結果を集計する際に相性が良かった\n\nスプレッドシートのデータ扱う場合は基本的に2次元配列であることと、A列のデータは○、B列のデータは△みたいに固定になっていることが多いのでそれを分割代入で代入してよしなにやるパターンでサッと書ける\n\n便利さを実感したので今後意識しておこうと思った\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-08-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "JavaScriptの分割代入",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "メモ",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/javascript_destructuring_assignment/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/dd/",
          "text": "\n```shell\n$ dd if=/dev/zero of=1K_M.out bs=1K count=1\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000412943 s, 2.5 MB/s\n```\n\n```\n$ ls -al 1K_M.out\n-rw-rw-r-- 1 vagrant vagrant 1024 Oct 24 04:46 1K_M.out\n```\n\nディスク的には4KBで固定のよう\n\n```\n$ du -sh 1K_M.out\n4.0K    1K_M.out\n```\n\n`1K_M.out`というファイル名にnull文字で埋める、1KBで1ファイル作成する\n\n容量によって確認したいことが変わる場合など容量を合わせていくの意外と面倒だったりするのでそういうときに使える\n",
          "date": "2020-10-23",
          "title": "特定の容量のダミーファイルを生成する",
          "tags": ["Command"],
          "description": "dd",
          "slug": "/entries/dd/",
          "timeToRead": 1,
          "objectID": "d63f5431-3ba6-5a2b-ab2b-593c03496128",
          "_snippetResult": {
            "text": {
              "value": "<em>M</em>.out bs=1K count=1\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000412943 s, 2.5 <em>M</em>B/s\n```\n\n```\n$ ls -al 1K_<em>M</em>.out\n-rw-rw-r-- 1 vagrant vagrant 1024 Oct 24 04:46 1K_<em>M</em>.out\n```\n\nディス",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/dd/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n```shell\n$ dd if=/dev/zero of=1K_<em>M</em>.out bs=1K count=1\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000412943 s, 2.5 <em>M</em>B/s\n```\n\n```\n$ ls -al 1K_<em>M</em>.out\n-rw-rw-r-- 1 vagrant vagrant 1024 Oct 24 04:46 1K_<em>M</em>.out\n```\n\nディスク的には4KBで固定のよう\n\n```\n$ du -sh 1K_<em>M</em>.out\n4.0K    1K_<em>M</em>.out\n```\n\n`1K_<em>M</em>.out`というファイル名にnull文字で埋める、1KBで1ファイル作成する\n\n容量によって確認したいことが変わる場合など容量を合わせていくの意外と面倒だったりするのでそういうときに使える\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-10-23",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "特定の容量のダミーファイルを生成する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Command", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "dd",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/dd/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gh_cli_add_scope/",
          "text": "\n[gh auth login | GitHub CLI](https://cli.github.com/manual/gh_auth_login)\n\nghコマンドの権限周りで何か怒られた場合はこの操作で権限を追加する\n\n変更するためには再度ログインが必要\n\n- プロジェクトへのread権限、codespaceへのread/write権限を追加する図\n\n```\ngh auth login --scopes 'read:project,codespace'\n```\n\nGraphQLでいうProjectV2（GitHub Issues beta）へのアクセスには`project`への権限が必要\n\nGitHub CLI自体はOAuthで認証しているのでスコープの指定方法は次のドキュメントを参照すればよさそう\n\n[OAuth Appのスコープ - GitHub Docs](https://docs.github.com/ja/developers/apps/building-oauth-apps/scopes-for-oauth-apps)",
          "date": "2022-07-04",
          "title": "GitHub CLIコマンドでscopeを設定する",
          "tags": ["GitHub CLI", "GitHub"],
          "description": "--scopes",
          "slug": "/entries/gh_cli_add_scope/",
          "timeToRead": 1,
          "objectID": "bdf57954-32b4-52e6-80cc-b0ed133dc7f8",
          "_snippetResult": {
            "text": {
              "value": "\n[gh auth login | GitHub CLI](https://cli.github.com/<em>m</em>anual/gh_auth_login)\n\nghコマンドの権限周りで何か怒られた場合はこの操作で権限を追加する\n\n変更する",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gh_cli_add_scope/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n[gh auth login | GitHub CLI](https://cli.github.com/<em>m</em>anual/gh_auth_login)\n\nghコマンドの権限周りで何か怒られた場合はこの操作で権限を追加する\n\n変更するためには再度ログインが必要\n\n- プロジェクトへのread権限、codespaceへのread/write権限を追加する図\n\n```\ngh auth login --scopes 'read:project,codespace'\n```\n\nGraphQLでいうProjectV2（GitHub Issues beta）へのアクセスには`project`への権限が必要\n\nGitHub CLI自体はOAuthで認証しているのでスコープの指定方法は次のドキュメントを参照すればよさそう\n\n[OAuth Appのスコープ - GitHub Docs](https://docs.github.com/ja/developers/apps/building-oauth-apps/scopes-for-oauth-apps)",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-07-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub CLIコマンドでscopeを設定する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GitHub CLI",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "--scopes",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gh_cli_add_scope/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 109,
      "page": 0,
      "nbPages": 6,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": { "nbHits": true, "typo": true },
      "query": "m",
      "params": "facets=%5B%5D&query=m&tagFilters=",
      "index": "til",
      "renderingContent": {},
      "processingTimeMS": 9,
      "processingTimingsMS": {
        "afterFetch": {
          "format": { "highlighting": 3, "snippeting": 4, "total": 8 },
          "total": 8
        },
        "total": 9
      }
    },
    {
      "hits": [
        {
          "title": "MkDocsにプレゼンテーション機能をつける",
          "date": "2016-03-02",
          "slug": "other/mkdocs_remark",
          "url": "http://localhost:8001/other/mkdocs_remark",
          "section": "other/mkdocs_remark",
          "tags": ["other", "JavaScript", "MkDocs"],
          "text": "# MkDocsにプレゼンテーション機能をつける\n\n今回はMkDocsで生成したサイト内にプレゼンテーション機能を追加してみます\n\n## 動機\n\n- MkDocsでスライド用資料も管理したい\n- 資料とプレゼンを一ヵ所で閲覧できるようにしたい(某wikiと同様)\n\nということで、少し調べてみた結果割と簡単にできそうだったのでやってみました\n\nMkDocsのインストール、カスタマイズは下記から\n\n[MkDocsでドキュメント管理](http://swfz.hatenablog.com/entry/2015/07/28/031712)\n\n## remark.js\n\nmarkdownプレゼンで使うのは[remark.js](http://remarkjs.com/)を使います\n\n理由は下記\n\n- jsとMarkdownを分離できる\n- buildが必要ない\n- ツール専用の書式を追加しなくて良い\n    - カスタマイズをしない場合\n\nHTMLとMarkdownを分離して書けるのが良いところ\n\nまたレイアウトなどもCSSを読み込ませればいくらでもカスタマイズできるようなのであらかじめいくつか用意すればバリエーションは増やせそう\n\n今回は特にCSSまでは手を出しません\n\n## slide用のページを作成する\n### 共通ページを用意\n\n`/slide/`のパスでスライド用のページを用意します\n\n- mkdocs.yml\n\n```\npages:\n+   - 'slide': 'slide.md'\n```\n\n- docs/slide.md\n\n```\npagetype: slide\n```\n\n\n- custom/content.html\n\n```\n{% if meta.pagetype|join(\"\") == 'slide' %}\n  {% include \"slide.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\nmeta情報をテンプレート側で参照できるのでそれを使って読み込む対象を変えます\n\nカスタムテーマを使っているのでもはやフロントで行えることは何でもできるのですが…\n\n- custom/slide.html\n\nこのページでremark.jsの読み込みとmdファイルの読み込みを行います\n\n各ページからのURLにクエリパラメータを付与してあげてそれを元に対象のMarkdownファイルを特定します\n\nbodyのstyleを上書きしているのはremarkのプレゼンではpaddingが必要ないので打ち消すため\n\n```html\n<script src=\"http://gnab.github.io/remark/downloads/remark-latest.min.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\nvar params         = parseParams();\nvar locationStr    = location.toString().replace(/\\/slide.*/, \"\");\nvar mdFileLocation = paramToMdFileLocation(locationStr,params);\n\ndocument.getElementsByTagName('body')[0].setAttribute(\"style\",\"padding-top:0px\");\nvar slideshow = remark.create({\n  sourceUrl: mdFileLocation\n});\n\nfunction paramToMdFileLocation(locationStr,params){\n  var mdFileLocation = ( params[\"c\"] ) ?\n    ( params[\"n\"] )\n      ? locationStr + \"/\" + params[\"c\"] + \"/\" + params[\"n\"] + \".md\"\n      : locationStr + \"/\" + params[\"c\"] + \".md\"\n    : '/notfound.md';\n\n  return mdFileLocation;\n}\n\nfunction parseParams(){\n  var queryStr = window.location.search;\n  var queryStrings = queryStr.slice(1).split('&');\n  var params = [];\n\n  queryStrings.forEach(function(query){\n    var keyValue = query.split('=');\n    params[ keyValue[0] ] = keyValue[1];\n  });\n\n  return params;\n}\n</script>\n```\n\n## 各記事の修正\n### スライドページへのリンクを作成\n\n各ページからのリンクを生成します\n\n各ページの共通部分なのでcontent.htmlに追記します\n\n現在のページの情報を`{{ current_page }}`で参照できるのでそれを正規表現で分解してあげてMarkdownファイルのパスを取得させます\n\nサブカテゴリがある場合にも対応させました\n\n- content.html\n\n```\n<a id=\"slideLink\">\n  <span class=\"label label-info\">Presentation Mode</span>\n</a>\n\n<script type=\"text/javascript\">\nvar current = (function() {/*\n\"{{ current_page }}\"\n*/}).toString();\nvar path = ( current.match(\" - / \") )\n    ? 'index'\n    : current.replace(/\\n|\\r/g, \"\").replace(/.*- \\/(.*)\\/(.*)\\/.*$/g, \"$1\");\nvar params = path.split(\"/\");\nvar linkElement = document.getElementById(\"slideLink\");\nvar locationStr = location.toString();\nparams.forEach(function(p){\n  locationStr = locationStr.replace(\"/\" + p,'');\n});\nvar slideLocationStr = ( locationStr + \"/slide/\" ).replace(\"//slide\", \"/slide\");\nif ( params[1] ) {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] + \"&n=\" + params[1] );\n}\nelse {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] );\n}\n</script>\n\n....\n....\n{{ content }}\n....\n....\n```\n\n### baseテンプレートの修正\n\n- base.html\n\nサイト内の検索機能を提供するsearch.jsの読み込みでrequire.jsを使っていて、remark.jsでも使用していて競合していました\n\nスライドページの表示ではそもそも検索機能を提供はしないのでページによって読み込むjsを制御できるように修正します\n\nblockで囲む範囲を広げて通常ページとスライド用ページで読み込むjsを分割しました\n\n```\n{% block content %}\n{% if meta.manage|join(\"\") == 'slide' %}\n  {% include \"content.html\" %}\n{% else %}\n  {% include \"content.html\" %}\n  {# footerの描画処理 }\n  {# jsの読み込み処理 }\n  <script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"></script>\n{% endif %}\n{% endblock %}\n```\n\n## patchを当てる\n\nremark.jsではMarkdownファイルが必要なので読み込ませられる場所に配置してあげる必要がありました\n\nこれに関してはフロントだけでは解決できなかったのでやむなくパッチを作って当てました\n\n<script src=\"https://gist.github.com/swfz/e7d285150aed3397938e.js\"></script>\n\n```\ncd ~/.anyenv/envs/pyenv/versions/2.7.10/lib/python2.7/site-packages/mkdocs/utils\npatch -p1 < remark_slide.patch\n```\n\n## 記事の編集\n\nスライドの区切り`---`を追加してあげると各ページのリンクから\n\n![text](mkdocs_remark02.PNG)\n\n見事スライドも見せることができるようになりました\n\n![text](mkdocs_remark01.PNG)\n\n\n## まとめ\n\n割と簡単に実装できましたが色々残念な部分も残ってしまいました\n\n- serveモードでは実現できない(mdファイルが読み込めない)\n- フロントのコードをちょっとサボったため`.md`のファイルしか読み込めない(mkdocsでは他の拡張子も対応している)\n- スライドの方はCSSを適用させていないので簡素な感じ\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n何個か上げてみましたが、研修で資料とプレゼン資料を兼ねたい場合などに使えそうに思います\n\nただ、実際にremark.jsを使ってスライドを作っていないので実際にやってみたら不便があるかもしれません…\n\n良くあるHTMLスライドでスライド専用の記述をしなくてはならなくなるのが嫌だったので、それをせずにカスタマイズをどのくらいできるか今後試してみたいと思います\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n最後にサンプルへのリンクを張っておわり\n\n[mkdocs_sample](http://swfz.github.io/mkdocs_sample/)\n\n\n",
          "objectID": "other/mkdocs_remark",
          "_snippetResult": {
            "text": {
              "value": "var locationStr    = location.toString().replace(/\\/slide.*/, \"\");\nvar __ais-highlight__m__/ais-highlight__dFileLocation = paramToMdFileLocation(locationStr,params);\n\ndocument.getElementsByTagName('body')[0].setAttribute(\"style\",\"padding-top:0px\");\nvar slideshow = remark.create({\n  sourceUrl: __ais-highlight__m__/ais-highlight__dFileLocation\n});\n\nfunction paramToMdFileLocation(locationStr,params){\n  var __ais-highlight__m__/ais-highlight__dFileLocation = ( params[\"c\"] ) ?\n    ( params[\"n\"] )\n      ? locationStr + \"/\" + params[\"c\"] + \"/\" + params[\"n\"] + \".__ais-highlight__m__/ais-highlight__d\"\n      : locationStr + \"/\" + params[\"c\"] + \".__ais-highlight__m__/ais-highlight__d\"\n    : '/notfound.__ais-highlight__m__/ais-highlight__d';\n\n  return __ais-highlight__m__/ais-highlight__dFileLocation",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__kDocsにプレゼンテーション機能をつける",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2016-03-02",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_remark",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/other/__ais-highlight__m__/ais-highlight__kdocs_remark",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_remark",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "other", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "__ais-highlight__M__/ais-highlight__kDocs",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__kDocsにプレゼンテーション機能をつける\n\n今回は__ais-highlight__M__/ais-highlight__kDocsで生成したサイト内にプレゼンテーション機能を追加してみます\n\n## 動機\n\n- __ais-highlight__M__/ais-highlight__kDocsでスライド用資料も管理したい\n- 資料とプレゼンを一ヵ所で閲覧できるようにしたい(某wikiと同様)\n\nということで、少し調べてみた結果割と簡単にできそうだったのでやってみました\n\n__ais-highlight__M__/ais-highlight__kDocsのインストール、カスタマイズは下記から\n\n[__ais-highlight__M__/ais-highlight__kDocsでドキュメント管理](http://swfz.hatenablog.com/entry/2015/07/28/031712)\n\n## remark.js\n\n__ais-highlight__m__/ais-highlight__arkdownプレゼンで使うのは[remark.js](http://remarkjs.com/)を使います\n\n理由は下記\n\n- jsと__ais-highlight__M__/ais-highlight__arkdownを分離できる\n- buildが必要ない\n- ツール専用の書式を追加しなくて良い\n    - カスタマイズをしない場合\n\nHTMLと__ais-highlight__M__/ais-highlight__arkdownを分離して書けるのが良いところ\n\nまたレイアウトなどもCSSを読み込ませればいくらでもカスタマイズできるようなのであらかじめいくつか用意すればバリエーションは増やせそう\n\n今回は特にCSSまでは手を出しません\n\n## slide用のページを作成する\n### 共通ページを用意\n\n`/slide/`のパスでスライド用のページを用意します\n\n- __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```\npages:\n+   - 'slide': 'slide.__ais-highlight__m__/ais-highlight__d'\n```\n\n- docs/slide.__ais-highlight__m__/ais-highlight__d\n\n```\npagetype: slide\n```\n\n\n- custom/content.html\n\n```\n{% if __ais-highlight__m__/ais-highlight__eta.pagetype|join(\"\") == 'slide' %}\n  {% include \"slide.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\n__ais-highlight__m__/ais-highlight__eta情報をテンプレート側で参照できるのでそれを使って読み込む対象を変えます\n\nカスタムテーマを使っているのでもはやフロントで行えることは何でもできるのですが…\n\n- custom/slide.html\n\nこのページでremark.jsの読み込みと__ais-highlight__m__/ais-highlight__dファイルの読み込みを行います\n\n各ページからのURLにクエリパラメータを付与してあげてそれを元に対象の__ais-highlight__M__/ais-highlight__arkdownファイルを特定します\n\nbodyのstyleを上書きしているのはremarkのプレゼンではpaddingが必要ないので打ち消すため\n\n```html\n<script src=\"http://gnab.github.io/remark/downloads/remark-latest.min.js\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\nvar params         = parseParams();\nvar locationStr    = location.toString().replace(/\\/slide.*/, \"\");\nvar __ais-highlight__m__/ais-highlight__dFileLocation = paramToMdFileLocation(locationStr,params);\n\ndocument.getElementsByTagName('body')[0].setAttribute(\"style\",\"padding-top:0px\");\nvar slideshow = remark.create({\n  sourceUrl: __ais-highlight__m__/ais-highlight__dFileLocation\n});\n\nfunction paramToMdFileLocation(locationStr,params){\n  var __ais-highlight__m__/ais-highlight__dFileLocation = ( params[\"c\"] ) ?\n    ( params[\"n\"] )\n      ? locationStr + \"/\" + params[\"c\"] + \"/\" + params[\"n\"] + \".__ais-highlight__m__/ais-highlight__d\"\n      : locationStr + \"/\" + params[\"c\"] + \".__ais-highlight__m__/ais-highlight__d\"\n    : '/notfound.__ais-highlight__m__/ais-highlight__d';\n\n  return __ais-highlight__m__/ais-highlight__dFileLocation;\n}\n\nfunction parseParams(){\n  var queryStr = window.location.search;\n  var queryStrings = queryStr.slice(1).split('&');\n  var params = [];\n\n  queryStrings.forEach(function(query){\n    var keyValue = query.split('=');\n    params[ keyValue[0] ] = keyValue[1];\n  });\n\n  return params;\n}\n</script>\n```\n\n## 各記事の修正\n### スライドページへのリンクを作成\n\n各ページからのリンクを生成します\n\n各ページの共通部分なのでcontent.htmlに追記します\n\n現在のページの情報を`{{ current_page }}`で参照できるのでそれを正規表現で分解してあげて__ais-highlight__M__/ais-highlight__arkdownファイルのパスを取得させます\n\nサブカテゴリがある場合にも対応させました\n\n- content.html\n\n```\n<a id=\"slideLink\">\n  <span class=\"label label-info\">Presentation __ais-highlight__M__/ais-highlight__ode</span>\n</a>\n\n<script type=\"text/javascript\">\nvar current = (function() {/*\n\"{{ current_page }}\"\n*/}).toString();\nvar path = ( current.__ais-highlight__m__/ais-highlight__atch(\" - / \") )\n    ? 'index'\n    : current.replace(/\\n|\\r/g, \"\").replace(/.*- \\/(.*)\\/(.*)\\/.*$/g, \"$1\");\nvar params = path.split(\"/\");\nvar linkElement = document.getElementById(\"slideLink\");\nvar locationStr = location.toString();\nparams.forEach(function(p){\n  locationStr = locationStr.replace(\"/\" + p,'');\n});\nvar slideLocationStr = ( locationStr + \"/slide/\" ).replace(\"//slide\", \"/slide\");\nif ( params[1] ) {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] + \"&n=\" + params[1] );\n}\nelse {\n  linkElement.setAttribute(\"href\", slideLocationStr + \"?c=\" + params[0] );\n}\n</script>\n\n....\n....\n{{ content }}\n....\n....\n```\n\n### baseテンプレートの修正\n\n- base.html\n\nサイト内の検索機能を提供するsearch.jsの読み込みでrequire.jsを使っていて、remark.jsでも使用していて競合していました\n\nスライドページの表示ではそもそも検索機能を提供はしないのでページによって読み込むjsを制御できるように修正します\n\nblockで囲む範囲を広げて通常ページとスライド用ページで読み込むjsを分割しました\n\n```\n{% block content %}\n{% if __ais-highlight__m__/ais-highlight__eta.__ais-highlight__m__/ais-highlight__anage|join(\"\") == 'slide' %}\n  {% include \"content.html\" %}\n{% else %}\n  {% include \"content.html\" %}\n  {# footerの描画処理 }\n  {# jsの読み込み処理 }\n  <script data-main=\"{{ base_url }}/mkdocs/js/search.js\" src=\"{{ base_url }}/mkdocs/js/require.js\"></script>\n{% endif %}\n{% endblock %}\n```\n\n## patchを当てる\n\nremark.jsでは__ais-highlight__M__/ais-highlight__arkdownファイルが必要なので読み込ませられる場所に配置してあげる必要がありました\n\nこれに関してはフロントだけでは解決できなかったのでやむなくパッチを作って当てました\n\n<script src=\"https://gist.github.com/swfz/e7d285150aed3397938e.js\"></script>\n\n```\ncd ~/.anyenv/envs/pyenv/versions/2.7.10/lib/python2.7/site-packages/__ais-highlight__m__/ais-highlight__kdocs/utils\npatch -p1 < remark_slide.patch\n```\n\n## 記事の編集\n\nスライドの区切り`---`を追加してあげると各ページのリンクから\n\n![text](__ais-highlight__m__/ais-highlight__kdocs_remark02.PNG)\n\n見事スライドも見せることができるようになりました\n\n![text](__ais-highlight__m__/ais-highlight__kdocs_remark01.PNG)\n\n\n## まとめ\n\n割と簡単に実装できましたが色々残念な部分も残ってしまいました\n\n- serveモードでは実現できない(__ais-highlight__m__/ais-highlight__dファイルが読み込めない)\n- フロントのコードをちょっとサボったため`.__ais-highlight__m__/ais-highlight__d`のファイルしか読み込めない(__ais-highlight__m__/ais-highlight__kdocsでは他の拡張子も対応している)\n- スライドの方はCSSを適用させていないので簡素な感じ\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n何個か上げてみましたが、研修で資料とプレゼン資料を兼ねたい場合などに使えそうに思います\n\nただ、実際にremark.jsを使ってスライドを作っていないので実際にやってみたら不便があるかもしれません…\n\n良くあるHTMLスライドでスライド専用の記述をしなくてはならなくなるのが嫌だったので、それをせずにカスタマイズをどのくらいできるか今後試してみたいと思います\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n最後にサンプルへのリンクを張っておわり\n\n[__ais-highlight__m__/ais-highlight__kdocs_sample](http://swfz.github.io/__ais-highlight__m__/ais-highlight__kdocs_sample/)\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "mkdocsの検索を日本語に対応させてみる",
          "date": "2016-02-22",
          "slug": "other/mkdocs_jp",
          "url": "http://localhost:8001/other/mkdocs_jp",
          "section": "other/mkdocs_jp",
          "tags": ["other", "MkDocs", "JavaScript"],
          "text": "# MkDocsの検索を日本語に対応させてみる\n\nMkDocsのサイト内検索で日本語検索に対応していないという話があったので対応させたいなと思い調べてみた\n\n中身を読んだらlunrという全文検索ライブラリを用いているよう\n\njekyllにもlunr.jsを使ったプラグインがあるようで結構有名なのかな\n\nで、このlunr.jsがデフォルトだと日本語での検索に対応していない\n\nしかし、幸いなことに日本語対応の方法もすでにあるらしいので、下記を参考に対応してみる\n\n## [lunr-languages](https://github.com/MihaiValentin/lunr-languages )\n\nlunr.jsの多言語対応用ライブラリ\n\nサイトにしたがって修正していけば日本語にも対応できそう\n\n見ながら修正した結果無事日本語検索ができるようになりました\n\n![text](mkdocs_jp01.PNG)\n\nなので既存のmkdocsのsearch.jsに対してのパッチを作った\n\n<script src=\"https://gist.github.com/swfz/95d003b7ae4f3ec26909.js\"></script>\n\nこれで日本語検索もできるようになりました!めでたしめでたし!\n\n## 課題\n\n検索できました、良かった!と思ったのですがとても重い\n\nすべての画面でjsの読み込みが発生していてページ遷移するたびに10秒くらい待たされてブラウザ上で操作できない\n\nプロファイルをとってみると上記で入れたtinysegmenterというのが悪さをしているよう、再帰呼び出しをしていてとても重くなっているところまで判明しました\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nリファクタリングするかとも思ったけど、中身見た感じ ~~ 正直よく分からない ~~ 時間かかりそうだったのでいったん検索のモーダルが表示された段階(検索機能を使用する)でjsを読み込むように変更しました\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n- custom/js/baes.js\n\n```\n+ function loadSearchJs(){\n+   var scriptElement = document.createElement('script');\n+   scriptElement.setAttribute('data-main', base_url + \"/mkdocs/js/search.js\");\n+   scriptElement.src = base_url + \"/mkdocs/js/require.js\";\n+   document.body.appendChild(scriptElement);\n+ }\n\n.....\n.....\n.....\n\n    // make sure search input gets autofocus everytime modal opens.\n    $search_modal.on('shown.bs.modal', function () {\n+      loadSearchJs();\n        $search_modal.find('#mkdocs-search-query').focus();\n    });\n```\n\n根本解決にはなっていないのですが、毎度ページが読み込まれるたびに固まることはなくなったので少しは使えるように\n\n`site/mkdocs/search_index.json`というファイルにすべての記事のインデックス情報が格納されていて現状16Mあったので、そりゃ重くなるわな、、、といったところ\n\n他の小さいサンプルで試したらさくさく動いてくれたのでどのくらいで重くなってくるのかはちょっと気になるところです\n\nということで、文書量の問題というクリティカルな問題を残したままw\n\n規模が大きくなってきたらそもそもクライアント側だけでっていうのは難しいですね\n\n何かアドバイスなどあれば教えていただきたいです!\n\nで、今回行ったことをgh-pagesにあげて終わり\n\n他にも機能足したけどそれはまた後日に\n\n[mkdocs_sample](http://swfz.github.io/mkdocs_sample/)\n\n\n",
          "objectID": "other/mkdocs_jp",
          "_snippetResult": {
            "text": {
              "value": "document.createElement('script');\n+   scriptElement.setAttribute('data-__ais-highlight__m__/ais-highlight__ain', base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/search.js\");\n+   scriptElement.src = base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/require.js\";\n+   document.body.appendChild(scriptElement);\n+ }\n\n.....\n.....\n.....\n\n    // __ais-highlight__m__/ais-highlight__ake sure search input gets autofocus everytime __ais-highlight__m__/ais-highlight__odal opens.\n    $search___ais-highlight__m__/ais-highlight__odal.on('shown.bs.__ais-highlight__m__/ais-highlight__odal', function () {\n+      loadSearchJs();\n        $search___ais-highlight__m__/ais-highlight__odal.find('#__ais-highlight__m__/ais-highlight__kdocs-search-query').focus();\n    });\n```\n\n根",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__kdocsの検索を日本語に対応させてみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2016-02-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_jp",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/other/__ais-highlight__m__/ais-highlight__kdocs_jp",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs_jp",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "other", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__M__/ais-highlight__kDocs",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__kDocsの検索を日本語に対応させてみる\n\n__ais-highlight__M__/ais-highlight__kDocsのサイト内検索で日本語検索に対応していないという話があったので対応させたいなと思い調べてみた\n\n中身を読んだらlunrという全文検索ライブラリを用いているよう\n\njekyllにもlunr.jsを使ったプラグインがあるようで結構有名なのかな\n\nで、このlunr.jsがデフォルトだと日本語での検索に対応していない\n\nしかし、幸いなことに日本語対応の方法もすでにあるらしいので、下記を参考に対応してみる\n\n## [lunr-languages](https://github.com/__ais-highlight__M__/ais-highlight__ihaiValentin/lunr-languages )\n\nlunr.jsの多言語対応用ライブラリ\n\nサイトにしたがって修正していけば日本語にも対応できそう\n\n見ながら修正した結果無事日本語検索ができるようになりました\n\n![text](__ais-highlight__m__/ais-highlight__kdocs_jp01.PNG)\n\nなので既存の__ais-highlight__m__/ais-highlight__kdocsのsearch.jsに対してのパッチを作った\n\n<script src=\"https://gist.github.com/swfz/95d003b7ae4f3ec26909.js\"></script>\n\nこれで日本語検索もできるようになりました!めでたしめでたし!\n\n## 課題\n\n検索できました、良かった!と思ったのですがとても重い\n\nすべての画面でjsの読み込みが発生していてページ遷移するたびに10秒くらい待たされてブラウザ上で操作できない\n\nプロファイルをとってみると上記で入れたtinysegmenterというのが悪さをしているよう、再帰呼び出しをしていてとても重くなっているところまで判明しました\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nリファクタリングするかとも思ったけど、中身見た感じ ~~ 正直よく分からない ~~ 時間かかりそうだったのでいったん検索のモーダルが表示された段階(検索機能を使用する)でjsを読み込むように変更しました\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n- custom/js/baes.js\n\n```\n+ function loadSearchJs(){\n+   var scriptElement = document.createElement('script');\n+   scriptElement.setAttribute('data-__ais-highlight__m__/ais-highlight__ain', base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/search.js\");\n+   scriptElement.src = base_url + \"/__ais-highlight__m__/ais-highlight__kdocs/js/require.js\";\n+   document.body.appendChild(scriptElement);\n+ }\n\n.....\n.....\n.....\n\n    // __ais-highlight__m__/ais-highlight__ake sure search input gets autofocus everytime __ais-highlight__m__/ais-highlight__odal opens.\n    $search___ais-highlight__m__/ais-highlight__odal.on('shown.bs.__ais-highlight__m__/ais-highlight__odal', function () {\n+      loadSearchJs();\n        $search___ais-highlight__m__/ais-highlight__odal.find('#__ais-highlight__m__/ais-highlight__kdocs-search-query').focus();\n    });\n```\n\n根本解決にはなっていないのですが、毎度ページが読み込まれるたびに固まることはなくなったので少しは使えるように\n\n`site/__ais-highlight__m__/ais-highlight__kdocs/search_index.json`というファイルにすべての記事のインデックス情報が格納されていて現状16Mあったので、そりゃ重くなるわな、、、といったところ\n\n他の小さいサンプルで試したらさくさく動いてくれたのでどのくらいで重くなってくるのかはちょっと気になるところです\n\nということで、文書量の問題というクリティカルな問題を残したままw\n\n規模が大きくなってきたらそもそもクライアント側だけでっていうのは難しいですね\n\n何かアドバイスなどあれば教えていただきたいです!\n\nで、今回行ったことをgh-pagesにあげて終わり\n\n他にも機能足したけどそれはまた後日に\n\n[__ais-highlight__m__/ais-highlight__kdocs_sample](http://swfz.github.io/__ais-highlight__m__/ais-highlight__kdocs_sample/)\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "MkDocsでドキュメント管理",
          "date": "2015-07-28",
          "slug": "other/mkdocs",
          "url": "http://localhost:8001/other/mkdocs",
          "section": "other/mkdocs",
          "tags": ["other", "Markdown"],
          "text": "# MkDocsでドキュメント管理\n\nメモとか、ブログの原文とかをMarkdownで保存していたのですが、管理方法をどうしようかと思っていたところでたまたまMkDocsの話を耳にしたので試してみました\n\nカスタマイズや設定が簡単にできるし見た目も十分なのでローカルでのMarkdownドキュメント管理をMkDocsで行うことにしました\n\n[MkDdocs](http://www.mkdocs.org/ \"alt\")\n\nドキュメント読めばほとんど分かるし重複も発生しますが今回やったことを残しておきます\n\n# インストール\n\nたったこれだけ\n\nPythonは2.7.8?以上が必要らしいです\n\n```.sh\nsudo yum install python-setuptools\neasy_install pip\npip install mkdocs\n```\n\n# プロジェクト作成\n\n```.sh\nmkdocs new sample-project\ncd sample-project\ntree\n.\n|-- docs\n|   `-- index.md\n`-- mkdocs.yml\n```\n\n* mkdocs.ymlに各種設定を記述していきます\n\n* Markdownファイルはdocs以下に置いていきます\n\n# プレビュー\n\nローカルにサーバを起動できる\n\ndocs以下のファイルの変更を感知して自動でビルドしてくれます\n\nclient側でも自動で再読み込みしてくれる実装になっているので編集だけに集中できます\n\nこれだけでも入れる価値ありそうな気がします\n\n```\nmkdocs serve\n```\n\nVMにサーバを立ててる場合などはそのサーバのIPをオプションで渡してあげればアクセスできます\n\n```\nmkdocs serve --dev-addr=192.168.20.11:8000\n```\n\n# ビルド\n\n編集してきたMarkdownなどを静的ファイルに変換します\n\n```\nmkdocs build\n```\n\n静的ファイルたちがsiteディレクトリ以下に生成されます\n\nこれをnginxとかで配信すればサイトのできあがり! ちょっと感動\n\n\n# テーマ\n\nbuilt-in themesがいくつかあるのでそれを設定してしまうのが一番早いです\n\nデフォルトはmkdocs\n\n* mkdocs.yml\n\n```\ntheme: flatly\n```\n\n# 検索\n\nドキュメント内を検索できます、すごい\n\nただこれがあるのは一部のテーマのみのようです\n\n![search](mkdocs-01.PNG \"alt\")\n\nこんな感じで見出しに飛べるようです\n\n![search](mkdocs-02.PNG \"alt\")\n\n\n\n# カスタマイズ\n\n色々カスタマイズできるようなので色々試してみます\n\n## CSS,JavaScriptの設定変更\n\nカスタマイズの粒度もjsのみ、cssのみと色々設定できる模様\n\nファイルはdocs以下を探しに行く\n\n```\nextra_javascript: [sample.js]\nextra_css: [style.css]\n```\n\n## カスタムテーマ\n\nデフォルトで読んでくれていたテンプレートを読みいかず設定したディレクトリから静的ファイルを生成します\n\n* ディレクトリ構成\n\n```\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...\n```\n\n* mkdocs.yml\n\n```\ntheme_dir: 'custom_theme'\n```\n\n1から書くこともできますがさすがにあれなのでデフォルトのテーマをコピーしてそれを編集していきます\n\n[mkdocs themes](https://github.com/mkdocs/mkdocs/tree/master/mkdocs/themes \"alt\")\n\n今回はmkdocsの方のディレクトリから拝借しました\n\nファイルは下記\n\n* 404.html\n    * エラー\n* base.html\n    * ベース\n* nav.html\n    * ナビゲーション\n* nav-sub.html\n    * サブナビゲーション\n* toc.html\n    * 記事の左側のナビゲーション\n* content.html\n    * 記事本体\n\n![mkdocs](mkdocs-03.png )\n\n中身はjinja2のテンプレートエンジンで書かれているので文法覚えれば自由にカスタマイズできそうです\n\n\n## extra\n\n設定ファイルに`extra`として設定することで自由な変数をセットできます\n\n* mkdocs.yml\n\n```.yaml\nextra:\n    version: 1.0.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/\n```\n\n* 各テンプレートファイル\n\n```\n{{ config.extra.version }}\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}\n```\n\n## base.html\n### code syntax\n\nまずはコードシンタックスを変えてみます\n\n* [highlight.js](https://highlightjs.org/ \"alt\")を使ってみます\n\n### 参考\n* [Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう](http://sakueji.com/highlight-js/ \"Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう\")\n\n記事中のリンクから使いたいテーマを選んで読み込ませればいけるようですね\n\n* [highlight.js test](https://highlightjs.org/static/test.html \"alt\")\n\n* [highlight.js/src/styles at master · isagalaev/highlight.js · GitHub](https://github.com/isagalaev/highlight.js/tree/master/src/styles \"alt\")\n\n気分で変えられるように設定ファイルを変更すれば適用できるようにしました\n\n* mkdocs.yml\n\n```.yml\nextra:\n    highlightjs:\n        version: 8.6\n        syntax: atelier-sulphurpool.dark\n```\n\nテンプレート側ではこんな感じ\n\n* base.html\n\n```.html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/styles/{{ config.extra.highlightjs.syntax }}.min.css\"/>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/highlight.min.js\"></script>\n<script>\n$(document).ready(function() {\n    $('pre').each(function(i, block) {\n        hljs.highlightBlock(block);\n    });\n});\n</script>\n```\n\n## content.html\n### meta情報を設定する\n\nMarkdownのmeta情報として最初にいくつか記述してあげることでそれに応じた処理をさせることができる模様\n\nデフォルトでは下記のようにしてあげることで右上にラベルが出てくる\n\n公式ドキュメントではこれにGitHubへのリンクを張って直接飛べるようにすることもできるよっていう風なことが書いてありました\n\n* samaple.md\n\n```\nsource: sample.md\n        image.png\n```\n\n![meta](mkdocs-05.PNG)\n\n## toc.html\n### 見出しの追加\n\n目次の見出しはh1,h2のみ表示されるようになっているので表示範囲を増やしてh3まで表示させるようにしました\n\n* toc.html\n\n```\n<div class=\"bs-sidebar hidden-print affix well\" role=\"complementary\">\n  <ul class=\"nav bs-sidenav\">\n  {% for toc_item in toc %}\n    <li class=\"main {% if toc_item.active %}active{% endif %}\"><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n      <ul class=\"nav bs-sidenav\">\n      {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n          {% if toc_item.children %}\n          <ul >\n          {% for toc_item in toc_item.children %}\n              <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n          {% endfor %}\n          </ul>\n          {% endif %}\n        </li>\n      {% endfor %}\n      </ul>\n    </li>\n  {% endfor %}\n  </ul>\n</div>\n```\n\n## 特別ページの設置\n\ncontent.htmlで、{{ content }} を表示する前にファイルのmeta情報を参照していたので、集計用のページを設けることができそうだと思いやってみました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase,prh -->\nちょっとコンセプトとはずれてしまうので微妙かも知れませんが、こういうこともできるってところですね\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase,prh -->\n\n* repotページ用のMarkdownを用意、設定\n\nこのページはすべてテンプレート側で処理してしまうのでmeta情報だけ記述したMarkdownを用意します\n\n```\npagetype: report\n```\n\n* 公開前も含めたすべてのファイルの情報を記述したjsonファイルを用意\n\n* data.json\n\n```\n[\n  { \"title\": \"page1 title\", \"url\": \"category/sample1\", \"date\": \"2015-01-02\", \"type\": \"blog\" },\n  { \"title\": \"page2 title\", \"url\": \"category/sample2\", \"date\": \"2015-02-20\", \"type\": \"qiita\" },\n  { \"title\": \"page3 title\", \"url\": \"category/sample3\", \"date\": \"2015-03-23\", \"type\": \"blog\" }\n]\n```\n\n* content.htmlでコンテンツの呼び出し条件を分ける\n\n```\n{% if meta.pagetype|join(\"\") == 'report' %}\n  {% include \"report.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\n* 新たなテンプレートでデータを用いた集計ページ(report.html)を作成\n\n```\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/data.json\", false);\nreq.send(null);\nvar datalist = JSON.parse( req.responseText );\n```\n\nあとは用途に合わせて表示させるだけです\n\n今回はc3.jsというのを使ってみました、d3.jsのwrapperみたいな位置付けのようです\n\n[c3.js](http://c3js.org/)\n\nc3についてはまた今度、でもとても簡単に使えます\n\n![report](mkdocs-04.PNG )\n\n\n# 管理\n\nsite以下にファイルが生成されるのでGitで管理するには `.gitignore`に下記記述を行い管理するのが良いようです\n\n* .gitignore\n\n```\nsite/\n```\n\n静的ファイルのみで閲覧ができるのでS3にあげたりすれば下手にブログ立ててサーバ代かけるよりよっぽど良いですね\n\n# その他\n\n実際に使ってはないけど便利そうな機能\n\n* 設定ファイルでgoogle analyticsを設置できる\n* GitHub Pagesとの連携\n\n# 感想\n\n今回は公開とかはしない予定だったのでデプロイ関連まではやらなかったですがそんなに難しくはなさそうなイメージ\n\n目標立てて進捗グラフとかも作ればモチベーション維持にも一役買ってくれそう…?\n\n簡単なサイトならS3だけで済ませられるのでサーバいらないですね\n\n低予算万歳!\n\n他にも機会があれば使っていきたいなと思いました\n\n\n",
          "objectID": "other/mkdocs",
          "_snippetResult": {
            "text": {
              "value": "easy_install pip\npip install __ais-highlight__m__/ais-highlight__kdocs\n```\n\n# プロジェクト作成\n\n```.sh\n__ais-highlight__m__/ais-highlight__kdocs new sample-project\ncd sample-project\ntree\n.\n|-- docs\n|   `-- index.__ais-highlight__m__/ais-highlight__d\n`-- __ais-highlight__m__/ais-highlight__kdocs.yml\n```\n\n* __ais-highlight__m__/ais-highlight__kdocs.ymlに各種設定を記述していきます\n\n* __ais-highlight__M__/ais-highlight__arkdownファイルは",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__kDocsでドキュメント管理",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2015-07-28",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/other/__ais-highlight__m__/ais-highlight__kdocs",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__kdocs",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "other", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__kDocsでドキュメント管理\n\nメモとか、ブログの原文とかを__ais-highlight__M__/ais-highlight__arkdownで保存していたのですが、管理方法をどうしようかと思っていたところでたまたま__ais-highlight__M__/ais-highlight__kDocsの話を耳にしたので試してみました\n\nカスタマイズや設定が簡単にできるし見た目も十分なのでローカルでの__ais-highlight__M__/ais-highlight__arkdownドキュメント管理を__ais-highlight__M__/ais-highlight__kDocsで行うことにしました\n\n[__ais-highlight__M__/ais-highlight__kDdocs](http://www.__ais-highlight__m__/ais-highlight__kdocs.org/ \"alt\")\n\nドキュメント読めばほとんど分かるし重複も発生しますが今回やったことを残しておきます\n\n# インストール\n\nたったこれだけ\n\nPythonは2.7.8?以上が必要らしいです\n\n```.sh\nsudo yum install python-setuptools\neasy_install pip\npip install __ais-highlight__m__/ais-highlight__kdocs\n```\n\n# プロジェクト作成\n\n```.sh\n__ais-highlight__m__/ais-highlight__kdocs new sample-project\ncd sample-project\ntree\n.\n|-- docs\n|   `-- index.__ais-highlight__m__/ais-highlight__d\n`-- __ais-highlight__m__/ais-highlight__kdocs.yml\n```\n\n* __ais-highlight__m__/ais-highlight__kdocs.ymlに各種設定を記述していきます\n\n* __ais-highlight__M__/ais-highlight__arkdownファイルはdocs以下に置いていきます\n\n# プレビュー\n\nローカルにサーバを起動できる\n\ndocs以下のファイルの変更を感知して自動でビルドしてくれます\n\nclient側でも自動で再読み込みしてくれる実装になっているので編集だけに集中できます\n\nこれだけでも入れる価値ありそうな気がします\n\n```\n__ais-highlight__m__/ais-highlight__kdocs serve\n```\n\nVMにサーバを立ててる場合などはそのサーバのIPをオプションで渡してあげればアクセスできます\n\n```\n__ais-highlight__m__/ais-highlight__kdocs serve --dev-addr=192.168.20.11:8000\n```\n\n# ビルド\n\n編集してきた__ais-highlight__M__/ais-highlight__arkdownなどを静的ファイルに変換します\n\n```\n__ais-highlight__m__/ais-highlight__kdocs build\n```\n\n静的ファイルたちがsiteディレクトリ以下に生成されます\n\nこれをnginxとかで配信すればサイトのできあがり! ちょっと感動\n\n\n# テーマ\n\nbuilt-in themesがいくつかあるのでそれを設定してしまうのが一番早いです\n\nデフォルトは__ais-highlight__m__/ais-highlight__kdocs\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```\ntheme: flatly\n```\n\n# 検索\n\nドキュメント内を検索できます、すごい\n\nただこれがあるのは一部のテーマのみのようです\n\n![search](__ais-highlight__m__/ais-highlight__kdocs-01.PNG \"alt\")\n\nこんな感じで見出しに飛べるようです\n\n![search](__ais-highlight__m__/ais-highlight__kdocs-02.PNG \"alt\")\n\n\n\n# カスタマイズ\n\n色々カスタマイズできるようなので色々試してみます\n\n## CSS,JavaScriptの設定変更\n\nカスタマイズの粒度もjsのみ、cssのみと色々設定できる模様\n\nファイルはdocs以下を探しに行く\n\n```\nextra_javascript: [sample.js]\nextra_css: [style.css]\n```\n\n## カスタムテーマ\n\nデフォルトで読んでくれていたテンプレートを読みいかず設定したディレクトリから静的ファイルを生成します\n\n* ディレクトリ構成\n\n```\ndocs/\n    index.__ais-highlight__m__/ais-highlight__d\n    about.__ais-highlight__m__/ais-highlight__d\ncustom_theme/\n    base.html\n    ...\n```\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```\ntheme_dir: 'custom_theme'\n```\n\n1から書くこともできますがさすがにあれなのでデフォルトのテーマをコピーしてそれを編集していきます\n\n[__ais-highlight__m__/ais-highlight__kdocs themes](https://github.com/__ais-highlight__m__/ais-highlight__kdocs/__ais-highlight__m__/ais-highlight__kdocs/tree/__ais-highlight__m__/ais-highlight__aster/__ais-highlight__m__/ais-highlight__kdocs/themes \"alt\")\n\n今回は__ais-highlight__m__/ais-highlight__kdocsの方のディレクトリから拝借しました\n\nファイルは下記\n\n* 404.html\n    * エラー\n* base.html\n    * ベース\n* nav.html\n    * ナビゲーション\n* nav-sub.html\n    * サブナビゲーション\n* toc.html\n    * 記事の左側のナビゲーション\n* content.html\n    * 記事本体\n\n![__ais-highlight__m__/ais-highlight__kdocs](__ais-highlight__m__/ais-highlight__kdocs-03.png )\n\n中身はjinja2のテンプレートエンジンで書かれているので文法覚えれば自由にカスタマイズできそうです\n\n\n## extra\n\n設定ファイルに`extra`として設定することで自由な変数をセットできます\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```.yaml\nextra:\n    version: 1.0.0\n    links:\n        - https://github.com/__ais-highlight__m__/ais-highlight__kdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#__ais-highlight__m__/ais-highlight__kdocs\n        - http://www.__ais-highlight__m__/ais-highlight__kdocs.org/\n```\n\n* 各テンプレートファイル\n\n```\n{{ config.extra.version }}\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}\n```\n\n## base.html\n### code syntax\n\nまずはコードシンタックスを変えてみます\n\n* [highlight.js](https://highlightjs.org/ \"alt\")を使ってみます\n\n### 参考\n* [Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう](http://sakueji.com/highlight-js/ \"Crayonを捨てた。Syntax Highlightするならhighlight.jsが良さそう\")\n\n記事中のリンクから使いたいテーマを選んで読み込ませればいけるようですね\n\n* [highlight.js test](https://highlightjs.org/static/test.html \"alt\")\n\n* [highlight.js/src/styles at __ais-highlight__m__/ais-highlight__aster · isagalaev/highlight.js · GitHub](https://github.com/isagalaev/highlight.js/tree/__ais-highlight__m__/ais-highlight__aster/src/styles \"alt\")\n\n気分で変えられるように設定ファイルを変更すれば適用できるようにしました\n\n* __ais-highlight__m__/ais-highlight__kdocs.yml\n\n```.yml\nextra:\n    highlightjs:\n        version: 8.6\n        syntax: atelier-sulphurpool.dark\n```\n\nテンプレート側ではこんな感じ\n\n* base.html\n\n```.html\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/styles/{{ config.extra.highlightjs.syntax }}.min.css\"/>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/{{ config.extra.highlightjs.version }}/highlight.min.js\"></script>\n<script>\n$(document).ready(function() {\n    $('pre').each(function(i, block) {\n        hljs.highlightBlock(block);\n    });\n});\n</script>\n```\n\n## content.html\n### __ais-highlight__m__/ais-highlight__eta情報を設定する\n\n__ais-highlight__M__/ais-highlight__arkdownの__ais-highlight__m__/ais-highlight__eta情報として最初にいくつか記述してあげることでそれに応じた処理をさせることができる模様\n\nデフォルトでは下記のようにしてあげることで右上にラベルが出てくる\n\n公式ドキュメントではこれにGitHubへのリンクを張って直接飛べるようにすることもできるよっていう風なことが書いてありました\n\n* samaple.__ais-highlight__m__/ais-highlight__d\n\n```\nsource: sample.__ais-highlight__m__/ais-highlight__d\n        image.png\n```\n\n![__ais-highlight__m__/ais-highlight__eta](__ais-highlight__m__/ais-highlight__kdocs-05.PNG)\n\n## toc.html\n### 見出しの追加\n\n目次の見出しはh1,h2のみ表示されるようになっているので表示範囲を増やしてh3まで表示させるようにしました\n\n* toc.html\n\n```\n<div class=\"bs-sidebar hidden-print affix well\" role=\"complementary\">\n  <ul class=\"nav bs-sidenav\">\n  {% for toc_item in toc %}\n    <li class=\"main {% if toc_item.active %}active{% endif %}\"><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n      <ul class=\"nav bs-sidenav\">\n      {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a>\n          {% if toc_item.children %}\n          <ul >\n          {% for toc_item in toc_item.children %}\n              <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n          {% endfor %}\n          </ul>\n          {% endif %}\n        </li>\n      {% endfor %}\n      </ul>\n    </li>\n  {% endfor %}\n  </ul>\n</div>\n```\n\n## 特別ページの設置\n\ncontent.htmlで、{{ content }} を表示する前にファイルの__ais-highlight__m__/ais-highlight__eta情報を参照していたので、集計用のページを設けることができそうだと思いやってみました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase,prh -->\nちょっとコンセプトとはずれてしまうので微妙かも知れませんが、こういうこともできるってところですね\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase,prh -->\n\n* repotページ用の__ais-highlight__M__/ais-highlight__arkdownを用意、設定\n\nこのページはすべてテンプレート側で処理してしまうので__ais-highlight__m__/ais-highlight__eta情報だけ記述した__ais-highlight__M__/ais-highlight__arkdownを用意します\n\n```\npagetype: report\n```\n\n* 公開前も含めたすべてのファイルの情報を記述したjsonファイルを用意\n\n* data.json\n\n```\n[\n  { \"title\": \"page1 title\", \"url\": \"category/sample1\", \"date\": \"2015-01-02\", \"type\": \"blog\" },\n  { \"title\": \"page2 title\", \"url\": \"category/sample2\", \"date\": \"2015-02-20\", \"type\": \"qiita\" },\n  { \"title\": \"page3 title\", \"url\": \"category/sample3\", \"date\": \"2015-03-23\", \"type\": \"blog\" }\n]\n```\n\n* content.htmlでコンテンツの呼び出し条件を分ける\n\n```\n{% if __ais-highlight__m__/ais-highlight__eta.pagetype|join(\"\") == 'report' %}\n  {% include \"report.html\" %}\n{% else %}\n  {{ content }}\n{% endif %}\n```\n\n* 新たなテンプレートでデータを用いた集計ページ(report.html)を作成\n\n```\nvar req = new XMLHttpRequest();\nreq.open(\"GET\", \"/data.json\", false);\nreq.send(null);\nvar datalist = JSON.parse( req.responseText );\n```\n\nあとは用途に合わせて表示させるだけです\n\n今回はc3.jsというのを使ってみました、d3.jsのwrapperみたいな位置付けのようです\n\n[c3.js](http://c3js.org/)\n\nc3についてはまた今度、でもとても簡単に使えます\n\n![report](__ais-highlight__m__/ais-highlight__kdocs-04.PNG )\n\n\n# 管理\n\nsite以下にファイルが生成されるのでGitで管理するには `.gitignore`に下記記述を行い管理するのが良いようです\n\n* .gitignore\n\n```\nsite/\n```\n\n静的ファイルのみで閲覧ができるのでS3にあげたりすれば下手にブログ立ててサーバ代かけるよりよっぽど良いですね\n\n# その他\n\n実際に使ってはないけど便利そうな機能\n\n* 設定ファイルでgoogle analyticsを設置できる\n* GitHub Pagesとの連携\n\n# 感想\n\n今回は公開とかはしない予定だったのでデプロイ関連まではやらなかったですがそんなに難しくはなさそうなイメージ\n\n目標立てて進捗グラフとかも作ればモチベーション維持にも一役買ってくれそう…?\n\n簡単なサイトならS3だけで済ませられるのでサーバいらないですね\n\n低予算万歳!\n\n他にも機会があれば使っていきたいなと思いました\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "middlemanを使ってみる",
          "date": "2016-04-18",
          "slug": "other/middleman",
          "url": "http://localhost:8001/other/middleman",
          "section": "other/middleman",
          "tags": ["other"],
          "text": "# middlemanを使ってみる\n\n[middleman](https://middlemanapp.com/jp/ )\n\n静的サイトジェネレータといわれているものの中の1つです\n\n日本語の公式があるのもありがたいですね\n\n今回はダーツの自宅練習用のスコア管理のページをmiddlemanで作ってみます\n\n下記ダッシュボードテンプレートを使って見た目に時間をとらないようにしました\n\n[Gentellela](https://github.com/puikinsh/gentelella)\n\n## インストール\n\nテンプレートエンジンはslimを使ってみたいので[middleman-slim](https://github.com/yterajima/middleman-slim )もインストール\n\n```\ngem install middleman\ngem install middleman-slim\n```\n\n## プロジェクトの初期化\n\n`-T`でGitリポジトリにあるテンプレートを指定できる\n\nslimのテンプレートがあるようなのでそれを指定する\n\n```\nmiddleman init . -T yterajima/middleman-slim\n```\n\n## サーバの起動\n\n```\nmiddleman server\n```\n\n`http://localhsot:4567/`へアクセスするとデフォルトの画面が表示されます\n\n## 編集\n### 部分テンプレート\n\nRubyのテンプレートではpartialを使って部分テンプレートを読み込むことができるので良く使うテンプレートをひとつのファイルでまとめて使いまわす\n\n本日のプレイデータと今日以前のプレイデータとの差分を表示するところが多々あったのでまとめた\n\n- _diff.html.slim\n\n```\n- diff = new - old\n- if diff < 0\n  i.red\n    = to_f2( diff )\n- else\n  i.blue\n    | +\n    = to_f2( diff )\n```\n\n- 読み込み部分\n\n```\n= partial 'diff', locals: { new: t_stats, old: y_stats }\n```\n\n### ディレクトリインデックス\n\nたとえば、`http://localhost:4567/countup`へアクセスすると\n\n`./countup/index.html`の内容が表示されるようになる、それだけ\n\n- config.rb\n\n```\nactivate :directory_indexes\n```\n\ndevelopment,build両方指定した\n\n### asset_host\n\nassetの呼び出しパスに指定した文字列を追加してくれる\n\ngh-pagesのプロジェクトページなどで運用する場合や、同じドメインだけどパスで複数プロジェクトをホストする場合などに使える\n\n```\nactivate :asset_host, :host => \"/darts\"\n```\n\nこの設定をすることで`/javascripts/test.js`で読み込んでいたjsがビルドした静的ファイル上では`/darts/javascripts/test.js`と呼ばれるようになる\n\nここら辺しっかりサポートしてくれるのはたいへんありがたいです\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nGitHub Pagesで色々やろうとすると必ずはまるところではあると思うので…\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n### データの扱い\n\ndataディレクトリ以下にymlやjsonを置くことでそのデータをbuild時に変換してくれる\n\n- user.json\n\n```\n{\n  \"hoge\": {\n    \"name\": \"hoge\",\n    \"age\": 20\n  },\n  \"fuga\": {\n    \"name\": \"fuga\",\n    \"age\": 21\n  }\n}\n```\n\n`data.ファイル名`で参照できる\n\nあとは配列、ハッシュを扱うのと同様に扱うことができる\n\n```\n# 20\n= data.user[\"hoge\"][\"age\"]\n```\n\nとても便利、データや設定などを外だしできるというのはメンテナンスも楽になりそう\n\n### ヘルパー関数\n\nテンプレート中でよく使う処理などをまとめる\n\n- helpers/darts_helpers.rb\n\n```\nrequire 'bigdecimal/util'\nrequire 'bigdecimal'\nmodule FormatFloat\n  def to_f2(n)\n    n.to_s.to_d.floor(2).to_f\n  end\nend\n```\n\n- config.rb\n\n```\n###\n# Helpers\n###\nrequire 'helpers/darts_helpers'\nhelpers FormatFloat\n```\n\n定義した関数が使えるようになる\n\n```\n# 0.33\nto_f2(1/3.to_f)\n```\n\n今回は少数第二位までを表示するためのヘルパーメソッドを作った\n\nto_fで桁数が指定できなかったため、一度decimalに変換してから出力するようにした\n\nちょっと理由はわからないがひとつのモジュールに1つの関数しか定義できないようで、ヘルパー1つにつき1つモジュールを定義した\n\n## ビルド\n\n色々作ったらhtmlページをビルドします、コマンド打つだけですね\n\n```\nmiddleman build\n```\n\nbuildディレクトリに展開されます\n\nbuildされたファイルたちをgh-pagesなりS3なりに置けばあっという間にサイトが公開できます\n\n## 公開\n\n今回はgh-pagesのプロジェクトページに公開しようと思ったため下記2つを試してみました\n\n- [middleman-gh-pages](https://github.com/edgecase/middleman-gh-pages)\n- [middleman-deploy](https://github.com/middleman-contrib/middleman-deploy)\n\n2つとも試してみたもののmiddleman-deployの方は実行するまでにいけなかったのでgh-pagesの方を使用します\n\n### middleman-gh-pages\n\nRakefileを作ってあげるだけ\n\n各種ENVに関してはGitHubに載っているとおり\n\n- Rakefile\n\n```\nrequire 'middleman-gh-pages'\nENV[\"BRANCH_NAME\"] = \"gh-pages\"\nENV[\"ALLOW_DIRTY\"] = \"true\"\n```\n\n- config.rb\n\n```\n+ require 'middleman-gh-pages'\n```\n\n```\nrake build\nrake publish\n```\n\nGitGub Pagesのプロジェクトページだと`/darts`がトップとなるためassetsの読み込みパスが変わる\n\nconfig.rbで`asset_host`を指定してあげれば通常ならOKのはず\n\n- config.rb\n\n```\n+ activate :asset_host, :host => \"/darts\"\n```\n\nが、今回はgentellelaで使用しているjs内でのファイル読み込みがうまくいっていないようで、グラフが表示できない状態を解決できなかった\n\n結局あまり時間とりたくなかったので独自ドメインとってそっちで運用することにしたw\n\nちなみに独自ドメインの割り当て方法は「[自分のGitHub Pagesと独自ドメインの設定方法](http://qiita.com/mofumofu3n/items/b859fb3c5d924cfcca15)」を参考にした\n\n独自ドメインはAWSのRoute53で取得してさくっと設定(Aレコードの設定)\n\nドメインの設定をCNAMEに記載してpublishすればOK\n\n```\necho darts.swfz.io > source/CNAME\nrake publish\n```\n\n# 結果\n\n[darts](http://darts.swfz.io)\n\nゲームロジックとかはRubyの勉強がてらCLIを書きました -> [darts(github)](https://github.com/swfz/darts)\n\nこれでダーツの自宅練習でのモチベーションがあがるかな\n\nちなみに肝心のスコアは気持ち右肩上がりかな?くらいですw\n",
          "objectID": "other/middleman",
          "_snippetResult": {
            "text": {
              "value": "と思ったため下記2つを試してみました\n\n- [__ais-highlight__m__/ais-highlight__iddleman-gh-pages](https://github.com/edgecase/__ais-highlight__m__/ais-highlight__iddleman-gh-pages)\n- [__ais-highlight__m__/ais-highlight__iddleman-deploy](https://github.com/__ais-highlight__m__/ais-highlight__iddleman-contrib/__ais-highlight__m__/ais-highlight__iddleman-deploy)\n\n2つとも試してみたものの__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__iddlemanを使ってみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2016-04-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/other/__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "other/__ais-highlight__m__/ais-highlight__iddleman",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "other", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__iddlemanを使ってみる\n\n[__ais-highlight__m__/ais-highlight__iddleman](https://__ais-highlight__m__/ais-highlight__iddlemanapp.com/jp/ )\n\n静的サイトジェネレータといわれているものの中の1つです\n\n日本語の公式があるのもありがたいですね\n\n今回はダーツの自宅練習用のスコア管理のページを__ais-highlight__m__/ais-highlight__iddlemanで作ってみます\n\n下記ダッシュボードテンプレートを使って見た目に時間をとらないようにしました\n\n[Gentellela](https://github.com/puikinsh/gentelella)\n\n## インストール\n\nテンプレートエンジンはslimを使ってみたいので[__ais-highlight__m__/ais-highlight__iddleman-slim](https://github.com/yterajima/__ais-highlight__m__/ais-highlight__iddleman-slim )もインストール\n\n```\ngem install __ais-highlight__m__/ais-highlight__iddleman\ngem install __ais-highlight__m__/ais-highlight__iddleman-slim\n```\n\n## プロジェクトの初期化\n\n`-T`でGitリポジトリにあるテンプレートを指定できる\n\nslimのテンプレートがあるようなのでそれを指定する\n\n```\n__ais-highlight__m__/ais-highlight__iddleman init . -T yterajima/__ais-highlight__m__/ais-highlight__iddleman-slim\n```\n\n## サーバの起動\n\n```\n__ais-highlight__m__/ais-highlight__iddleman server\n```\n\n`http://localhsot:4567/`へアクセスするとデフォルトの画面が表示されます\n\n## 編集\n### 部分テンプレート\n\nRubyのテンプレートではpartialを使って部分テンプレートを読み込むことができるので良く使うテンプレートをひとつのファイルでまとめて使いまわす\n\n本日のプレイデータと今日以前のプレイデータとの差分を表示するところが多々あったのでまとめた\n\n- _diff.html.slim\n\n```\n- diff = new - old\n- if diff < 0\n  i.red\n    = to_f2( diff )\n- else\n  i.blue\n    | +\n    = to_f2( diff )\n```\n\n- 読み込み部分\n\n```\n= partial 'diff', locals: { new: t_stats, old: y_stats }\n```\n\n### ディレクトリインデックス\n\nたとえば、`http://localhost:4567/countup`へアクセスすると\n\n`./countup/index.html`の内容が表示されるようになる、それだけ\n\n- config.rb\n\n```\nactivate :directory_indexes\n```\n\ndevelopment,build両方指定した\n\n### asset_host\n\nassetの呼び出しパスに指定した文字列を追加してくれる\n\ngh-pagesのプロジェクトページなどで運用する場合や、同じドメインだけどパスで複数プロジェクトをホストする場合などに使える\n\n```\nactivate :asset_host, :host => \"/darts\"\n```\n\nこの設定をすることで`/javascripts/test.js`で読み込んでいたjsがビルドした静的ファイル上では`/darts/javascripts/test.js`と呼ばれるようになる\n\nここら辺しっかりサポートしてくれるのはたいへんありがたいです\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nGitHub Pagesで色々やろうとすると必ずはまるところではあると思うので…\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n### データの扱い\n\ndataディレクトリ以下にymlやjsonを置くことでそのデータをbuild時に変換してくれる\n\n- user.json\n\n```\n{\n  \"hoge\": {\n    \"name\": \"hoge\",\n    \"age\": 20\n  },\n  \"fuga\": {\n    \"name\": \"fuga\",\n    \"age\": 21\n  }\n}\n```\n\n`data.ファイル名`で参照できる\n\nあとは配列、ハッシュを扱うのと同様に扱うことができる\n\n```\n# 20\n= data.user[\"hoge\"][\"age\"]\n```\n\nとても便利、データや設定などを外だしできるというのはメンテナンスも楽になりそう\n\n### ヘルパー関数\n\nテンプレート中でよく使う処理などをまとめる\n\n- helpers/darts_helpers.rb\n\n```\nrequire 'bigdecimal/util'\nrequire 'bigdecimal'\n__ais-highlight__m__/ais-highlight__odule FormatFloat\n  def to_f2(n)\n    n.to_s.to_d.floor(2).to_f\n  end\nend\n```\n\n- config.rb\n\n```\n###\n# Helpers\n###\nrequire 'helpers/darts_helpers'\nhelpers FormatFloat\n```\n\n定義した関数が使えるようになる\n\n```\n# 0.33\nto_f2(1/3.to_f)\n```\n\n今回は少数第二位までを表示するためのヘルパーメソッドを作った\n\nto_fで桁数が指定できなかったため、一度decimalに変換してから出力するようにした\n\nちょっと理由はわからないがひとつのモジュールに1つの関数しか定義できないようで、ヘルパー1つにつき1つモジュールを定義した\n\n## ビルド\n\n色々作ったらhtmlページをビルドします、コマンド打つだけですね\n\n```\n__ais-highlight__m__/ais-highlight__iddleman build\n```\n\nbuildディレクトリに展開されます\n\nbuildされたファイルたちをgh-pagesなりS3なりに置けばあっという間にサイトが公開できます\n\n## 公開\n\n今回はgh-pagesのプロジェクトページに公開しようと思ったため下記2つを試してみました\n\n- [__ais-highlight__m__/ais-highlight__iddleman-gh-pages](https://github.com/edgecase/__ais-highlight__m__/ais-highlight__iddleman-gh-pages)\n- [__ais-highlight__m__/ais-highlight__iddleman-deploy](https://github.com/__ais-highlight__m__/ais-highlight__iddleman-contrib/__ais-highlight__m__/ais-highlight__iddleman-deploy)\n\n2つとも試してみたものの__ais-highlight__m__/ais-highlight__iddleman-deployの方は実行するまでにいけなかったのでgh-pagesの方を使用します\n\n### __ais-highlight__m__/ais-highlight__iddleman-gh-pages\n\nRakefileを作ってあげるだけ\n\n各種ENVに関してはGitHubに載っているとおり\n\n- Rakefile\n\n```\nrequire '__ais-highlight__m__/ais-highlight__iddleman-gh-pages'\nENV[\"BRANCH_NAME\"] = \"gh-pages\"\nENV[\"ALLOW_DIRTY\"] = \"true\"\n```\n\n- config.rb\n\n```\n+ require '__ais-highlight__m__/ais-highlight__iddleman-gh-pages'\n```\n\n```\nrake build\nrake publish\n```\n\nGitGub Pagesのプロジェクトページだと`/darts`がトップとなるためassetsの読み込みパスが変わる\n\nconfig.rbで`asset_host`を指定してあげれば通常ならOKのはず\n\n- config.rb\n\n```\n+ activate :asset_host, :host => \"/darts\"\n```\n\nが、今回はgentellelaで使用しているjs内でのファイル読み込みがうまくいっていないようで、グラフが表示できない状態を解決できなかった\n\n結局あまり時間とりたくなかったので独自ドメインとってそっちで運用することにしたw\n\nちなみに独自ドメインの割り当て方法は「[自分のGitHub Pagesと独自ドメインの設定方法](http://qiita.com/__ais-highlight__m__/ais-highlight__ofumofu3n/items/b859fb3c5d924cfcca15)」を参考にした\n\n独自ドメインはAWSのRoute53で取得してさくっと設定(Aレコードの設定)\n\nドメインの設定をCNAMEに記載してpublishすればOK\n\n```\necho darts.swfz.io > source/CNAME\nrake publish\n```\n\n# 結果\n\n[darts](http://darts.swfz.io)\n\nゲームロジックとかはRubyの勉強がてらCLIを書きました -> [darts(github)](https://github.com/swfz/darts)\n\nこれでダーツの自宅練習でのモチベーションがあがるかな\n\nちなみに肝心のスコアは気持ち右肩上がりかな?くらいですw\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "markdownでプレゼン",
          "date": "2014-07-01",
          "slug": "other/20140701_markdown_presentation_cleaver",
          "url": "http://localhost:8001/other/20140701_markdown_presentation_cleaver",
          "section": "other/20140701_markdown_presentation_cleaver",
          "tags": ["other", "Markdown"],
          "text": "# Markdownでプレゼン\n## Cleaverを使ってみる\n\n## Cleaverとは\nMarkdownファイルを使ってプレゼン資料にするためのツール\n\n## インストール\n\nコマンド一発でインストール可能\n\n```bash\nnpm instlal cleaver\n```\n\n* node.jsが必要\n\n## スライド作成\n#### 通常のMarkdownと違うところ\n* 最初にスライドの情報を記述する\n* ページの区切りは `--` で行う\n\n```\n title: Example\n author:\n   name: swfz\n output: output.html\n controls: true\n style: style.css\n --\n#1ページ目\n --\n#2ページ目\n```\n\nMarkdown記法で内容を記述します\n\n### test.md\n\n```markdown\n# cleaver h1\n## h2\n### h3\n\n* item\n    * indented item\n```\n\n## スライド作成\nhtmlファイルに変換します\n\n先頭で記述した`output: filename` にファイルを出力\n\n出力したhtmlファイルをブラウザで開くだけでOK\n\nカーソルやjklhでスライド送りができます\n\n`watch` オプションで自動的に反映\n### 生成\n```bash\ncleaver test.md\n```\n\n### 自動反映\n```bash\ncleaver watch test.md\n```\n\n## 画像\nMarkdown記法で画像も貼り付けられます。\n\n```\n![sample_image](sample_cleaver.PNG \"sample\")\n```\n\n## デザイン\n### theme\n設定するとGitHubのthemeを読み込める\n\nstyle.cssを自動的に読み込んでくれるみたい\n\n簡単にデザインを変更できます\n\n```\ntheme: jdan/cleaver-retro\n```\n### style\ncssを指定することでデザインをカスタマイズできます\n```\nstyle: style.css\n```\n## デザイン\n### スライドごとのデザイン\nスライドごとの区切りの後にクラス名を記述\n```\n -- bg\n```\n\n```css\n.bg {\n  background: url(bg_darts.png);\n}\n```\n## おわり\n* 簡単に資料が作れる\n* themeでデザインテンプレートを選べる\n* 自分でカスタマイズできる\n* ある程度仕様に合わせないといけないところもある\n\nプレゼンする機会が今のところないので次あったら使ってみようかと思っています\n\nとりあえずサンプル作ったのでそのときのthemeをあげて置きます\n\n[swfz/cleaver-theme](https://github.com/swfz/cleaver-theme)\n\n\n\n",
          "objectID": "other/20140701_markdown_presentation_cleaver",
          "_snippetResult": {
            "text": {
              "value": "行う\n\n```\n title: Example\n author:\n   name: swfz\n output: output.html\n controls: true\n style: style.css\n --\n#1ページ目\n --\n#2ページ目\n```\n\n__ais-highlight__M__/ais-highlight__arkdown記法で内容を記述します\n\n### test.__ais-highlight__m__/ais-highlight__d\n\n```__ais-highlight__m__/ais-highlight__arkdown\n# cleaver h1\n## h2\n### h3\n\n* item\n    * indented item\n```\n\n## スライ",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__arkdownでプレゼン",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2014-07-01",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/20140701___ais-highlight__m__/ais-highlight__arkdown_presentation_cleaver",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/other/20140701___ais-highlight__m__/ais-highlight__arkdown_presentation_cleaver",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "other/20140701___ais-highlight__m__/ais-highlight__arkdown_presentation_cleaver",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "other", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__arkdownでプレゼン\n## Cleaverを使ってみる\n\n## Cleaverとは\n__ais-highlight__M__/ais-highlight__arkdownファイルを使ってプレゼン資料にするためのツール\n\n## インストール\n\nコマンド一発でインストール可能\n\n```bash\nnpm instlal cleaver\n```\n\n* node.jsが必要\n\n## スライド作成\n#### 通常の__ais-highlight__M__/ais-highlight__arkdownと違うところ\n* 最初にスライドの情報を記述する\n* ページの区切りは `--` で行う\n\n```\n title: Example\n author:\n   name: swfz\n output: output.html\n controls: true\n style: style.css\n --\n#1ページ目\n --\n#2ページ目\n```\n\n__ais-highlight__M__/ais-highlight__arkdown記法で内容を記述します\n\n### test.__ais-highlight__m__/ais-highlight__d\n\n```__ais-highlight__m__/ais-highlight__arkdown\n# cleaver h1\n## h2\n### h3\n\n* item\n    * indented item\n```\n\n## スライド作成\nhtmlファイルに変換します\n\n先頭で記述した`output: filename` にファイルを出力\n\n出力したhtmlファイルをブラウザで開くだけでOK\n\nカーソルやjklhでスライド送りができます\n\n`watch` オプションで自動的に反映\n### 生成\n```bash\ncleaver test.__ais-highlight__m__/ais-highlight__d\n```\n\n### 自動反映\n```bash\ncleaver watch test.__ais-highlight__m__/ais-highlight__d\n```\n\n## 画像\n__ais-highlight__M__/ais-highlight__arkdown記法で画像も貼り付けられます。\n\n```\n![sample_image](sample_cleaver.PNG \"sample\")\n```\n\n## デザイン\n### theme\n設定するとGitHubのthemeを読み込める\n\nstyle.cssを自動的に読み込んでくれるみたい\n\n簡単にデザインを変更できます\n\n```\ntheme: jdan/cleaver-retro\n```\n### style\ncssを指定することでデザインをカスタマイズできます\n```\nstyle: style.css\n```\n## デザイン\n### スライドごとのデザイン\nスライドごとの区切りの後にクラス名を記述\n```\n -- bg\n```\n\n```css\n.bg {\n  background: url(bg_darts.png);\n}\n```\n## おわり\n* 簡単に資料が作れる\n* themeでデザインテンプレートを選べる\n* 自分でカスタマイズできる\n* ある程度仕様に合わせないといけないところもある\n\nプレゼンする機会が今のところないので次あったら使ってみようかと思っています\n\nとりあえずサンプル作ったのでそのときのthemeをあげて置きます\n\n[swfz/cleaver-theme](https://github.com/swfz/cleaver-theme)\n\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "mongoDBでクエリログを流す",
          "date": "2016-09-14",
          "slug": "mongoDB/slow_log",
          "url": "http://localhost:8001/mongoDB/slow_log",
          "section": "mongoDB/slow_log",
          "tags": ["MongoDB"],
          "text": "# mongoDBでクエリログを流す\n\n## mongoDB起動時\n\n下記をつけて起動させればOK\n\n```\n/urr/bin/mongod --profile=2 --slowms=1\n```\n\n--profile\n\nプロファイルのレベル\n\n- 1: 閾値以上の時間のかかったクエリを残す\n- 2: すべてのクエリを残す\n\n--slowms\n\n閾値(ms)\n\n\n## コンソールから\n\n```\n$ mongo\ndb.setProfilingLevel(2,1)\n{ \"was\" : 0, \"slowms\" : 20, \"ok\" : 1 }\n> db.system.profile.find()\n.....\n.....\n```\n\n第一引数がプロファイルのレベル\n\n第二引数が閾値\n\nどちらで行っても出力先はmongoDBの`system.profile`コレクションに出力される模様\n\n[Database Profiler Output — MongoDB Manual 3.2](https://docs.mongodb.com/manual/reference/database-profiler/)\n\n[https://docs.mongodb.com/manual/reference/database-profiler/:embed:cite]\n\n一生懸命ファイルを探しても見つからないわけですね\n\n### mongotail\n\nいちいちシェルに入ってコマンドたたくのも面倒ですね\n\nmongoDBでslowlogをとるようにしておけばmongotailというコマンドを使ってクエリログを閲覧や垂れ流しできます\n\n[mrsarm/mongotail](https://github.com/mrsarm/mongotail )\n\n[https://github.com/mrsarm/mongotail:embed:cite]\n\n- install\n\n```\npip install mongotail\n```\n\npipでインストール可能\n\n- tailしてみる\n\nこちらもDBのアドレスとデータベース名を入れてコマンドを実行するだけです\n\n`-f`で `tail -f` と同様な感じに、`-v`(verboseモード)ですべてのログを出力してくれるようです\n\n```\nmongotail 192.168.30.93:27017/database -v -f\n```\n\n簡単!\n\n",
          "objectID": "mongoDB/slow_log",
          "_snippetResult": {
            "text": {
              "value": "出力先は__ais-highlight__m__/ais-highlight__ongoDBの`system.profile`コレクションに出力される模様\n\n[Database Profiler Output — __ais-highlight__M__/ais-highlight__ongoDB __ais-highlight__M__/ais-highlight__anual 3.2](https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/)\n\n[https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/:embed:cite]\n\n一生懸",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDBでクエリログを流す",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2016-09-14",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/slow_log",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__ongoDB/slow_log",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/slow_log",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ongoDB",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__ongoDBでクエリログを流す\n\n## __ais-highlight__m__/ais-highlight__ongoDB起動時\n\n下記をつけて起動させればOK\n\n```\n/urr/bin/__ais-highlight__m__/ais-highlight__ongod --profile=2 --slowms=1\n```\n\n--profile\n\nプロファイルのレベル\n\n- 1: 閾値以上の時間のかかったクエリを残す\n- 2: すべてのクエリを残す\n\n--slowms\n\n閾値(__ais-highlight__m__/ais-highlight__s)\n\n\n## コンソールから\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo\ndb.setProfilingLevel(2,1)\n{ \"was\" : 0, \"slowms\" : 20, \"ok\" : 1 }\n> db.system.profile.find()\n.....\n.....\n```\n\n第一引数がプロファイルのレベル\n\n第二引数が閾値\n\nどちらで行っても出力先は__ais-highlight__m__/ais-highlight__ongoDBの`system.profile`コレクションに出力される模様\n\n[Database Profiler Output — __ais-highlight__M__/ais-highlight__ongoDB __ais-highlight__M__/ais-highlight__anual 3.2](https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/)\n\n[https://docs.__ais-highlight__m__/ais-highlight__ongodb.com/__ais-highlight__m__/ais-highlight__anual/reference/database-profiler/:embed:cite]\n\n一生懸命ファイルを探しても見つからないわけですね\n\n### __ais-highlight__m__/ais-highlight__ongotail\n\nいちいちシェルに入ってコマンドたたくのも面倒ですね\n\n__ais-highlight__m__/ais-highlight__ongoDBでslowlogをとるようにしておけば__ais-highlight__m__/ais-highlight__ongotailというコマンドを使ってクエリログを閲覧や垂れ流しできます\n\n[__ais-highlight__m__/ais-highlight__rsarm/__ais-highlight__m__/ais-highlight__ongotail](https://github.com/__ais-highlight__m__/ais-highlight__rsarm/__ais-highlight__m__/ais-highlight__ongotail )\n\n[https://github.com/__ais-highlight__m__/ais-highlight__rsarm/__ais-highlight__m__/ais-highlight__ongotail:embed:cite]\n\n- install\n\n```\npip install __ais-highlight__m__/ais-highlight__ongotail\n```\n\npipでインストール可能\n\n- tailしてみる\n\nこちらもDBのアドレスとデータベース名を入れてコマンドを実行するだけです\n\n`-f`で `tail -f` と同様な感じに、`-v`(verboseモード)ですべてのログを出力してくれるようです\n\n```\n__ais-highlight__m__/ais-highlight__ongotail 192.168.30.93:27017/database -v -f\n```\n\n簡単!\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "mongoDBのクラスタ環境をいじってみる",
          "date": "2016-11-15",
          "slug": "mongoDB/cluster",
          "url": "http://localhost:8001/mongoDB/cluster",
          "section": "mongoDB/cluster",
          "tags": ["MongoDB"],
          "text": "# mongoDBのクラスタ環境をいじってみる\n\n今回は業務で扱う必要が出てきてしまったため急場しのぎですがmongoDBをやっていきます\n\nいきなりシャーディング＋レプリカセットとかいろんな概念が一気に入ってくるとわからなくなってしまいそうなので1つずつ理解していくようにしていく\n\nまた、各種ノードに関してローカルのサーバでポートを変えればいくらでもノードを立ち上げることができたので一台のVMで複数mongodを立ち上げることで試す\n\n# 前提\n\n大きく分けて下記3つの役割がある\n\n## mongos\nクエリのルーティングなどを行う\nクライアント側のアプリケーションが接続を行うのはこのサーバ\n\n## mongod\n\nシャードやレプリカセットを構成要素となるサーバ(ノード)\n\nmongos,mongod(configserver)がない場合でも機能する(ローカルとか)\n\n## mongod(configserver)\n\n各種設定やメタデータ(shardの設定やロックの情報などを管理)を扱っている\n\n冗長化のためにレプリカセットを組んでおくのが基本\n\n# シャーディングを試す\n\n下記と公式を参考にしました\n\n[MongoDBのSharding機能で遊ぶ - 個人的なまとめ](http://hachi.hatenablog.com/entry/2012/02/26/191349)\n\n[http://hachi.hatenablog.com/entry/2012/02/26/191349:embed:cite]\n\n- コマンドについては下記\n\n[MongoDBのデータ構造な簡単な操作など - Qiita](http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e)\n\n[http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e:embed:cite]\n\n## 構成\n- config\n    - 1台\n- mongos\n    - 1台\n- shard\n    - 3台\n\n![text](cluster01.png)\n\n## configサーバ\n\n```\nmkdir /data/mongo/config\nmongod --configsvr --port 27030 --dbpath=/data/mongo/config --logpath /data/mongo/config/log --fork\n```\n\n## mongosの起動\n\n```\nmongos --port 27017 --configdb localhost:27030 --chunkSize 1 --logpath /data/mongo/mongos/log --fork\n```\n\n## 各シャードの起動\n\n```\nmkdir /data/mongo/shard1\nmkdir /data/mongo/shard2\nmkdir /data/mongo/shard3\n\nmongod --port 27021 --dbpath=/data/mongo/shard1\nmongod --port 27022 --dbpath=/data/mongo/shard2\nmongod --port 27023 --dbpath=/data/mongo/shard3\n```\n\n## シャードの追加\n\n- mongos\n\n```\nuse admin\ndb.runCommand({\"addShard\":\"localhost:27021\"})\ndb.runCommand({\"addShard\":\"localhost:27022\"})\ndb.runCommand({\"addShard\":\"localhost:27023\"})\n```\n\n- シャードの確認\n\nどちらでも同じ出力\n\n```\n> db.printShardingStatus()\n> sh.status()\n--- Sharding Status ---\n  sharding version: {\n        \"_id\" : 1,\n        \"minCompatibleVersion\" : 5,\n        \"currentVersion\" : 6,\n        \"clusterId\" : ObjectId(\"580c68b71fc6c85737ab8492\")\n}\n  shards:\n        {  \"_id\" : \"shard0000\",  \"host\" : \"localhost:27021\" }\n        {  \"_id\" : \"shard0001\",  \"host\" : \"localhost:27022\" }\n        {  \"_id\" : \"shard0002\",  \"host\" : \"localhost:27023\" }\n  active mongoses:\n        \"3.2.7\" : 1\n  balancer:\n        Currently enabled:  yes\n        Currently running:  no\n        Failed balancer rounds in last 5 attempts:  0\n        Migration Results for the last 24 hours:\n                No recent migrations\n  databases:\n\n```\n\n## データを入れてみる\n\n```\nmongo localhost:27017\n> use sample # 自動でDB生成\n> db.sample.insert({ category: \"A\", name: \"aaaaaaaaaaa\", age: 25 })\n> db.sample.insert({ category: \"B\", name: \"bbbbbbbbbbb\", age: 35 })\n> db.sample.insert({ category: \"C\", name: \"ccccccccccc\", age: 45 })\n```\n\n- 確認\n\n```\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n```\n\n- 各シャードで確認してみる\n\n```\n$ mongo localhost:27021\n> use sample\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n$ mongo localhost:27022\n> use sample\n> db.sample.find()\n$ mongo localhost:27023\n> use sample\n> db.sample.find()\n```\n\n## シャード設定\n\nDB単位、Collection単位でシャード設定しないといけない模様\n\n新たに`shsample`というDBに`stats_a`というcollectionを追加する\n\n```\n# DB,Collection2つ一遍に設定できるかと思ったら駄目だった\nmongos> sh.shardCollection(\"shsample.stats_a\",{\"id\": 1});\n{ \"ok\" : 0, \"errmsg\" : \"sharding not enabled for db shsample\", \"code\" : 20 }\n\n# シャード設定を追加する\nmongos> use admin\nswitched to db admin\nmongos> db.runCommand({ enablesharding: \"shsample\"});\n{ \"ok\" : 1 }\n\n# shsample に対してシャーディング設定をする( 渡すのはshard key) 複数も可能\nsh.shardCollection(\"shsample.stats_a\",{\"id\": 1})\n```\n\n- データを追加してみる\n\n```\n> db.stats_a.insert({ id: 1, name: \"hoge\" })\n> db.stats_a.insert({ id: 2, name: \"fuga\" })\n> db.stats_a.insert({ id: 3, name: \"piyo\" })\n```\n\n```\nuse shsample\n> db.stats_a.find()\n```\n\n変わっていなかった…\n\nそもそもchunksizeがバランシングの最小単位なので割と多めのデータを入れないといけない\n\n今回の場合だと1Mですね(chunksize)\n\n## ファイルからデータをインポート\n\n[MongoDBのmongoimportでハマった：変なJSON形式 - 檜山正幸のキマイラ飼育記](http://d.hatena.ne.jp/m-hiyama/20130913/1379036064)\n\n[http://d.hatena.ne.jp/m-hiyama/20130913/1379036064:embed:cite]\n\nここを参考にログを入れてみる\n\nテキストの1行に1個のJSONオブジェクトとのことなのでFluentdとかで出力したログファイルがちょうどよさそう\n\n適当なログをさらってきて突っ込んでみます\n\n```\n$ mongoimport --port 27017 --db shsample --collection stats_a --type json --file sample.log\n```\n\nデータを登録したので確認してみる\n\n```\n> sh.status()\n....\n  databases:\n        {  \"_id\" : \"sample\",  \"primary\" : \"shard0000\",  \"partitioned\" : false }\n        {  \"_id\" : \"test\",  \"primary\" : \"shard0001\",  \"partitioned\" : false }\n        {  \"_id\" : \"shsample\",  \"primary\" : \"shard0002\",  \"partitioned\" : true }\n                shsample.stats_a\n                        shard key: { \"id\" : 1 }\n                        unique: false\n                        balancing: true\n                        chunks:\n                                shard0000       28\n                                shard0001       27\n                                shard0002       153\n                        too many chunks to print, use verbose if you want to force print\n\n```\n\n各シャードに分散されたようです\n\n- 各シャードの件数を確認する\n\n```\n$ mongo localhost:27021/shsample\n> db.stats_a.count()\n18790\n\n$ mongo localhost:27022/shsample\n> db.stats_a.count()\n19673\n\n$ mongo localhost:27023/shsample\n> db.stats_a.count()\n18937\n```\n\n- mongosから問い合わせる\n\n```\n$ mongo localhost:27017\nmongos> db.stats_a.count()\n57400\n```\n\n件数もぴったり合いました\n\nmongodbの特性として各シャード1つ1つが独立したDBとして動作可能という特性がある模様\n\nmongosが各シャードに対してクエリを発行してまとめているという感じでしょうか\n\nshardingに関してはなんとなく概要がつかめた\n\n",
          "objectID": "mongoDB/cluster",
          "_snippetResult": {
            "text": {
              "value": "動\n\n```\n__ais-highlight__m__/ais-highlight__ongos --port 27017 --configdb localhost:27030 --chunkSize 1 --logpath /data/__ais-highlight__m__/ais-highlight__ongo/__ais-highlight__m__/ais-highlight__ongos/log --fork\n```\n\n## 各シャードの起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard3\n\n__ais-highlight__m__/ais-highlight__ongod --port 27021 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__ongod --port 27022 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__ongod",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDBのクラスタ環境をいじってみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2016-11-15",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/cluster",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__ongoDB/cluster",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/cluster",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ongoDB",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__ongoDBのクラスタ環境をいじってみる\n\n今回は業務で扱う必要が出てきてしまったため急場しのぎですが__ais-highlight__m__/ais-highlight__ongoDBをやっていきます\n\nいきなりシャーディング＋レプリカセットとかいろんな概念が一気に入ってくるとわからなくなってしまいそうなので1つずつ理解していくようにしていく\n\nまた、各種ノードに関してローカルのサーバでポートを変えればいくらでもノードを立ち上げることができたので一台のVMで複数__ais-highlight__m__/ais-highlight__ongodを立ち上げることで試す\n\n# 前提\n\n大きく分けて下記3つの役割がある\n\n## __ais-highlight__m__/ais-highlight__ongos\nクエリのルーティングなどを行う\nクライアント側のアプリケーションが接続を行うのはこのサーバ\n\n## __ais-highlight__m__/ais-highlight__ongod\n\nシャードやレプリカセットを構成要素となるサーバ(ノード)\n\n__ais-highlight__m__/ais-highlight__ongos,__ais-highlight__m__/ais-highlight__ongod(configserver)がない場合でも機能する(ローカルとか)\n\n## __ais-highlight__m__/ais-highlight__ongod(configserver)\n\n各種設定やメタデータ(shardの設定やロックの情報などを管理)を扱っている\n\n冗長化のためにレプリカセットを組んでおくのが基本\n\n# シャーディングを試す\n\n下記と公式を参考にしました\n\n[__ais-highlight__M__/ais-highlight__ongoDBのSharding機能で遊ぶ - 個人的なまとめ](http://hachi.hatenablog.com/entry/2012/02/26/191349)\n\n[http://hachi.hatenablog.com/entry/2012/02/26/191349:embed:cite]\n\n- コマンドについては下記\n\n[__ais-highlight__M__/ais-highlight__ongoDBのデータ構造な簡単な操作など - Qiita](http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e)\n\n[http://qiita.com/yuji0602/items/c55e2cb75376fd565b4e:embed:cite]\n\n## 構成\n- config\n    - 1台\n- __ais-highlight__m__/ais-highlight__ongos\n    - 1台\n- shard\n    - 3台\n\n![text](cluster01.png)\n\n## configサーバ\n\n```\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/config\n__ais-highlight__m__/ais-highlight__ongod --configsvr --port 27030 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/config --logpath /data/__ais-highlight__m__/ais-highlight__ongo/config/log --fork\n```\n\n## __ais-highlight__m__/ais-highlight__ongosの起動\n\n```\n__ais-highlight__m__/ais-highlight__ongos --port 27017 --configdb localhost:27030 --chunkSize 1 --logpath /data/__ais-highlight__m__/ais-highlight__ongo/__ais-highlight__m__/ais-highlight__ongos/log --fork\n```\n\n## 各シャードの起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__kdir /data/__ais-highlight__m__/ais-highlight__ongo/shard3\n\n__ais-highlight__m__/ais-highlight__ongod --port 27021 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard1\n__ais-highlight__m__/ais-highlight__ongod --port 27022 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard2\n__ais-highlight__m__/ais-highlight__ongod --port 27023 --dbpath=/data/__ais-highlight__m__/ais-highlight__ongo/shard3\n```\n\n## シャードの追加\n\n- __ais-highlight__m__/ais-highlight__ongos\n\n```\nuse admin\ndb.runCommand({\"addShard\":\"localhost:27021\"})\ndb.runCommand({\"addShard\":\"localhost:27022\"})\ndb.runCommand({\"addShard\":\"localhost:27023\"})\n```\n\n- シャードの確認\n\nどちらでも同じ出力\n\n```\n> db.printShardingStatus()\n> sh.status()\n--- Sharding Status ---\n  sharding version: {\n        \"_id\" : 1,\n        \"__ais-highlight__m__/ais-highlight__inCompatibleVersion\" : 5,\n        \"currentVersion\" : 6,\n        \"clusterId\" : ObjectId(\"580c68b71fc6c85737ab8492\")\n}\n  shards:\n        {  \"_id\" : \"shard0000\",  \"host\" : \"localhost:27021\" }\n        {  \"_id\" : \"shard0001\",  \"host\" : \"localhost:27022\" }\n        {  \"_id\" : \"shard0002\",  \"host\" : \"localhost:27023\" }\n  active __ais-highlight__m__/ais-highlight__ongoses:\n        \"3.2.7\" : 1\n  balancer:\n        Currently enabled:  yes\n        Currently running:  no\n        Failed balancer rounds in last 5 attempts:  0\n        __ais-highlight__M__/ais-highlight__igration Results for the last 24 hours:\n                No recent __ais-highlight__m__/ais-highlight__igrations\n  databases:\n\n```\n\n## データを入れてみる\n\n```\n__ais-highlight__m__/ais-highlight__ongo localhost:27017\n> use sample # 自動でDB生成\n> db.sample.insert({ category: \"A\", name: \"aaaaaaaaaaa\", age: 25 })\n> db.sample.insert({ category: \"B\", name: \"bbbbbbbbbbb\", age: 35 })\n> db.sample.insert({ category: \"C\", name: \"ccccccccccc\", age: 45 })\n```\n\n- 確認\n\n```\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n```\n\n- 各シャードで確認してみる\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27021\n> use sample\n> db.sample.find()\n{ \"_id\" : ObjectId(\"580c701a8d3072138e3e8ef2\"), \"category\" : \"A\", \"name\" : \"aaaaaaaaaaa\", \"age\" : 25 }\n{ \"_id\" : ObjectId(\"580c7129526e856a60bb2113\"), \"category\" : \"B\", \"name\" : \"bbbbbbbbbbb\", \"age\" : 35 }\n{ \"_id\" : ObjectId(\"580c7151526e856a60bb2114\"), \"category\" : \"C\", \"name\" : \"ccccccccccc\", \"age\" : 45 }\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27022\n> use sample\n> db.sample.find()\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27023\n> use sample\n> db.sample.find()\n```\n\n## シャード設定\n\nDB単位、Collection単位でシャード設定しないといけない模様\n\n新たに`shsample`というDBに`stats_a`というcollectionを追加する\n\n```\n# DB,Collection2つ一遍に設定できるかと思ったら駄目だった\n__ais-highlight__m__/ais-highlight__ongos> sh.shardCollection(\"shsample.stats_a\",{\"id\": 1});\n{ \"ok\" : 0, \"errmsg\" : \"sharding not enabled for db shsample\", \"code\" : 20 }\n\n# シャード設定を追加する\n__ais-highlight__m__/ais-highlight__ongos> use admin\nswitched to db admin\n__ais-highlight__m__/ais-highlight__ongos> db.runCommand({ enablesharding: \"shsample\"});\n{ \"ok\" : 1 }\n\n# shsample に対してシャーディング設定をする( 渡すのはshard key) 複数も可能\nsh.shardCollection(\"shsample.stats_a\",{\"id\": 1})\n```\n\n- データを追加してみる\n\n```\n> db.stats_a.insert({ id: 1, name: \"hoge\" })\n> db.stats_a.insert({ id: 2, name: \"fuga\" })\n> db.stats_a.insert({ id: 3, name: \"piyo\" })\n```\n\n```\nuse shsample\n> db.stats_a.find()\n```\n\n変わっていなかった…\n\nそもそもchunksizeがバランシングの最小単位なので割と多めのデータを入れないといけない\n\n今回の場合だと1Mですね(chunksize)\n\n## ファイルからデータをインポート\n\n[__ais-highlight__M__/ais-highlight__ongoDBの__ais-highlight__m__/ais-highlight__ongoimportでハマった：変なJSON形式 - 檜山正幸のキマイラ飼育記](http://d.hatena.ne.jp/__ais-highlight__m__/ais-highlight__-hiyama/20130913/1379036064)\n\n[http://d.hatena.ne.jp/__ais-highlight__m__/ais-highlight__-hiyama/20130913/1379036064:embed:cite]\n\nここを参考にログを入れてみる\n\nテキストの1行に1個のJSONオブジェクトとのことなのでFluentdとかで出力したログファイルがちょうどよさそう\n\n適当なログをさらってきて突っ込んでみます\n\n```\n$ __ais-highlight__m__/ais-highlight__ongoimport --port 27017 --db shsample --collection stats_a --type json --file sample.log\n```\n\nデータを登録したので確認してみる\n\n```\n> sh.status()\n....\n  databases:\n        {  \"_id\" : \"sample\",  \"primary\" : \"shard0000\",  \"partitioned\" : false }\n        {  \"_id\" : \"test\",  \"primary\" : \"shard0001\",  \"partitioned\" : false }\n        {  \"_id\" : \"shsample\",  \"primary\" : \"shard0002\",  \"partitioned\" : true }\n                shsample.stats_a\n                        shard key: { \"id\" : 1 }\n                        unique: false\n                        balancing: true\n                        chunks:\n                                shard0000       28\n                                shard0001       27\n                                shard0002       153\n                        too __ais-highlight__m__/ais-highlight__any chunks to print, use verbose if you want to force print\n\n```\n\n各シャードに分散されたようです\n\n- 各シャードの件数を確認する\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27021/shsample\n> db.stats_a.count()\n18790\n\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27022/shsample\n> db.stats_a.count()\n19673\n\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27023/shsample\n> db.stats_a.count()\n18937\n```\n\n- __ais-highlight__m__/ais-highlight__ongosから問い合わせる\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo localhost:27017\n__ais-highlight__m__/ais-highlight__ongos> db.stats_a.count()\n57400\n```\n\n件数もぴったり合いました\n\n__ais-highlight__m__/ais-highlight__ongodbの特性として各シャード1つ1つが独立したDBとして動作可能という特性がある模様\n\n__ais-highlight__m__/ais-highlight__ongosが各シャードに対してクエリを発行してまとめているという感じでしょうか\n\nshardingに関してはなんとなく概要がつかめた\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "minioを使ってS3の環境をローカルで再現する",
          "date": "2016-08-30",
          "slug": "aws/minio_s3",
          "url": "http://localhost:8001/aws/minio_s3",
          "section": "aws/minio_s3",
          "tags": ["AWS"],
          "text": "# minioを使ってS3の環境をローカルで再現する\n\n# minio\n\nS3互換の環境を立ててくれるS3のクローンプロダクトだそうです\n\n[minio/minio: Minio is an object storage server compatible with Amazon S3 and licensed under Apache 2.0 License](https://github.com/minio/minio)\n\n[https://github.com/minio/minio:embed:cite]\n\n開発環境などでS3を用いたCIをまわすときとかに料金を気にせず使えそうですね\n\nさっそく試してみましょう\n\n# インストール、起動\n\n```\nmkdir s3dir\ncurl https://dl.minio.io/server/minio/release/linux-amd64/minio > minio\nchmod +x minio\n./minio server s3dir\n```\n\n`./minio ${command} ${directory}`\n\nサブコマンドとオブジェクトを保存するディレクトリを指定するとサーバが起動します\n\n```\nEndpoint:  http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\nAccessKey: PX511CAFVA1T4DBVSV6B\nSecretKey: YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\nRegion:    us-east-1\n\nBrowser Access:\n   http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\n\nCommand-line Access: https://docs.minio.io/docs/minio-client-quickstart-guide\n   $ mc config host add myminio http://192.168.30.93:9000 PX511CAFVA1T4DBVSV6B YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\n\nObject API (Amazon S3 compatible):\n   Go:         https://docs.minio.io/docs/golang-client-quickstart-guide\n   Java:       https://docs.minio.io/docs/java-client-quickstart-guide\n   Python:     https://docs.minio.io/docs/python-client-quickstart-guide\n   JavaScript: https://docs.minio.io/docs/javascript-client-quickstart-guide\n```\n\nエンドポイントやアクセスキーが表示されるのでそれを用いてCLIなどから操作していきます\n\n# Web UI\n\nデフォルト9000番でサービスが起動してWebからもminioに対して操作ができます\n\n![text](minio_s301.PNG )\n\n# docker image\n\ndockerのimageも用意してあるようなのでそっちを使ったほうが楽ですね\n\n[Minio Docs](https://docs.minio.io/docs/minio-docker-quickstart-guide)\n\n[https://docs.minio.io/docs/minio-docker-quickstart-guide:embed:cite]\n\n- docker-compose.yml\n\n```\n  s3minio:\n    image: minio/minio\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - \"./tmps3:/export\"\n    environment:\n      - \"MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\"\n      - \"MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n```\n\n事前に`./tmps3`ディレクトリは作成しておきます\n\n- コンテナ起動\n\n```\ndocker-compose up\n```\n\nこれだけ、簡単すぎる!\n\n# 一通り試してみる\n\n環境構築が終わったのでSDK経由の操作をやってみます\n\ncredentialsはdocker-compose.ymlで指定した値を入力します\n\n- s3-in-minio.rb\n\n```\nrequire \"aws-sdk-core\"\nrequire \"tapp\"\n\ncredentials = Aws::Credentials.new(\n  'AKIAIOSFODNN7EXAMPLE',\n  'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\n)\n\nclient = Aws::S3::Client.new(\n  credentials: credentials,\n  region: 'us-east-1',\n  endpoint: 'http://192.168.30.93:9000',\n  force_path_style: true\n)\n\nclient.list_buckets.tapp\nres = client.list_objects(bucket: \"sample\")\nres.contents.each do |o|\n  puts \"#{o.key}\"\nend\n\n# バケットの作成\n# client.create_bucket(bucket: 'aaa')\n#\n# ファイルのアップロード\n# file = File.open(\"sample.txt\")\n# filename = File.basename(\"sample.txt\")\n# client.put_object(\n#   bucket: \"sample\",\n#   body: file,\n#   key: filename\n# )\n\n# ファイルのダウンロード\n# dl_filename = \"index.html\"\n# File.open(dl_filename, \"w\") do |f|\n#   client.get_object(bucket: \"sample\", key: dl_filename) do |chunk|\n#     f.write(chunk)\n#   end\n# end\n```\n\n## gemのインストール\n\n```\n[s3sample]$ gem install aws-sdk tapp\n```\n\n一通りためした後のbucketリストなどが表示されました\n\n```\n[s3sample]$ ruby s3-in-minio.rb\n#<struct Aws::S3::Types::ListBucketsOutput\n buckets=\n  [#<struct Aws::S3::Types::Bucket\n    name=\"aaa\",\n    creation_date=2016-08-23 14:40:37 UTC>,\n   #<struct Aws::S3::Types::Bucket\n    name=\"sample\",\n    creation_date=2016-08-23 14:45:45 UTC>],\n owner=#<struct Aws::S3::Types::Owner display_name=\"minio\", id=\"minio\">>\nindex.html\nsample.txt\n```\n\n# まとめ\n\n簡単にS3互換の環境をローカルに立てることができました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nプロダクションならS3で良いと思いますが、CI回したり、開発時のローカル環境用で使えそうです\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n\n",
          "objectID": "aws/minio_s3",
          "_snippetResult": {
            "text": {
              "value": "ったほうが楽ですね\n\n[__ais-highlight__M__/ais-highlight__inio Docs](https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-docker-quickstart-guide)\n\n[https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-docker-quickstart-guide:embed:cite]\n\n- docker-compose.yml\n\n```\n  s3minio:\n    image: __ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - \"./tmps3:/export\"\n    environment:\n      - \"__ais-highlight__M__/ais-highlight__INIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\"\n      - \"__ais-highlight__M__/ais-highlight__INIO",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__inioを使ってS3の環境をローカルで再現する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2016-08-30",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "aws/__ais-highlight__m__/ais-highlight__inio_s3",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/aws/__ais-highlight__m__/ais-highlight__inio_s3",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "aws/__ais-highlight__m__/ais-highlight__inio_s3",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__inioを使ってS3の環境をローカルで再現する\n\n# __ais-highlight__m__/ais-highlight__inio\n\nS3互換の環境を立ててくれるS3のクローンプロダクトだそうです\n\n[__ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio: __ais-highlight__M__/ais-highlight__inio is an object storage server compatible with Amazon S3 and licensed under Apache 2.0 License](https://github.com/__ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio)\n\n[https://github.com/__ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio:embed:cite]\n\n開発環境などでS3を用いたCIをまわすときとかに料金を気にせず使えそうですね\n\nさっそく試してみましょう\n\n# インストール、起動\n\n```\n__ais-highlight__m__/ais-highlight__kdir s3dir\ncurl https://dl.__ais-highlight__m__/ais-highlight__inio.io/server/__ais-highlight__m__/ais-highlight__inio/release/linux-amd64/__ais-highlight__m__/ais-highlight__inio > __ais-highlight__m__/ais-highlight__inio\nchmod +x __ais-highlight__m__/ais-highlight__inio\n./__ais-highlight__m__/ais-highlight__inio server s3dir\n```\n\n`./__ais-highlight__m__/ais-highlight__inio ${command} ${directory}`\n\nサブコマンドとオブジェクトを保存するディレクトリを指定するとサーバが起動します\n\n```\nEndpoint:  http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\nAccessKey: PX511CAFVA1T4DBVSV6B\nSecretKey: YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\nRegion:    us-east-1\n\nBrowser Access:\n   http://192.168.30.93:9000  http://10.0.2.15:9000  http://127.0.0.1:9000  http://172.17.0.1:9000  http://172.18.0.1:9000  http://172.19.0.1:9000\n\nCommand-line Access: https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-client-quickstart-guide\n   $ __ais-highlight__m__/ais-highlight__c config host add __ais-highlight__m__/ais-highlight__yminio http://192.168.30.93:9000 PX511CAFVA1T4DBVSV6B YykbLA1NZ+vC9AhcialR6IgfB41tk4zebZnUPRbN\n\nObject API (Amazon S3 compatible):\n   Go:         https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/golang-client-quickstart-guide\n   Java:       https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/java-client-quickstart-guide\n   Python:     https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/python-client-quickstart-guide\n   JavaScript: https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/javascript-client-quickstart-guide\n```\n\nエンドポイントやアクセスキーが表示されるのでそれを用いてCLIなどから操作していきます\n\n# Web UI\n\nデフォルト9000番でサービスが起動してWebからも__ais-highlight__m__/ais-highlight__inioに対して操作ができます\n\n![text](__ais-highlight__m__/ais-highlight__inio_s301.PNG )\n\n# docker image\n\ndockerのimageも用意してあるようなのでそっちを使ったほうが楽ですね\n\n[__ais-highlight__M__/ais-highlight__inio Docs](https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-docker-quickstart-guide)\n\n[https://docs.__ais-highlight__m__/ais-highlight__inio.io/docs/__ais-highlight__m__/ais-highlight__inio-docker-quickstart-guide:embed:cite]\n\n- docker-compose.yml\n\n```\n  s3minio:\n    image: __ais-highlight__m__/ais-highlight__inio/__ais-highlight__m__/ais-highlight__inio\n    ports:\n      - \"9000:9000\"\n    volumes:\n      - \"./tmps3:/export\"\n    environment:\n      - \"__ais-highlight__M__/ais-highlight__INIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\"\n      - \"__ais-highlight__M__/ais-highlight__INIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n```\n\n事前に`./tmps3`ディレクトリは作成しておきます\n\n- コンテナ起動\n\n```\ndocker-compose up\n```\n\nこれだけ、簡単すぎる!\n\n# 一通り試してみる\n\n環境構築が終わったのでSDK経由の操作をやってみます\n\ncredentialsはdocker-compose.ymlで指定した値を入力します\n\n- s3-in-__ais-highlight__m__/ais-highlight__inio.rb\n\n```\nrequire \"aws-sdk-core\"\nrequire \"tapp\"\n\ncredentials = Aws::Credentials.new(\n  'AKIAIOSFODNN7EXAMPLE',\n  'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'\n)\n\nclient = Aws::S3::Client.new(\n  credentials: credentials,\n  region: 'us-east-1',\n  endpoint: 'http://192.168.30.93:9000',\n  force_path_style: true\n)\n\nclient.list_buckets.tapp\nres = client.list_objects(bucket: \"sample\")\nres.contents.each do |o|\n  puts \"#{o.key}\"\nend\n\n# バケットの作成\n# client.create_bucket(bucket: 'aaa')\n#\n# ファイルのアップロード\n# file = File.open(\"sample.txt\")\n# filename = File.basename(\"sample.txt\")\n# client.put_object(\n#   bucket: \"sample\",\n#   body: file,\n#   key: filename\n# )\n\n# ファイルのダウンロード\n# dl_filename = \"index.html\"\n# File.open(dl_filename, \"w\") do |f|\n#   client.get_object(bucket: \"sample\", key: dl_filename) do |chunk|\n#     f.write(chunk)\n#   end\n# end\n```\n\n## gemのインストール\n\n```\n[s3sample]$ gem install aws-sdk tapp\n```\n\n一通りためした後のbucketリストなどが表示されました\n\n```\n[s3sample]$ ruby s3-in-__ais-highlight__m__/ais-highlight__inio.rb\n#<struct Aws::S3::Types::ListBucketsOutput\n buckets=\n  [#<struct Aws::S3::Types::Bucket\n    name=\"aaa\",\n    creation_date=2016-08-23 14:40:37 UTC>,\n   #<struct Aws::S3::Types::Bucket\n    name=\"sample\",\n    creation_date=2016-08-23 14:45:45 UTC>],\n owner=#<struct Aws::S3::Types::Owner display_name=\"__ais-highlight__m__/ais-highlight__inio\", id=\"__ais-highlight__m__/ais-highlight__inio\">>\nindex.html\nsample.txt\n```\n\n# まとめ\n\n簡単にS3互換の環境をローカルに立てることができました\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nプロダクションならS3で良いと思いますが、CI回したり、開発時のローカル環境用で使えそうです\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[B] mysql slow-logのlogrotate",
          "date": "2015-05-19",
          "slug": "mysql/20150519_mysql_logrotate",
          "url": "http://localhost:8001/mysql/20150519_mysql_logrotate",
          "section": "mysql/20150519_mysql_logrotate",
          "tags": ["MySQL"],
          "text": "# MySQL slow-logのlogrotate\n\n今まで動いていたログローテーションが動かなくなったので何だと思って調べたら色々はまったのでメモ\n\n```\n$ ls -al /var/lib/mysql\n-rw-rw---- 1 mysql mysql          0 May 14 04:08 mysql-slow.log\n-rw-rw---- 1 mysql mysql 7416685154 May 18 11:28 mysql-slow.log-20150514\n....\n....\n```\n\n現象は上記のようにファイル名は変わるけど書き込み先が変わらないというもの\n\n結果いつまでも20150514のファイルに書き込みいくし圧縮もされないしディスク容量も圧迫する\n\nまずはファイルを見てみましょう\n\n* /etc/logrotate.d/mysql\n\n```\n/var/lib/mysql/mysql-slow.log /var/lib/mysql/mysqld.log {\n        # create 600 mysql mysql\n        notifempty\n        daily\n        rotate 3\n        missingok\n        compress\n    postrotate\n        # just if mysqld is really running\n        if test -x /usr/bin/mysqladmin && \\\n           /usr/bin/mysqladmin ping &>/dev/null\n        then\n           /usr/bin/mysqladmin flush-logs\n        fi\n    endscript\n}\n```\n\n## パスワード設定\n\n設定自体は悪くなさそうだし、特に変更をしたわけではないのにどうして…。\n\nと思っていたらありました、直近でパスワードをrootユーザーに付与しましたw\n\nローテーション時にパスワードが入力できないのでmysqladminのflush-logsが実行されない\n\nよく見れば/etc/logrotate.d/mysqlにコメントアウトで書いてある…\n\nそれに従い/root/.my.cnfを設定\n\n* /root/.my.cnf\n\n```\n[mysqladmin]\npassword = passwd\nuser = root\n```\n\n600のパーミッションにもしたし。後は様子を見るだけ…。\n\nはい、ダメでしたー\n\n強制実行ではローテーションできるのにcrontabだと実行されない\n\n* 強制実行\n\n```\nlogrotate -f /etc/logrotate.d/mysql\n```\n\n## 環境変数\n\nコンソールで実行できてcronで実行できない、この手のトラブルはよくあるあれですね、環境変数\n\n他の記事にも書いてありましたが(URL忘れた...)\n\nrootユーザーのHOMEがうまく読み込まれていないことが原因\n\nなので下記のようにpostrotate実行時に適切な環境変数を設定してあげました\n\n```\n   postrotate\n        # just if mysqld is really running\n+        export HOME=/root/\n        if test -x /usr/bin/mysqladmin && \\\n}\n```\n\n## 無事\n\nrotateがされるようになりました、めでたしめでたしｗ\n\n\n",
          "objectID": "mysql/20150519_mysql_logrotate",
          "_snippetResult": {
            "text": {
              "value": "ょう\n\n* /etc/logrotate.d/__ais-highlight__m__/ais-highlight__ysql\n\n```\n/var/lib/__ais-highlight__m__/ais-highlight__ysql/__ais-highlight__m__/ais-highlight__ysql-slow.log /var/lib/__ais-highlight__m__/ais-highlight__ysql/__ais-highlight__m__/ais-highlight__ysqld.log {\n        # create 600 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql\n        notifempty\n        daily\n        rotate 3\n        __ais-highlight__m__/ais-highlight__issingok\n        compress\n    postrotate\n        # just if __ais-highlight__m__/ais-highlight__ysqld is really running\n        if test -x /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin && \\\n           /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin ping &>/dev/null\n        then\n           /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__m__/ais-highlight__ysql slow-logのlogrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2015-05-19",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20150519___ais-highlight__m__/ais-highlight__ysql_logrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__ysql/20150519___ais-highlight__m__/ais-highlight__ysql_logrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20150519___ais-highlight__m__/ais-highlight__ysql_logrotate",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__ySQL slow-logのlogrotate\n\n今まで動いていたログローテーションが動かなくなったので何だと思って調べたら色々はまったのでメモ\n\n```\n$ ls -al /var/lib/__ais-highlight__m__/ais-highlight__ysql\n-rw-rw---- 1 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql          0 __ais-highlight__M__/ais-highlight__ay 14 04:08 __ais-highlight__m__/ais-highlight__ysql-slow.log\n-rw-rw---- 1 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql 7416685154 __ais-highlight__M__/ais-highlight__ay 18 11:28 __ais-highlight__m__/ais-highlight__ysql-slow.log-20150514\n....\n....\n```\n\n現象は上記のようにファイル名は変わるけど書き込み先が変わらないというもの\n\n結果いつまでも20150514のファイルに書き込みいくし圧縮もされないしディスク容量も圧迫する\n\nまずはファイルを見てみましょう\n\n* /etc/logrotate.d/__ais-highlight__m__/ais-highlight__ysql\n\n```\n/var/lib/__ais-highlight__m__/ais-highlight__ysql/__ais-highlight__m__/ais-highlight__ysql-slow.log /var/lib/__ais-highlight__m__/ais-highlight__ysql/__ais-highlight__m__/ais-highlight__ysqld.log {\n        # create 600 __ais-highlight__m__/ais-highlight__ysql __ais-highlight__m__/ais-highlight__ysql\n        notifempty\n        daily\n        rotate 3\n        __ais-highlight__m__/ais-highlight__issingok\n        compress\n    postrotate\n        # just if __ais-highlight__m__/ais-highlight__ysqld is really running\n        if test -x /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin && \\\n           /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin ping &>/dev/null\n        then\n           /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin flush-logs\n        fi\n    endscript\n}\n```\n\n## パスワード設定\n\n設定自体は悪くなさそうだし、特に変更をしたわけではないのにどうして…。\n\nと思っていたらありました、直近でパスワードをrootユーザーに付与しましたw\n\nローテーション時にパスワードが入力できないので__ais-highlight__m__/ais-highlight__ysqladminのflush-logsが実行されない\n\nよく見れば/etc/logrotate.d/__ais-highlight__m__/ais-highlight__ysqlにコメントアウトで書いてある…\n\nそれに従い/root/.__ais-highlight__m__/ais-highlight__y.cnfを設定\n\n* /root/.__ais-highlight__m__/ais-highlight__y.cnf\n\n```\n[__ais-highlight__m__/ais-highlight__ysqladmin]\npassword = passwd\nuser = root\n```\n\n600のパーミッションにもしたし。後は様子を見るだけ…。\n\nはい、ダメでしたー\n\n強制実行ではローテーションできるのにcrontabだと実行されない\n\n* 強制実行\n\n```\nlogrotate -f /etc/logrotate.d/__ais-highlight__m__/ais-highlight__ysql\n```\n\n## 環境変数\n\nコンソールで実行できてcronで実行できない、この手のトラブルはよくあるあれですね、環境変数\n\n他の記事にも書いてありましたが(URL忘れた...)\n\nrootユーザーのHOMEがうまく読み込まれていないことが原因\n\nなので下記のようにpostrotate実行時に適切な環境変数を設定してあげました\n\n```\n   postrotate\n        # just if __ais-highlight__m__/ais-highlight__ysqld is really running\n+        export HOME=/root/\n        if test -x /usr/bin/__ais-highlight__m__/ais-highlight__ysqladmin && \\\n}\n```\n\n## 無事\n\nrotateがされるようになりました、めでたしめでたしｗ\n\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[B] MySQLのレプリケーション設定",
          "date": "2014-08-31",
          "slug": "mysql/20140831_mysql_replication",
          "url": "http://localhost:8001/mysql/20140831_mysql_replication",
          "section": "mysql/20140831_mysql_replication",
          "tags": ["MySQL"],
          "text": "# MySQLのレプリケーション設定\r\n\r\n基本的なレプリケーションについて、master-slave1台ずつの構成をサンプルにしてます。\r\n\r\n* master(192.168.1.11)\r\n* slave(192.168.1.12)\r\n\r\n## masterの設定\r\n\r\n* レプリケーション用ユーザーの作成\r\n\r\nslave(192.168.1.0/24)からserver2というユーザーでrelay_logを取得しにくる許可をする\r\n\r\n```txt\r\n> GRANT REPLICATION SLAVE ON *.* TO 'server2'@'192.168.1.0/255.255.255.0';\r\n```\r\n\r\n* my.cnf\r\n\r\n```txt\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nserver-id=1\r\n```\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nserver-idは実運用のときはIPの台4オクテットとか分かりやすいようにしたほうが良いと思います。\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\n## slaveの設定\r\n\r\n```txt\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nlog_slave_updates\r\nserver-id=2\r\n```\r\n\r\nslaveをmasterとして使う場合がある場合は下記を追加\r\n\r\n`log_slave_updates`\r\n\r\n\r\n## スナップショットの作成 at master\r\n\r\n* ロック、binlogのポジションを確認\r\n\r\n```txt\r\n> flush tables with read lock;\r\n> show master status;\r\n+------------------+----------+--------------+------------------+\r\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n+------------------+----------+--------------+------------------+\r\n| mysql-bin.000001 |      396 |              |                  |\r\n+------------------+----------+--------------+------------------+\r\n```\r\n\r\n* ロックしている間にダンプファイルを作成する\r\n\r\n```txt\r\nmysqldump -u root -p database_name --lock-all-tables > dump.sql\r\n```\r\n\r\n* ロック解除\r\n\r\n```sql\r\nunlock tables;\r\n```\r\n\r\nextrabackupなどですでにバックアップをとっていてslave_infoなどがある場合\r\n\r\nそちらを使えばダンプファイルを生成するためのロックやダンプは必要なくて、ただバックアップファイルからslaveを構築するだけです。\r\n\r\n## レプリケーションの設定 at slave\r\n\r\nshow amster statusで得た情報をchange master toでmaster_log_file,master_log_posに入力\r\n\r\n* dumpファイルの展開\r\n\r\n`mysql -u root --default-character-set=utf8 -A database_name < dump.sql`\r\n\r\n* masterの情報登録\r\n\r\n```txt\r\nchange master to\r\n  master_host='192.168.1.11', #masterのIP\r\n  master_user='server2',      #レプリケーション用のユーザ名(masterにGRANTで追加したユーザ名)\r\n  master_password='',\r\n  master_log_file='mysql-bin.000004',\r\n  master_log_pos=107;\r\n\r\nstart slave;\r\n```\r\n\r\n* 確認\r\n\r\n```txt\r\n> show slave status\\G\r\n```\r\n\r\n下記項目を確認し問題なければOK\r\n```txt\r\nSlave_IO_Running: Yes\r\nSlave_SQL_Running: Yes\r\nLast_IO_Error:\r\nLast_SQL_Error:\r\n```\r\n\r\nmasterで更新系クエリ発行、slaveで確認\r\n\r\n無事レプリケーションは完了\r\n\r\n* スレーブの停止\r\n\r\n`change master to`を発行するときはslaveの機能は止まっている必要があるので\r\n\r\nすでにslaveが動いているときに`change master to`を発行したいときは`stop slave`でレプリケーションをとめてあげる必要がある\r\n\r\n```txt\r\n> stop slave;\r\n```\r\n\r\n",
          "objectID": "mysql/20140831_mysql_replication",
          "_snippetResult": {
            "text": {
              "value": "た情報をchange __ais-highlight__m__/ais-highlight__aster toで__ais-highlight__m__/ais-highlight__aster_log_file,__ais-highlight__m__/ais-highlight__aster_log_posに入力\r\n\r\n* dumpファイルの展開\r\n\r\n`__ais-highlight__m__/ais-highlight__ysql -u root --default-character-set=utf8 -A database_name < dump.sql`\r\n\r\n* __ais-highlight__m__/ais-highlight__asterの情報登録\r\n\r\n```txt\r\nchange __ais-highlight__m__/ais-highlight__aster to\r\n  __ais-highlight__m__/ais-highlight__aster_host='192",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__M__/ais-highlight__ySQLのレプリケーション設定",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2014-08-31",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20140831___ais-highlight__m__/ais-highlight__ysql_replication",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__ysql/20140831___ais-highlight__m__/ais-highlight__ysql_replication",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20140831___ais-highlight__m__/ais-highlight__ysql_replication",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__ySQLのレプリケーション設定\r\n\r\n基本的なレプリケーションについて、__ais-highlight__m__/ais-highlight__aster-slave1台ずつの構成をサンプルにしてます。\r\n\r\n* __ais-highlight__m__/ais-highlight__aster(192.168.1.11)\r\n* slave(192.168.1.12)\r\n\r\n## __ais-highlight__m__/ais-highlight__asterの設定\r\n\r\n* レプリケーション用ユーザーの作成\r\n\r\nslave(192.168.1.0/24)からserver2というユーザーでrelay_logを取得しにくる許可をする\r\n\r\n```txt\r\n> GRANT REPLICATION SLAVE ON *.* TO 'server2'@'192.168.1.0/255.255.255.0';\r\n```\r\n\r\n* __ais-highlight__m__/ais-highlight__y.cnf\r\n\r\n```txt\r\n[__ais-highlight__m__/ais-highlight__ysqld]\r\nlog-bin=__ais-highlight__m__/ais-highlight__ysql-bin\r\nserver-id=1\r\n```\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nserver-idは実運用のときはIPの台4オクテットとか分かりやすいようにしたほうが良いと思います。\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\n## slaveの設定\r\n\r\n```txt\r\n[__ais-highlight__m__/ais-highlight__ysqld]\r\nlog-bin=__ais-highlight__m__/ais-highlight__ysql-bin\r\nlog_slave_updates\r\nserver-id=2\r\n```\r\n\r\nslaveを__ais-highlight__m__/ais-highlight__asterとして使う場合がある場合は下記を追加\r\n\r\n`log_slave_updates`\r\n\r\n\r\n## スナップショットの作成 at __ais-highlight__m__/ais-highlight__aster\r\n\r\n* ロック、binlogのポジションを確認\r\n\r\n```txt\r\n> flush tables with read lock;\r\n> show __ais-highlight__m__/ais-highlight__aster status;\r\n+------------------+----------+--------------+------------------+\r\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n+------------------+----------+--------------+------------------+\r\n| __ais-highlight__m__/ais-highlight__ysql-bin.000001 |      396 |              |                  |\r\n+------------------+----------+--------------+------------------+\r\n```\r\n\r\n* ロックしている間にダンプファイルを作成する\r\n\r\n```txt\r\n__ais-highlight__m__/ais-highlight__ysqldump -u root -p database_name --lock-all-tables > dump.sql\r\n```\r\n\r\n* ロック解除\r\n\r\n```sql\r\nunlock tables;\r\n```\r\n\r\nextrabackupなどですでにバックアップをとっていてslave_infoなどがある場合\r\n\r\nそちらを使えばダンプファイルを生成するためのロックやダンプは必要なくて、ただバックアップファイルからslaveを構築するだけです。\r\n\r\n## レプリケーションの設定 at slave\r\n\r\nshow amster statusで得た情報をchange __ais-highlight__m__/ais-highlight__aster toで__ais-highlight__m__/ais-highlight__aster_log_file,__ais-highlight__m__/ais-highlight__aster_log_posに入力\r\n\r\n* dumpファイルの展開\r\n\r\n`__ais-highlight__m__/ais-highlight__ysql -u root --default-character-set=utf8 -A database_name < dump.sql`\r\n\r\n* __ais-highlight__m__/ais-highlight__asterの情報登録\r\n\r\n```txt\r\nchange __ais-highlight__m__/ais-highlight__aster to\r\n  __ais-highlight__m__/ais-highlight__aster_host='192.168.1.11', #__ais-highlight__m__/ais-highlight__asterのIP\r\n  __ais-highlight__m__/ais-highlight__aster_user='server2',      #レプリケーション用のユーザ名(__ais-highlight__m__/ais-highlight__asterにGRANTで追加したユーザ名)\r\n  __ais-highlight__m__/ais-highlight__aster_password='',\r\n  __ais-highlight__m__/ais-highlight__aster_log_file='__ais-highlight__m__/ais-highlight__ysql-bin.000004',\r\n  __ais-highlight__m__/ais-highlight__aster_log_pos=107;\r\n\r\nstart slave;\r\n```\r\n\r\n* 確認\r\n\r\n```txt\r\n> show slave status\\G\r\n```\r\n\r\n下記項目を確認し問題なければOK\r\n```txt\r\nSlave_IO_Running: Yes\r\nSlave_SQL_Running: Yes\r\nLast_IO_Error:\r\nLast_SQL_Error:\r\n```\r\n\r\n__ais-highlight__m__/ais-highlight__asterで更新系クエリ発行、slaveで確認\r\n\r\n無事レプリケーションは完了\r\n\r\n* スレーブの停止\r\n\r\n`change __ais-highlight__m__/ais-highlight__aster to`を発行するときはslaveの機能は止まっている必要があるので\r\n\r\nすでにslaveが動いているときに`change __ais-highlight__m__/ais-highlight__aster to`を発行したいときは`stop slave`でレプリケーションをとめてあげる必要がある\r\n\r\n```txt\r\n> stop slave;\r\n```\r\n\r\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[B] mysqldump",
          "date": "2013-09-10",
          "slug": "mysql/20130910_dump",
          "url": "http://localhost:8001/mysql/20130910_dump",
          "section": "mysql/20130910_dump",
          "tags": ["MySQL"],
          "text": "# MySQL dumpのオプション\r\n\r\nテスト用にデータ持ってくるときとか、開発時たまに使うけど、いざ使おうとするときに忘れているパターンがあったので備忘録として。\r\n\r\nmysqldumpで条件指定したりするときのメモ\r\n\r\n\r\n* データ構造のみ取得したい場合\r\n\r\n```\r\nmysqldump -u user -d database table > dump.sql\r\n```\r\n\r\n* データだけ取得したいとき\r\n\r\n```\r\n mysqldump -u user -t database table > dump.sql\r\n```\r\n\r\n* 条件を指定して出力\r\n\r\n`\"--where=*****\"`,`\"-w=*****\"`\r\n\r\n*****には普通にWHERE句を指定する感じで複数条件を指定可能\r\n\r\n```\r\n mysqldump -u user -t database table \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n\r\n* 該当テーブルにトリガーがあったりする場合は「--skip-triggers」を入れる\r\n公式には書いてありますが、期間が開くとつい忘れる…\r\n\r\n```\r\n mysqldump -u user -t database table --skip-triggers \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n",
          "objectID": "mysql/20130910_dump",
          "_snippetResult": {
            "text": {
              "value": "定したりするときのメモ\r\n\r\n\r\n* データ構造のみ取得したい場合\r\n\r\n```\r\n__ais-highlight__m__/ais-highlight__ysqldump -u user -d database table > dump.sql\r\n```\r\n\r\n* データだけ取得したいとき\r\n\r\n```\r\n __ais-highlight__m__/ais-highlight__ysqldump -u user -t database",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__m__/ais-highlight__ysqldump",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2013-09-10",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20130910_dump",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__ysql/20130910_dump",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ysql/20130910_dump",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__M__/ais-highlight__ySQL dumpのオプション\r\n\r\nテスト用にデータ持ってくるときとか、開発時たまに使うけど、いざ使おうとするときに忘れているパターンがあったので備忘録として。\r\n\r\n__ais-highlight__m__/ais-highlight__ysqldumpで条件指定したりするときのメモ\r\n\r\n\r\n* データ構造のみ取得したい場合\r\n\r\n```\r\n__ais-highlight__m__/ais-highlight__ysqldump -u user -d database table > dump.sql\r\n```\r\n\r\n* データだけ取得したいとき\r\n\r\n```\r\n __ais-highlight__m__/ais-highlight__ysqldump -u user -t database table > dump.sql\r\n```\r\n\r\n* 条件を指定して出力\r\n\r\n`\"--where=*****\"`,`\"-w=*****\"`\r\n\r\n*****には普通にWHERE句を指定する感じで複数条件を指定可能\r\n\r\n```\r\n __ais-highlight__m__/ais-highlight__ysqldump -u user -t database table \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n\r\n* 該当テーブルにトリガーがあったりする場合は「--skip-triggers」を入れる\r\n公式には書いてありますが、期間が開くとつい忘れる…\r\n\r\n```\r\n __ais-highlight__m__/ais-highlight__ysqldump -u user -t database table --skip-triggers \"--where=date between '2013-08-01' and '2013-09-08' and user_id = 11075\" > dump.sql\r\n```\r\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[B] mongoDBを使ってみる",
          "date": "2015-03-11",
          "slug": "mongoDB/20150311_mongodb_start",
          "url": "http://localhost:8001/mongoDB/20150311_mongodb_start",
          "section": "mongoDB/20150311_mongodb_start",
          "tags": ["MongoDB"],
          "text": "# mongoDBを使ってみる\n\n## インストール\n\n* /etc/yum.repo.d/10gen.reop\n\n```\n[10gen]\nname=10gen Repository\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686\ngpgcheck=0\nenabled=1\n```\n\n* インストール\n\n```\nyum install mongo-10gen mongo-10gen-server\n```\n\n* 起動\n\n```\n/etc/init.d/mongod start\nmongod --version\n```\n\n* シェルの起動\n\n```\n$ mongo\n# DB一覧\n> show dbs\n# 使用するDBを選択\n> use aaa (存在していなくてもOK)\n# コレクション一覧\n> show collections\n# 現在使用しているDB\n> db\naaa\n```\n\n* CRUD操作\ndb.${コレクション名}.${メソッド名}\n\n```\n# insert\n> db.test.insert({ \"key1\": \"value1\", \"key2\": \"value2\" })\n# 全件取得\n> db.test.find()\n# 条件付き取得\n> db.test.find({\"key1\": \"value1\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n> db.test.find({\"key2\": \"value2\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n# keyの指定(第2引数で返却するkeyを指定できる)\n> db.test.find(null, {key3: 1})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\") }\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\" }\n# 1件取得\n> db.test.findOne()\n\n# 更新\n> db.test.update({\"key3\": \"value3\"}, {settest: true})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"settest\" : true }\n# $setで特定のkeyを更新できる\n> db.test.update({\"key3\": \"value3\"},{$set: {settest: true}})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\", \"key4\" : \"value4\", \"settest\" : true }\n# 数値計算\n> db.test.insert({\"key\": \"count\", \"count\": 1})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 1, \"key\" : \"count\" }\n> db.test.update({key: \"count\"}, {$inc: {count: -1}})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 0, \"key\" : \"count\" }\n# update or insert\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 1 }\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 2 }\n# 複数更新(updateはデフォルトで最後に見つかったドキュメントのみを更新する)\ndb.test.update({},{$set: {\"bulk\": true}},false,true)\n```\n\n* 入れ子\n\n```\n# keyを.でつなげて指定ができる\n> db.test.insert({ name: \"Taro\", family: {mother: \"Hanako\", father: \"Ichiro\"}})\ndb.test.find({ 'family.mother': \"Hanako\"})\n{ \"_id\" : ObjectId(\"54ff0fe8bb8ce4ca0f6b9913\"), \"name\" : \"Taro\", \"family\" : { \"mother\" : \"Hanako\", \"father\" : \"Ichiro\" } }\n```\n\n* 他\n\n```\n# コレクションの情報を表示\n> db.test.stats()\n# 見やすいように成形\n> db.test.find().pretty()\n```\n\n# Perlから使ってみる\n\nちょっと触ってみて面白くなってきたのでPerlから使ってみました\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nuse utf8;\n\nuse MongoDB;\nuse Data::Dumper;\nuse JSON;\n\nmy $client = MongoDB::MongoClient->new();\nmy $db = $client->get_database('perl_db');\nmy $collection = $db->get_collection('perl_collection');\n# $collection->insert({ \"key\" => \"value1\"});\n# $collection->update({ \"key\"=>\"value\"},{ '$set'=>{\"name\" => \"taro\"} } );\n$collection->update({ \"key\" => \"count\"}, {'$inc' => {\"count\" => 2 }});\n\nmy $results = $collection->find();\n\nwhile ( my $row = $results->next ) {\n  print \"ObjectId: \" . $row->{ _id } . \"\\t\";\n  delete $row->{ _id };\n  my $json = encode_json( $row );\n  print $json . \"\\n\";\n}\n```\n\n```\n$ perl mongo.pl\nObjectId: 54ff29e6e138232f91316fb1 {\"key\":\"value1\"}\nObjectId: 54ff2af2e13823430d0ac901 {\"key\":\"value1\"}\nObjectId: 54ff29bbe138230f647018c1 {\"key\":\"value\",\"name\":\"taro\"}\nObjectId: 55003842e138236f7c3d91e1 {\"key\":\"count\",\"count\":19}\n```\n\nとても簡単に実装できそう、とりあえずアンケートアプリケーションでも作ろうか…\n",
          "objectID": "mongoDB/20150311_mongodb_start",
          "_snippetResult": {
            "text": {
              "value": "name=10gen Repository\nbaseurl=http://downloads-distro.__ais-highlight__m__/ais-highlight__ongodb.org/repo/redhat/os/i686\ngpgcheck=0\nenabled=1\n```\n\n* インストール\n\n```\nyum install __ais-highlight__m__/ais-highlight__ongo-10gen __ais-highlight__m__/ais-highlight__ongo-10gen-server\n```\n\n* 起動\n\n```\n/etc/init.d/__ais-highlight__m__/ais-highlight__ongod start\n__ais-highlight__m__/ais-highlight__ongod --version\n```\n\n* シェルの起動\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo\n# DB一覧",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__m__/ais-highlight__ongoDBを使ってみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2015-03-11",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/20150311___ais-highlight__m__/ais-highlight__ongodb_start",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__ongoDB/20150311___ais-highlight__m__/ais-highlight__ongodb_start",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__ongoDB/20150311___ais-highlight__m__/ais-highlight__ongodb_start",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ongoDB",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__ongoDBを使ってみる\n\n## インストール\n\n* /etc/yum.repo.d/10gen.reop\n\n```\n[10gen]\nname=10gen Repository\nbaseurl=http://downloads-distro.__ais-highlight__m__/ais-highlight__ongodb.org/repo/redhat/os/i686\ngpgcheck=0\nenabled=1\n```\n\n* インストール\n\n```\nyum install __ais-highlight__m__/ais-highlight__ongo-10gen __ais-highlight__m__/ais-highlight__ongo-10gen-server\n```\n\n* 起動\n\n```\n/etc/init.d/__ais-highlight__m__/ais-highlight__ongod start\n__ais-highlight__m__/ais-highlight__ongod --version\n```\n\n* シェルの起動\n\n```\n$ __ais-highlight__m__/ais-highlight__ongo\n# DB一覧\n> show dbs\n# 使用するDBを選択\n> use aaa (存在していなくてもOK)\n# コレクション一覧\n> show collections\n# 現在使用しているDB\n> db\naaa\n```\n\n* CRUD操作\ndb.${コレクション名}.${メソッド名}\n\n```\n# insert\n> db.test.insert({ \"key1\": \"value1\", \"key2\": \"value2\" })\n# 全件取得\n> db.test.find()\n# 条件付き取得\n> db.test.find({\"key1\": \"value1\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n> db.test.find({\"key2\": \"value2\"})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\"), \"key1\" : \"value1\", \"key2\" : \"value2\" }\n# keyの指定(第2引数で返却するkeyを指定できる)\n> db.test.find(null, {key3: 1})\n{ \"_id\" : ObjectId(\"54feffaabb8ce4ca0f6b990e\") }\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\" }\n# 1件取得\n> db.test.findOne()\n\n# 更新\n> db.test.update({\"key3\": \"value3\"}, {settest: true})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"settest\" : true }\n# $setで特定のkeyを更新できる\n> db.test.update({\"key3\": \"value3\"},{$set: {settest: true}})\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff002cbb8ce4ca0f6b990f\"), \"key3\" : \"value3\", \"key4\" : \"value4\", \"settest\" : true }\n# 数値計算\n> db.test.insert({\"key\": \"count\", \"count\": 1})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 1, \"key\" : \"count\" }\n> db.test.update({key: \"count\"}, {$inc: {count: -1}})\n{ \"_id\" : ObjectId(\"54ff06bcbb8ce4ca0f6b9912\"), \"count\" : 0, \"key\" : \"count\" }\n# update or insert\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n> db.test.find()\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 1 }\n> db.test.update({\"key\": \"test\"}, {$inc: {count: 1}}, true)\n{ \"_id\" : ObjectId(\"54ff08bdb68567dff13a9a8d\"), \"key\" : \"test\", \"count\" : 2 }\n# 複数更新(updateはデフォルトで最後に見つかったドキュメントのみを更新する)\ndb.test.update({},{$set: {\"bulk\": true}},false,true)\n```\n\n* 入れ子\n\n```\n# keyを.でつなげて指定ができる\n> db.test.insert({ name: \"Taro\", family: {__ais-highlight__m__/ais-highlight__other: \"Hanako\", father: \"Ichiro\"}})\ndb.test.find({ 'family.__ais-highlight__m__/ais-highlight__other': \"Hanako\"})\n{ \"_id\" : ObjectId(\"54ff0fe8bb8ce4ca0f6b9913\"), \"name\" : \"Taro\", \"family\" : { \"__ais-highlight__m__/ais-highlight__other\" : \"Hanako\", \"father\" : \"Ichiro\" } }\n```\n\n* 他\n\n```\n# コレクションの情報を表示\n> db.test.stats()\n# 見やすいように成形\n> db.test.find().pretty()\n```\n\n# Perlから使ってみる\n\nちょっと触ってみて面白くなってきたのでPerlから使ってみました\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nuse utf8;\n\nuse __ais-highlight__M__/ais-highlight__ongoDB;\nuse Data::Dumper;\nuse JSON;\n\n__ais-highlight__m__/ais-highlight__y $client = __ais-highlight__M__/ais-highlight__ongoDB::__ais-highlight__M__/ais-highlight__ongoClient->new();\n__ais-highlight__m__/ais-highlight__y $db = $client->get_database('perl_db');\n__ais-highlight__m__/ais-highlight__y $collection = $db->get_collection('perl_collection');\n# $collection->insert({ \"key\" => \"value1\"});\n# $collection->update({ \"key\"=>\"value\"},{ '$set'=>{\"name\" => \"taro\"} } );\n$collection->update({ \"key\" => \"count\"}, {'$inc' => {\"count\" => 2 }});\n\n__ais-highlight__m__/ais-highlight__y $results = $collection->find();\n\nwhile ( __ais-highlight__m__/ais-highlight__y $row = $results->next ) {\n  print \"ObjectId: \" . $row->{ _id } . \"\\t\";\n  delete $row->{ _id };\n  __ais-highlight__m__/ais-highlight__y $json = encode_json( $row );\n  print $json . \"\\n\";\n}\n```\n\n```\n$ perl __ais-highlight__m__/ais-highlight__ongo.pl\nObjectId: 54ff29e6e138232f91316fb1 {\"key\":\"value1\"}\nObjectId: 54ff2af2e13823430d0ac901 {\"key\":\"value1\"}\nObjectId: 54ff29bbe138230f647018c1 {\"key\":\"value\",\"name\":\"taro\"}\nObjectId: 55003842e138236f7c3d91e1 {\"key\":\"count\",\"count\":19}\n```\n\nとても簡単に実装できそう、とりあえずアンケートアプリケーションでも作ろうか…\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[B] memcachedの接続数",
          "date": "2014-09-21",
          "slug": "memcached/20140921_memcached",
          "url": "http://localhost:8001/memcached/20140921_memcached",
          "section": "memcached/20140921_memcached",
          "tags": ["memcached"],
          "text": "# memcachedの接続数\r\n\r\n障害が起きたときの話\r\n\r\n現象としては処理の詰まり\r\n\r\n結構何度か起きていたんだけど今までは\r\n\r\n* 分間2000アクセスくらい発生(MySQLの同一レコードへのupdateが発生)\r\n* 同一レコードへのロックが発生してロック待ち\r\n* バックエンドの同時接続数がオーバーしてアラート\r\n\r\nっていう流れでした。\r\n\r\n同一レコードへのupdateは性質上変えるのが難しいということで、おおがかりな修正で対応する予定だったのですが\r\n\r\n先日同じ現象が起きたときは分間500位しかなかったので別の原因があるのではという流れに\r\n\r\n同時位にmemcachedのアラートも飛んでいたので調べてみる\r\n\r\n```\r\n$ ps aux | grep memcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 memcached -d -p 11211 -u memcached -m 3072 -c 2048 -P /var/run/memcached/memcached.pid\r\n```\r\n\r\nグラフで接続数を見ると2000超えている!\r\n\r\nアプリケーション側でのmemcacheへの接続timeout秒数はデフォルトで25秒のようなのでこのmemcacheが詰っていた可能性が高いかも\r\n\r\nバックエンドのアラートが上がったのとcacheへのsetエラーが出てきたのもほぼ同時なのでほぼ間違いないと判断\r\n\r\n```\r\n$ cat /etc/sysconfig/memcached\r\nPORT=\"11211\"     #ポート\r\nUSER=\"memcached\" #ユーザー\r\nMAXCONN=\"4096\"   #同時接続上限数\r\nCACHESIZE=\"3072\" #キャッシュサイズ\r\nOPTIONS=\"\"       #オプション\r\n```\r\n\r\nMAXCONNを書き換えて4096にしました。\r\n\r\n```\r\n$ /etc/init.d/memcached restart\r\n$ ps aux | grep memcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 memcached -d -p 11211 -u memcached -m 3072 -c 4096 -P /var/run/memcached/memcached.pid\r\n```\r\n\r\n```\r\n$ ps aux | grep memcached\r\n25486\r\n```\r\n\r\n<!-- textlint-disable spellcheck-tech-word,prh -->\r\nファイルディスクリプタも変更されているのを確認\r\n<!-- textlint-enable spellcheck-tech-word,prh -->\r\n\r\n```\r\ncat /proc/25486/limits\r\nMax open files            4096                 4096                 files\r\n```\r\n\r\nこれでとりあえず様子見\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nもしかしたら他にも原因があるのかもしれないけど現状落ち着いたのでおそらく問題ないかなと…\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\nってかバランサ(httpd)の接続数増やしたときにmemcachedも増やしておくべきでしたね\r\n\r\n",
          "objectID": "memcached/20140921_memcached",
          "_snippetResult": {
            "text": {
              "value": "た。\r\n\r\n```\r\n$ /etc/init.d/__ais-highlight__m__/ais-highlight__emcached restart\r\n$ ps aux | grep __ais-highlight__m__/ais-highlight__emcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 __ais-highlight__m__/ais-highlight__emcached -d -p 11211 -u __ais-highlight__m__/ais-highlight__emcached -__ais-highlight__m__/ais-highlight__ 3072 -c 4096 -P /var/run/__ais-highlight__m__/ais-highlight__emcached/__ais-highlight__m__/ais-highlight__emcached.pid\r\n```\r\n\r\n```\r\n$ ps aux | grep __ais-highlight__m__/ais-highlight__emcached\r\n25486\r\n```\r\n\r\n<!-- textlint-disable spellcheck",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__m__/ais-highlight__emcachedの接続数",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2014-09-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "__ais-highlight__m__/ais-highlight__emcached/20140921___ais-highlight__m__/ais-highlight__emcached",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/__ais-highlight__m__/ais-highlight__emcached/20140921___ais-highlight__m__/ais-highlight__emcached",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "__ais-highlight__m__/ais-highlight__emcached/20140921___ais-highlight__m__/ais-highlight__emcached",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__m__/ais-highlight__emcached",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__emcachedの接続数\r\n\r\n障害が起きたときの話\r\n\r\n現象としては処理の詰まり\r\n\r\n結構何度か起きていたんだけど今までは\r\n\r\n* 分間2000アクセスくらい発生(__ais-highlight__M__/ais-highlight__ySQLの同一レコードへのupdateが発生)\r\n* 同一レコードへのロックが発生してロック待ち\r\n* バックエンドの同時接続数がオーバーしてアラート\r\n\r\nっていう流れでした。\r\n\r\n同一レコードへのupdateは性質上変えるのが難しいということで、おおがかりな修正で対応する予定だったのですが\r\n\r\n先日同じ現象が起きたときは分間500位しかなかったので別の原因があるのではという流れに\r\n\r\n同時位に__ais-highlight__m__/ais-highlight__emcachedのアラートも飛んでいたので調べてみる\r\n\r\n```\r\n$ ps aux | grep __ais-highlight__m__/ais-highlight__emcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 __ais-highlight__m__/ais-highlight__emcached -d -p 11211 -u __ais-highlight__m__/ais-highlight__emcached -__ais-highlight__m__/ais-highlight__ 3072 -c 2048 -P /var/run/__ais-highlight__m__/ais-highlight__emcached/__ais-highlight__m__/ais-highlight__emcached.pid\r\n```\r\n\r\nグラフで接続数を見ると2000超えている!\r\n\r\nアプリケーション側での__ais-highlight__m__/ais-highlight__emcacheへの接続timeout秒数はデフォルトで25秒のようなのでこの__ais-highlight__m__/ais-highlight__emcacheが詰っていた可能性が高いかも\r\n\r\nバックエンドのアラートが上がったのとcacheへのsetエラーが出てきたのもほぼ同時なのでほぼ間違いないと判断\r\n\r\n```\r\n$ cat /etc/sysconfig/__ais-highlight__m__/ais-highlight__emcached\r\nPORT=\"11211\"     #ポート\r\nUSER=\"__ais-highlight__m__/ais-highlight__emcached\" #ユーザー\r\n__ais-highlight__M__/ais-highlight__AXCONN=\"4096\"   #同時接続上限数\r\nCACHESIZE=\"3072\" #キャッシュサイズ\r\nOPTIONS=\"\"       #オプション\r\n```\r\n\r\n__ais-highlight__M__/ais-highlight__AXCONNを書き換えて4096にしました。\r\n\r\n```\r\n$ /etc/init.d/__ais-highlight__m__/ais-highlight__emcached restart\r\n$ ps aux | grep __ais-highlight__m__/ais-highlight__emcached\r\n498      25486  0.4  0.2 340052 10644 ?        Ssl  18:59   0:00 __ais-highlight__m__/ais-highlight__emcached -d -p 11211 -u __ais-highlight__m__/ais-highlight__emcached -__ais-highlight__m__/ais-highlight__ 3072 -c 4096 -P /var/run/__ais-highlight__m__/ais-highlight__emcached/__ais-highlight__m__/ais-highlight__emcached.pid\r\n```\r\n\r\n```\r\n$ ps aux | grep __ais-highlight__m__/ais-highlight__emcached\r\n25486\r\n```\r\n\r\n<!-- textlint-disable spellcheck-tech-word,prh -->\r\nファイルディスクリプタも変更されているのを確認\r\n<!-- textlint-enable spellcheck-tech-word,prh -->\r\n\r\n```\r\ncat /proc/25486/limits\r\n__ais-highlight__M__/ais-highlight__ax open files            4096                 4096                 files\r\n```\r\n\r\nこれでとりあえず様子見\r\n\r\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\r\nもしかしたら他にも原因があるのかもしれないけど現状落ち着いたのでおそらく問題ないかなと…\r\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\r\n\r\nってかバランサ(httpd)の接続数増やしたときに__ais-highlight__m__/ais-highlight__emcachedも増やしておくべきでしたね\r\n\r\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[angular] moment-rangeを使いたい",
          "date": "2017-10-06",
          "slug": "javascript/angular_moment_range",
          "url": "http://localhost:8001/javascript/angular_moment_range",
          "section": "javascript/angular_moment_range",
          "tags": ["JavaScript", "TypeScript", "Angular"],
          "text": "# [Angular] moment-rangeを使いたい\n\n単純にmomentとmoment-rangeをimportしただけだとコンパイルが通らず使えないので対応する必要がありました\n\nstackoverflowなどでこうしたら良いよって書いてあったのでやってみたがコンパイルエラーで通らない\n\n使えるようになるまでにやったことのメモ\n\nversionは4です\n\n- install\n\n```\nnpm install --save moment moment-range @types/moment @types/moment-range\n```\n\n- 参考\n\n[Typescript usage · Issue #120 · rotaready/moment-range](https://github.com/rotaready/moment-range/issues/120)\n\n[https://github.com/rotaready/moment-range/issues/120:embed:cite]\n\n上記参考にしてextendmomentを使ってrangeを使えるようにしてみた\n\n- app.component.ts\n\n```\nimport Moment from 'moment';\nimport {extendMoment} from 'moment-range';\nconst moment = extendMoment(Moment);\n```\n\n上記で、できるかと思ったができなかった\n\n\nコンパイルできずにエラー\n\n```\nModule '\"/home/vagrant/sandbox/ngx-sample/node_modules/moment/moment\"' has no default export.\n```\n\nTypeScriptのimportに制限があるようでオプションを変えることで上記のコードでmoment-rangeが使えるようになるそう\n\n- tsconfig.json\n\n```\n\"allowSyntheticDefaultImports\": true,\n```\n\nこのオプションをつけることで`extendMoment`がimportできるようになる\n\n- 参考\n\n[TypeScript の ES6 modules の解釈と allowSyntheticDefaultImports の整理 - Qiita](https://qiita.com/bouzuya/items/edf5274241b50f32c621)\n\n[https://qiita.com/bouzuya/items/edf5274241b50f32c621:embed:cite]\n\nworkarroundっぽいけどいったんはこれで使えます\n\n",
          "objectID": "javascript/angular_moment_range",
          "_snippetResult": {
            "text": {
              "value": "でにやったことのメモ\n\nversionは4です\n\n- install\n\n```\nnpm install --save __ais-highlight__m__/ais-highlight__oment __ais-highlight__m__/ais-highlight__oment-range @types/__ais-highlight__m__/ais-highlight__oment @types/__ais-highlight__m__/ais-highlight__oment-range\n```\n\n- 参考\n\n[Typescript usage · Issue #120 · rotaready/__ais-highlight__m__/ais-highlight__oment-range](https://github.com/rotaready/__ais-highlight__m__/ais-highlight__oment-range/issues/120)\n\n[https://github.com/rotaready/__ais-highlight__m__/ais-highlight__oment-range",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[angular] __ais-highlight__m__/ais-highlight__oment-rangeを使いたい",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2017-10-06",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "javascript/angular___ais-highlight__m__/ais-highlight__oment_range",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/javascript/angular___ais-highlight__m__/ais-highlight__oment_range",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "javascript/angular___ais-highlight__m__/ais-highlight__oment_range",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "Angular", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# [Angular] __ais-highlight__m__/ais-highlight__oment-rangeを使いたい\n\n単純に__ais-highlight__m__/ais-highlight__omentと__ais-highlight__m__/ais-highlight__oment-rangeをimportしただけだとコンパイルが通らず使えないので対応する必要がありました\n\nstackoverflowなどでこうしたら良いよって書いてあったのでやってみたがコンパイルエラーで通らない\n\n使えるようになるまでにやったことのメモ\n\nversionは4です\n\n- install\n\n```\nnpm install --save __ais-highlight__m__/ais-highlight__oment __ais-highlight__m__/ais-highlight__oment-range @types/__ais-highlight__m__/ais-highlight__oment @types/__ais-highlight__m__/ais-highlight__oment-range\n```\n\n- 参考\n\n[Typescript usage · Issue #120 · rotaready/__ais-highlight__m__/ais-highlight__oment-range](https://github.com/rotaready/__ais-highlight__m__/ais-highlight__oment-range/issues/120)\n\n[https://github.com/rotaready/__ais-highlight__m__/ais-highlight__oment-range/issues/120:embed:cite]\n\n上記参考にしてextendmomentを使ってrangeを使えるようにしてみた\n\n- app.component.ts\n\n```\nimport __ais-highlight__M__/ais-highlight__oment from '__ais-highlight__m__/ais-highlight__oment';\nimport {extendMoment} from '__ais-highlight__m__/ais-highlight__oment-range';\nconst __ais-highlight__m__/ais-highlight__oment = extendMoment(__ais-highlight__M__/ais-highlight__oment);\n```\n\n上記で、できるかと思ったができなかった\n\n\nコンパイルできずにエラー\n\n```\n__ais-highlight__M__/ais-highlight__odule '\"/home/vagrant/sandbox/ngx-sample/node___ais-highlight__m__/ais-highlight__odules/__ais-highlight__m__/ais-highlight__oment/__ais-highlight__m__/ais-highlight__oment\"' has no default export.\n```\n\nTypeScriptのimportに制限があるようでオプションを変えることで上記のコードで__ais-highlight__m__/ais-highlight__oment-rangeが使えるようになるそう\n\n- tsconfig.json\n\n```\n\"allowSyntheticDefaultImports\": true,\n```\n\nこのオプションをつけることで`extendMoment`がimportできるようになる\n\n- 参考\n\n[TypeScript の ES6 __ais-highlight__m__/ais-highlight__odules の解釈と allowSyntheticDefaultImports の整理 - Qiita](https://qiita.com/bouzuya/items/edf5274241b50f32c621)\n\n[https://qiita.com/bouzuya/items/edf5274241b50f32c621:embed:cite]\n\nworkarroundっぽいけどいったんはこれで使えます\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "[B] mod_rewriteでReverseProxy",
          "date": "2014-05-29",
          "slug": "httpd/20140529_httpd_mod_rewrite",
          "url": "http://localhost:8001/httpd/20140529_httpd_mod_rewrite",
          "section": "httpd/20140529_httpd_mod_rewrite",
          "tags": ["httpd"],
          "text": "# mod_rewriteでReverseProxy\r\n\r\n* reverse proxy\r\n\r\n<!-- textlint-disable prh -->\r\nApacheのworkerでバランサ、backendにサーバが何台かある状態でサブドメインによって振り分け先を変えたいという用件がありました。\r\n<!-- textlint-enable prh -->\r\n\r\nググると最初はVirtualHostでやるみたいなのが一般的みたいだったので僕も乗っかろうと思っていましたが色々面倒なことに\r\n\r\nまずmod_rewriteの設定や共通な設定もVirtualHostごとに書かなくてはいけない点\r\n\r\n今回切り分けたいのは振り分け先のサーバだけでしたがその他の設定もVirtualHostの中に書かなくてはいけないような挙動がありました\r\n\r\nVirtualHostごとに違う設定だけ活かしたいってことをしたかったのですが…\r\n\r\nで、結局mod_rewriteで解決しました。\r\n\r\n```\r\nRewriteCond %{HTTP_HOST} subdomain.testhost.jp\r\nRewriteRule ^/(.*)$ balancer://cluster/$1 [P,L]\r\nProxyPassReverse / balancer://cluster/\r\n\r\n<Proxy balancer://cluster>\r\n  BalancerMember http://192.168.10.1:80\r\n  BalancerMember http://192.168.10.2:80\r\n  BalancerMember http://192.168.10.3:80\r\n</Proxy>\r\n```\r\n\r\nこんな感じでドメイン名をマッチさせて転送先にclusterを指定してあげればOK\r\nその際にP(roxy)オプションを付けてあげます\r\n\r\nclusterの台数を増やすことも可能なのでサブドメイン単位で役割を分ることができるようになりました\r\n\r\n勉強になりました。\r\n",
          "objectID": "httpd/20140529_httpd_mod_rewrite",
          "_snippetResult": {
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__od_rewriteでReverseProxy\r\n\r\n* reverse proxy\r\n\r\n<!-- textlint-disable prh -->\r\nApacheのworkerでバランサ、backendにサーバが何台かある状態でサブドメインによって振り分け先を変え",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "[B] __ais-highlight__m__/ais-highlight__od_rewriteでReverseProxy",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2014-05-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "httpd/20140529_httpd___ais-highlight__m__/ais-highlight__od_rewrite",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/httpd/20140529_httpd___ais-highlight__m__/ais-highlight__od_rewrite",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "httpd/20140529_httpd___ais-highlight__m__/ais-highlight__od_rewrite",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "httpd", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# __ais-highlight__m__/ais-highlight__od_rewriteでReverseProxy\r\n\r\n* reverse proxy\r\n\r\n<!-- textlint-disable prh -->\r\nApacheのworkerでバランサ、backendにサーバが何台かある状態でサブドメインによって振り分け先を変えたいという用件がありました。\r\n<!-- textlint-enable prh -->\r\n\r\nググると最初はVirtualHostでやるみたいなのが一般的みたいだったので僕も乗っかろうと思っていましたが色々面倒なことに\r\n\r\nまず__ais-highlight__m__/ais-highlight__od_rewriteの設定や共通な設定もVirtualHostごとに書かなくてはいけない点\r\n\r\n今回切り分けたいのは振り分け先のサーバだけでしたがその他の設定もVirtualHostの中に書かなくてはいけないような挙動がありました\r\n\r\nVirtualHostごとに違う設定だけ活かしたいってことをしたかったのですが…\r\n\r\nで、結局__ais-highlight__m__/ais-highlight__od_rewriteで解決しました。\r\n\r\n```\r\nRewriteCond %{HTTP_HOST} subdomain.testhost.jp\r\nRewriteRule ^/(.*)$ balancer://cluster/$1 [P,L]\r\nProxyPassReverse / balancer://cluster/\r\n\r\n<Proxy balancer://cluster>\r\n  BalancerMember http://192.168.10.1:80\r\n  BalancerMember http://192.168.10.2:80\r\n  BalancerMember http://192.168.10.3:80\r\n</Proxy>\r\n```\r\n\r\nこんな感じでドメイン名をマッチさせて転送先にclusterを指定してあげればOK\r\nその際にP(roxy)オプションを付けてあげます\r\n\r\nclusterの台数を増やすことも可能なのでサブドメイン単位で役割を分ることができるようになりました\r\n\r\n勉強になりました。\r\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "VS Code Markdown CheckboxプラグインでToDo管理",
          "date": "2022-09-21",
          "slug": "other/vscode_checkbox_extension",
          "url": "http://localhost:8001/other/vscode_checkbox_extension",
          "section": "other/vscode_checkbox_extension",
          "tags": ["other", "VSCode"],
          "text": "# VS Code Markdown CheckboxプラグインでToDo管理\n\n最近自分の中での仕事のToDo管理はまずVS Codeで開いたMarkdownファイルを見る習慣がついている\n\n<!-- TrelloやNotionなどさまざまなツールで管理したり共有したり試していたが、次の点でなじまなかった -->\n\n理由としては次のような感じ\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n- すでに仕事中のメモ用途にVS Codeを開いていて、だいたいのことはMarkdownにメモとして残しているので常にVS Codeを開いている、開いているのでその流れでToDoリストもチェックする流れが自然\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n- 役割上いろんなところからタスクが降ってくるのでとりあえずすぐメモしておきたい場面でツール開いて色々入力して登録…というのが結構面倒に感じてまった\n\nもちろんチームやプロジェクトでツールを使って管理している部分もあるのでそちらは使っているが…\n\n結局自分の中では、単純なリストで一ヵ所に一覧が集まっているほうが意識しやすいのでMarkdownのチェックリスト形式で書いてこなしたらチェックを入れるという感じで落ち着いている\n\nまた、各種ツールで管理しているタスクよりタスクの粒度を細かくすることでチェックを入れやすくしてこなしている感を出したいのもある（`○○のスケジュールを取る`など）\n\n```markdown\n- [ ] TaskA\n- [ ] TaskB\n- [ ] TaskC\n```\n\n今までチェックリストは普通に編集していたのだがふとしたきっかけでチェックのショートカットはないのかな?と調べてみたらあった+使ってみたら良さそうだったので運用を開始した\n\n[Markdown Checkbox - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox)\n\n[https://marketplace.visualstudio.com/items?itemName=PKief.markdown-checkbox:embed:cite]\n\n`Ctrl`+`Shift`+`Enter`でチェック\n\n`Ctrl`+`Shift`+`C`でチェックボックスを生成\n\nその他設定できるオプションはドキュメントを見るのが一番早いがリストの文字(`-`,`*`)やチェックの文字など設定で選択できる\n\nまた、チェックしたら日付を入れる、チェックしたら取り消し線、イタリックにするなども設定できる\n\n自分はシンプルでよかったのでチェックしたら～系の設定はすべて外した\n\nチェックした後またチェック外すみたいなパターンはないがショートカットでチェックボックスをチェックできるのは便利\n\nただ、運用を変えたところでToDoの消化がはかどるわけではない…",
          "objectID": "other/vscode_checkbox_extension",
          "_snippetResult": {
            "text": {
              "value": "あった+使ってみたら良さそうだったので運用を開始した\n\n[__ais-highlight__M__/ais-highlight__arkdown Checkbox - Visual Studio __ais-highlight__M__/ais-highlight__arketplace](https://__ais-highlight__m__/ais-highlight__arketplace.visualstudio.com/items?itemName=PKief.__ais-highlight__m__/ais-highlight__arkdown-checkbox)\n\n[https://__ais-highlight__m__/ais-highlight__arketplace.visualstudio.com/items?itemName=PKief.__ais-highlight__m__/ais-highlight__arkdown-checkbox:embed:cite",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "VS Code __ais-highlight__M__/ais-highlight__arkdown CheckboxプラグインでToDo管理",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-09-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "other/vscode_checkbox_extension",
              "matchLevel": "none",
              "matchedWords": []
            },
            "url": {
              "value": "http://localhost:8001/other/vscode_checkbox_extension",
              "matchLevel": "none",
              "matchedWords": []
            },
            "section": {
              "value": "other/vscode_checkbox_extension",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "other", "matchLevel": "none", "matchedWords": [] },
              { "value": "VSCode", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# VS Code __ais-highlight__M__/ais-highlight__arkdown CheckboxプラグインでToDo管理\n\n最近自分の中での仕事のToDo管理はまずVS Codeで開いた__ais-highlight__M__/ais-highlight__arkdownファイルを見る習慣がついている\n\n<!-- TrelloやNotionなどさまざまなツールで管理したり共有したり試していたが、次の点でなじまなかった -->\n\n理由としては次のような感じ\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\n- すでに仕事中のメモ用途にVS Codeを開いていて、だいたいのことは__ais-highlight__M__/ais-highlight__arkdownにメモとして残しているので常にVS Codeを開いている、開いているのでその流れでToDoリストもチェックする流れが自然\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n- 役割上いろんなところからタスクが降ってくるのでとりあえずすぐメモしておきたい場面でツール開いて色々入力して登録…というのが結構面倒に感じてまった\n\nもちろんチームやプロジェクトでツールを使って管理している部分もあるのでそちらは使っているが…\n\n結局自分の中では、単純なリストで一ヵ所に一覧が集まっているほうが意識しやすいので__ais-highlight__M__/ais-highlight__arkdownのチェックリスト形式で書いてこなしたらチェックを入れるという感じで落ち着いている\n\nまた、各種ツールで管理しているタスクよりタスクの粒度を細かくすることでチェックを入れやすくしてこなしている感を出したいのもある（`○○のスケジュールを取る`など）\n\n```__ais-highlight__m__/ais-highlight__arkdown\n- [ ] TaskA\n- [ ] TaskB\n- [ ] TaskC\n```\n\n今までチェックリストは普通に編集していたのだがふとしたきっかけでチェックのショートカットはないのかな?と調べてみたらあった+使ってみたら良さそうだったので運用を開始した\n\n[__ais-highlight__M__/ais-highlight__arkdown Checkbox - Visual Studio __ais-highlight__M__/ais-highlight__arketplace](https://__ais-highlight__m__/ais-highlight__arketplace.visualstudio.com/items?itemName=PKief.__ais-highlight__m__/ais-highlight__arkdown-checkbox)\n\n[https://__ais-highlight__m__/ais-highlight__arketplace.visualstudio.com/items?itemName=PKief.__ais-highlight__m__/ais-highlight__arkdown-checkbox:embed:cite]\n\n`Ctrl`+`Shift`+`Enter`でチェック\n\n`Ctrl`+`Shift`+`C`でチェックボックスを生成\n\nその他設定できるオプションはドキュメントを見るのが一番早いがリストの文字(`-`,`*`)やチェックの文字など設定で選択できる\n\nまた、チェックしたら日付を入れる、チェックしたら取り消し線、イタリックにするなども設定できる\n\n自分はシンプルでよかったのでチェックしたら～系の設定はすべて外した\n\nチェックした後またチェック外すみたいなパターンはないがショートカットでチェックボックスをチェックできるのは便利\n\nただ、運用を変えたところでToDoの消化がはかどるわけではない…",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "GitHubActionsでmatrixの値を動的に扱う",
          "date": "2021-06-29",
          "slug": "git/github_actions_dynamic_matrix",
          "url": "http://localhost:8001/git/github_actions_dynamic_matrix",
          "section": "git/github_actions_dynamic_matrix",
          "tags": ["Git", "GitHub Actions"],
          "text": "# GitHubActionsでmatrixの値を動的に扱う\n\n実際使うかと言うとどうなんだろうという気もするが、できるの知らなかったので残しておく\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nいきなりサンプルコードだがこれだけで理解はできると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n- .github/workflows/dynamic-matrix.yml\n\n```yaml\nname: dynamic matrix\n\non: [push]\n\njobs:\n  set-matrix:\n    runs-on: ubuntu-latest\n    outputs:\n      something: ${{ steps.set-matrix.outputs.value }}\n    steps:\n      - name: make values\n        id: set-matrix\n        run: |\n          echo '[\"hoge\",\"fuga\"]' | jq -c\n          list=$(echo '[\"hoge\",\"fuga\"]' | jq -c)\n          echo \"::set-output name=value::${list}\"\n\n  execute:\n    needs: set-matrix\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        hoge: ${{fromJson(needs.set-matrix.outputs.something)}}\n    steps:\n      - run: echo ${{ matrix.hoge }}\n```\n\n`set-matrix`のjobで`hoge`,`fuga`を配列としてJSON形式でoutputに格納している\n\n後続の`execute`では`strategy.matrix.hoge`で`fromJson`を使って値を取得している\n\n実行結果はこんな感じ\n\n![alt](github_actions_dynamic_matrix01.png)\n\n今回の例では`Array<string>`だが`set-matrix`で`Array<Object>`となるような値を生成しても同様に参照させればOK\n\nサンプルでは固定値だがシェルスクリプトでよしなに指定することも可能なのでさまざまな場面に対応できる\n\n参考\n[How to make a Dynamic Matrix in GitHub Actions | Tomas Votruba](https://tomasvotruba.com/blog/2020/11/16/how-to-make-dynamic-matrix-in-github-actions/)\n\n",
          "objectID": "git/github_actions_dynamic_matrix",
          "_snippetResult": {
            "text": {
              "value": "解はできると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n- .github/workflows/dynamic-__ais-highlight__m__/ais-highlight__atrix.yml\n\n```yaml\nname: dynamic __ais-highlight__m__/ais-highlight__atrix\n\non: [push]\n\njobs:\n  set-__ais-highlight__m__/ais-highlight__atrix:\n    runs-on: ubuntu-latest\n    outputs:\n      something: ${{ steps.set-__ais-highlight__m__/ais-highlight__atrix.outputs.value }}\n    steps:\n      - name: __ais-highlight__m__/ais-highlight__ake values\n        id: set-__ais-highlight__m__/ais-highlight__atrix",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "GitHubActionsで__ais-highlight__m__/ais-highlight__atrixの値を動的に扱う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-06-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "git/github_actions_dynamic___ais-highlight__m__/ais-highlight__atrix",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/git/github_actions_dynamic___ais-highlight__m__/ais-highlight__atrix",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "git/github_actions_dynamic___ais-highlight__m__/ais-highlight__atrix",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Git", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GitHub Actions",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "text": {
              "value": "# GitHubActionsで__ais-highlight__m__/ais-highlight__atrixの値を動的に扱う\n\n実際使うかと言うとどうなんだろうという気もするが、できるの知らなかったので残しておく\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nいきなりサンプルコードだがこれだけで理解はできると思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n- .github/workflows/dynamic-__ais-highlight__m__/ais-highlight__atrix.yml\n\n```yaml\nname: dynamic __ais-highlight__m__/ais-highlight__atrix\n\non: [push]\n\njobs:\n  set-__ais-highlight__m__/ais-highlight__atrix:\n    runs-on: ubuntu-latest\n    outputs:\n      something: ${{ steps.set-__ais-highlight__m__/ais-highlight__atrix.outputs.value }}\n    steps:\n      - name: __ais-highlight__m__/ais-highlight__ake values\n        id: set-__ais-highlight__m__/ais-highlight__atrix\n        run: |\n          echo '[\"hoge\",\"fuga\"]' | jq -c\n          list=$(echo '[\"hoge\",\"fuga\"]' | jq -c)\n          echo \"::set-output name=value::${list}\"\n\n  execute:\n    needs: set-__ais-highlight__m__/ais-highlight__atrix\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      __ais-highlight__m__/ais-highlight__atrix:\n        hoge: ${{fromJson(needs.set-__ais-highlight__m__/ais-highlight__atrix.outputs.something)}}\n    steps:\n      - run: echo ${{ __ais-highlight__m__/ais-highlight__atrix.hoge }}\n```\n\n`set-__ais-highlight__m__/ais-highlight__atrix`のjobで`hoge`,`fuga`を配列としてJSON形式でoutputに格納している\n\n後続の`execute`では`strategy.__ais-highlight__m__/ais-highlight__atrix.hoge`で`fromJson`を使って値を取得している\n\n実行結果はこんな感じ\n\n![alt](github_actions_dynamic___ais-highlight__m__/ais-highlight__atrix01.png)\n\n今回の例では`Array<string>`だが`set-__ais-highlight__m__/ais-highlight__atrix`で`Array<Object>`となるような値を生成しても同様に参照させればOK\n\nサンプルでは固定値だがシェルスクリプトでよしなに指定することも可能なのでさまざまな場面に対応できる\n\n参考\n[How to __ais-highlight__m__/ais-highlight__ake a Dynamic __ais-highlight__M__/ais-highlight__atrix in GitHub Actions | Tomas Votruba](https://tomasvotruba.com/blog/2020/11/16/how-to-__ais-highlight__m__/ais-highlight__ake-dynamic-__ais-highlight__m__/ais-highlight__atrix-in-github-actions/)\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "BigQueryのMERGE文で削除、更新、追加を同時に行う",
          "date": "2021-02-08",
          "slug": "gcp/bigquery_merge_with_delete",
          "url": "http://localhost:8001/gcp/bigquery_merge_with_delete",
          "section": "gcp/bigquery_merge_with_delete",
          "tags": ["GoogleCloudPlatform", "BigQuery"],
          "text": "# BigQueryのMERGE文で削除、更新、追加を同時に行う\n\nMERGE文はUPSERT的な操作をしたいときに取り上げられることが多いイメージだったがもう少し込み入った要件でも活用できそうということで試してみた\n\nMERGE文についてのドキュメントは下記\n\n[データ操作言語の構文  |  BigQuery  |  Google Cloud](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ja#merge_statement)\n\n[https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ja#merge_statement:embed:cite]\n\n## 要件\n\n- 特定のキーをもとに次の判定をする\n    - 変更があった場合は更新\n    - レコードが存在しない場合は追加\n    - 特定のstatusになっている場合は削除\n        - サンプルではstatusを`enable`,`disable`,`rejected`とし、`rejected`の場合は削除する\n\n## 準備\n### テーブル作成\n\nサンプルとしてmetadataテーブルを用意する\n\n```shell\nbq mk -t 'metadata_id:INT64,classification:STRING,name:STRING,status:STRING,column1:STRING' --description 'metadata' sample_dataset.metadata\nbq mk -t 'metadata_id:INT64,classification:STRING,name:STRING,status:STRING,column1:STRING' --description 'metadata' sample_dataset.metadata_tmp\n```\n\n### サンプルデータを入れる\n\n初期データを入れる\n\n- before.ndjson\n\n```json\n{\"metadata_id\":\"1\",\"classification\":\"A\",\"name\":\"hoge\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"metadata_id\":\"2\",\"classification\":\"B\",\"name\":\"fuga\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"metadata_id\":\"3\",\"classification\":\"A\",\"name\":\"piyo\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"metadata_id\":\"4\",\"classification\":\"B\",\"name\":\"foo\",\"status\":\"disable\",\"column1\":\"c3\"}\n{\"metadata_id\":\"5\",\"classification\":\"A\",\"name\":\"bar\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"metadata_id\":\"6\",\"classification\":\"C\",\"name\":\"baz\",\"status\":\"disable\",\"column1\":\"c3\"}\n```\n\n```shell\nbq load --replace --source_format=NEWLINE_DELIMITED_JSON \\\n'sample_dataset.metadata' \\\n./before.ndjson\n```\n\n変更用のデータを入れる\n\n- changes.ndjson\n\n```json\n{\"metadata_id\":\"1\",\"classification\":\"A\",\"name\":\"hoge\",\"status\":\"enable\",\"column1\":\"c4\"}\n{\"metadata_id\":\"3\",\"classification\":\"A\",\"name\":\"piyo\",\"status\":\"enable\",\"column1\":\"c4\"}\n{\"metadata_id\":\"5\",\"classification\":\"A\",\"name\":\"bar\",\"status\":\"rejected\",\"column1\":\"c4\"}\n{\"metadata_id\":\"7\",\"classification\":\"A\",\"name\":\"new\",\"status\":\"enable\",\"column1\":\"c4\"}\n```\n\n```shell\nbq load --replace --source_format=NEWLINE_DELIMITED_JSON \\\n'sample_dataset.metadata_tmp' \\\n./changes.ndjson\n```\n\n## MERGE文\n\nmetadata_id,classification,nameをキーとして判定する\n\n- merge.sql\n\n```sql\nMERGE `sample_dataset.metadata` target USING `sample_dataset.metadata_tmp` tmp\nON(target.metadata_id = tmp.metadata_id AND target.classification = tmp.classification AND target.name = tmp.name)\nWHEN MATCHED AND tmp.status = 'rejected' THEN\n  DELETE\nWHEN MATCHED THEN\n  UPDATE SET metadata_id = tmp.metadata_id, classification = tmp.classification, name = tmp.name, status = tmp.status, column1 = tmp.column1\nWHEN NOT MATCHED THEN\n  INSERT ROW\n```\n\n## MERGEの実行\n\n```shell\n$ bq query --format json < merge.sql\nWaiting on bqjob_r619238db338a57fd_000001770cae55e8_1 ... (1s) Current status: DONE\nNumber of affected rows: 4\n```\n\n- MERGE実行前\n\n![alt](bigquery_merge_with_delete01.png)\n\n- 実行した結果\n\n![alt](bigquery_merge_with_delete02.png)\n\nピンクが更新、青が追加、オレンジが削除\n\n## 蛇足\n\nパーティションデコレータを指定して特定のパーティションに対してMERGEを行うことができるのか試したができなかった\n\n```\nTable \"sample.daily_data$20201101\" cannot include decorator\n```\n\n## 他所感\n\n- 今回のサンプルではtargetとsourceのテーブルを同じスキーマにしているがMERGE文自体は別に同じテーブル構成である必要もないのでさらに色々できそう\n- `NOT MATCHED BY SOURCE`を使うことでソースになければ削除するといった操作もできそう\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nMERGE文使用時のSELECTに料金が発生するはずなのであまり大量のデータの更新には向いていない気もするがこういう操作がSQL文だけで行えるのはとても楽だと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n特に更新、追加、削除をアトミックに処理できるのは大きい\n\nスクリプト書いて更新、追加、削除を別々でやる場合このくらいの要件でも大分面倒な感じになるはずなので\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nまぁそもそもUPSERTとか頻繁にやるような要件だったら要件の方を見直したほうが良いのでは?と思うこともあるが…\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\nまた、ドキュメントに今回のサンプルケースに近しい例は載っていた（記事書いている最中に気付いた）が一度試してから読み直すまでピンとこなかったのでやはり一度触ってみるのが大事だなーと感じた\n\n## まとめ\n\nMERGE文を用いて次のような要件の操作を行うことができた\n\n- 特定カラムをキーとして\n    - 現在存在しない場合は追加\n    - すでに存在する場合は更新\n    - 特定のカラムの値によっては削除\n\nBigQuery触れば触るほど便利でなんでもSQLで行けるっしょ!という気分になりつつある\n\nあとはSQLを管理できるサーバレスなワークフローツールが欲しい…",
          "objectID": "gcp/bigquery_merge_with_delete",
          "_snippetResult": {
            "text": {
              "value": "NEWLINE_DELIMITED_JSON \\\n'sample_dataset.__ais-highlight__m__/ais-highlight__etadata_tmp' \\\n./changes.ndjson\n```\n\n## __ais-highlight__M__/ais-highlight__ERGE文\n\n__ais-highlight__m__/ais-highlight__etadata_id,classification,nameをキーとして判定する\n\n- __ais-highlight__m__/ais-highlight__erge.sql\n\n```sql\n__ais-highlight__M__/ais-highlight__ERGE `sample_dataset.__ais-highlight__m__/ais-highlight__etadata` target USING `sample_dataset.__ais-highlight__m__/ais-highlight__etadata_tmp` tmp\nON(target.__ais-highlight__m__/ais-highlight__etadata_id = tmp.__ais-highlight__m__/ais-highlight__etadata_id AND target.classification = tmp",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "BigQueryの__ais-highlight__M__/ais-highlight__ERGE文で削除、更新、追加を同時に行う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-02-08",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "gcp/bigquery___ais-highlight__m__/ais-highlight__erge_with_delete",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/gcp/bigquery___ais-highlight__m__/ais-highlight__erge_with_delete",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "gcp/bigquery___ais-highlight__m__/ais-highlight__erge_with_delete",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "BigQuery", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# BigQueryの__ais-highlight__M__/ais-highlight__ERGE文で削除、更新、追加を同時に行う\n\n__ais-highlight__M__/ais-highlight__ERGE文はUPSERT的な操作をしたいときに取り上げられることが多いイメージだったがもう少し込み入った要件でも活用できそうということで試してみた\n\n__ais-highlight__M__/ais-highlight__ERGE文についてのドキュメントは下記\n\n[データ操作言語の構文  |  BigQuery  |  Google Cloud](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ja#__ais-highlight__m__/ais-highlight__erge_statement)\n\n[https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax?hl=ja#__ais-highlight__m__/ais-highlight__erge_statement:embed:cite]\n\n## 要件\n\n- 特定のキーをもとに次の判定をする\n    - 変更があった場合は更新\n    - レコードが存在しない場合は追加\n    - 特定のstatusになっている場合は削除\n        - サンプルではstatusを`enable`,`disable`,`rejected`とし、`rejected`の場合は削除する\n\n## 準備\n### テーブル作成\n\nサンプルとして__ais-highlight__m__/ais-highlight__etadataテーブルを用意する\n\n```shell\nbq __ais-highlight__m__/ais-highlight__k -t '__ais-highlight__m__/ais-highlight__etadata_id:INT64,classification:STRING,name:STRING,status:STRING,column1:STRING' --description '__ais-highlight__m__/ais-highlight__etadata' sample_dataset.__ais-highlight__m__/ais-highlight__etadata\nbq __ais-highlight__m__/ais-highlight__k -t '__ais-highlight__m__/ais-highlight__etadata_id:INT64,classification:STRING,name:STRING,status:STRING,column1:STRING' --description '__ais-highlight__m__/ais-highlight__etadata' sample_dataset.__ais-highlight__m__/ais-highlight__etadata_tmp\n```\n\n### サンプルデータを入れる\n\n初期データを入れる\n\n- before.ndjson\n\n```json\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"1\",\"classification\":\"A\",\"name\":\"hoge\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"2\",\"classification\":\"B\",\"name\":\"fuga\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"3\",\"classification\":\"A\",\"name\":\"piyo\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"4\",\"classification\":\"B\",\"name\":\"foo\",\"status\":\"disable\",\"column1\":\"c3\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"5\",\"classification\":\"A\",\"name\":\"bar\",\"status\":\"enable\",\"column1\":\"c3\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"6\",\"classification\":\"C\",\"name\":\"baz\",\"status\":\"disable\",\"column1\":\"c3\"}\n```\n\n```shell\nbq load --replace --source_format=NEWLINE_DELIMITED_JSON \\\n'sample_dataset.__ais-highlight__m__/ais-highlight__etadata' \\\n./before.ndjson\n```\n\n変更用のデータを入れる\n\n- changes.ndjson\n\n```json\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"1\",\"classification\":\"A\",\"name\":\"hoge\",\"status\":\"enable\",\"column1\":\"c4\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"3\",\"classification\":\"A\",\"name\":\"piyo\",\"status\":\"enable\",\"column1\":\"c4\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"5\",\"classification\":\"A\",\"name\":\"bar\",\"status\":\"rejected\",\"column1\":\"c4\"}\n{\"__ais-highlight__m__/ais-highlight__etadata_id\":\"7\",\"classification\":\"A\",\"name\":\"new\",\"status\":\"enable\",\"column1\":\"c4\"}\n```\n\n```shell\nbq load --replace --source_format=NEWLINE_DELIMITED_JSON \\\n'sample_dataset.__ais-highlight__m__/ais-highlight__etadata_tmp' \\\n./changes.ndjson\n```\n\n## __ais-highlight__M__/ais-highlight__ERGE文\n\n__ais-highlight__m__/ais-highlight__etadata_id,classification,nameをキーとして判定する\n\n- __ais-highlight__m__/ais-highlight__erge.sql\n\n```sql\n__ais-highlight__M__/ais-highlight__ERGE `sample_dataset.__ais-highlight__m__/ais-highlight__etadata` target USING `sample_dataset.__ais-highlight__m__/ais-highlight__etadata_tmp` tmp\nON(target.__ais-highlight__m__/ais-highlight__etadata_id = tmp.__ais-highlight__m__/ais-highlight__etadata_id AND target.classification = tmp.classification AND target.name = tmp.name)\nWHEN __ais-highlight__M__/ais-highlight__ATCHED AND tmp.status = 'rejected' THEN\n  DELETE\nWHEN __ais-highlight__M__/ais-highlight__ATCHED THEN\n  UPDATE SET __ais-highlight__m__/ais-highlight__etadata_id = tmp.__ais-highlight__m__/ais-highlight__etadata_id, classification = tmp.classification, name = tmp.name, status = tmp.status, column1 = tmp.column1\nWHEN NOT __ais-highlight__M__/ais-highlight__ATCHED THEN\n  INSERT ROW\n```\n\n## __ais-highlight__M__/ais-highlight__ERGEの実行\n\n```shell\n$ bq query --format json < __ais-highlight__m__/ais-highlight__erge.sql\nWaiting on bqjob_r619238db338a57fd_000001770cae55e8_1 ... (1s) Current status: DONE\nNumber of affected rows: 4\n```\n\n- __ais-highlight__M__/ais-highlight__ERGE実行前\n\n![alt](bigquery___ais-highlight__m__/ais-highlight__erge_with_delete01.png)\n\n- 実行した結果\n\n![alt](bigquery___ais-highlight__m__/ais-highlight__erge_with_delete02.png)\n\nピンクが更新、青が追加、オレンジが削除\n\n## 蛇足\n\nパーティションデコレータを指定して特定のパーティションに対して__ais-highlight__M__/ais-highlight__ERGEを行うことができるのか試したができなかった\n\n```\nTable \"sample.daily_data$20201101\" cannot include decorator\n```\n\n## 他所感\n\n- 今回のサンプルではtargetとsourceのテーブルを同じスキーマにしているが__ais-highlight__M__/ais-highlight__ERGE文自体は別に同じテーブル構成である必要もないのでさらに色々できそう\n- `NOT __ais-highlight__M__/ais-highlight__ATCHED BY SOURCE`を使うことでソースになければ削除するといった操作もできそう\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n__ais-highlight__M__/ais-highlight__ERGE文使用時のSELECTに料金が発生するはずなのであまり大量のデータの更新には向いていない気もするがこういう操作がSQL文だけで行えるのはとても楽だと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\n特に更新、追加、削除をアトミックに処理できるのは大きい\n\nスクリプト書いて更新、追加、削除を別々でやる場合このくらいの要件でも大分面倒な感じになるはずなので\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nまぁそもそもUPSERTとか頻繁にやるような要件だったら要件の方を見直したほうが良いのでは?と思うこともあるが…\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\nまた、ドキュメントに今回のサンプルケースに近しい例は載っていた（記事書いている最中に気付いた）が一度試してから読み直すまでピンとこなかったのでやはり一度触ってみるのが大事だなーと感じた\n\n## まとめ\n\n__ais-highlight__M__/ais-highlight__ERGE文を用いて次のような要件の操作を行うことができた\n\n- 特定カラムをキーとして\n    - 現在存在しない場合は追加\n    - すでに存在する場合は更新\n    - 特定のカラムの値によっては削除\n\nBigQuery触れば触るほど便利でなんでもSQLで行けるっしょ!という気分になりつつある\n\nあとはSQLを管理できるサーバレスなワークフローツールが欲しい…",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "AWS Session Managerお試し",
          "date": "2020-03-17",
          "slug": "aws/session_manager",
          "url": "http://localhost:8001/aws/session_manager",
          "section": "aws/session_manager",
          "tags": ["AWS"],
          "text": "# AWS SessionManagerお試し\n\nSessionManagerを使えばSSH経由でなくてもEC2に接続できるということで試しも兼ねて調べた\n\nSessionManagerを使うにあたっての前提として対象のインスタンスにSSMエージェントがインストールされている必要がある\n\n## SSMエージェントとは\n\nSystemManager経由で各インスタンス（リソース）に対して更新、管理、および設定を可能にするもの\n\n要はいろいろな操作をSystemManager経由で行うためにインスタンス側でよしなにやってくれるためのエージェントという感じ\n\n[SSM エージェント について - AWS Systems Manager](https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/prereqs-ssm-agent.html)\n\n[https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/prereqs-ssm-agent.html:embed:cite]\n\nSSMエージェントを使い始めるための手順などは次に書いてあるとおり\n\n[SSM エージェント の使用 - AWS Systems Manager](https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/ssm-agent.html)\n\n[https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/ssm-agent.html:embed:cite]\n\n最新のAmazonLinux2やUbuntuだと最初からインストールされている場合もある\n\nSSMエージェントが入っていない場合は下記参考にインストールする\n\n[Amazon EC2 Linux インスタンスに SSM エージェント を手動でインストールする - AWS Systems Manager](https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/sysman-manual-agent-install.html#agent-install-al)\n\n[https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/sysman-manual-agent-install.html#agent-install-al:embed:cite]\n\n\n古い記事だとIAMRoleに`AmazonEC2RoleforSSM`を設定すると書いてあるが現在は`AmazonSSMManagedInstanceCore`のよう(※2020-03-13現在)\n\n- SSMを実行可能なロールの作成をする\n\n![alt](session_manager01.png)\n\n最低限のポリシーをアタッチ\n\n![alt](session_manager02.png)\n\n対象インスタンスのIAMRoleに上記で設定したロールをアタッチして準備OK\n\n再起動させたらSessionManagerの画面リストに出てきた\n\n![alt](session_manager03.png)\n\nここから `セッションを開始`するとブラウザ上でコンソールが出てくる\n\n![alt](session_manager04.png)\n\n## 端末からの実行\n\n[AWS Systems Manager Session Manager for Shell AccessでMacからLinux EC2インスタンスに端末でアクセスする ｜ Developers.IO](https://dev.classmethod.jp/cloud/ssm-session-manager-from-mac-to-linux-ec2/)\n\n[https://dev.classmethod.jp/cloud/ssm-session-manager-from-mac-to-linux-ec2/:embed:cite]\n\n上記に従いサクッと実行しようと思ったらエラーになった\n\nプラグインが必要な模様\n\n- error\n\n```\nSessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-manager/session-manager-plugin-not-found\n```\n\nよく読むとプラグインのインストールも必要だったが飛ばしてしまっていたのでインストールする\n\nOSによってインストール手順が違うので下記参照\n\n[(Optional) Install the Session Manager Plugin for the AWS CLI - AWS Systems Manager](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html)\n\n[https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html:embed:cite]\n\n今回はCentOS7なのでrpmを取ってきてyumでインストールした\n\n```\ncurl \"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm\" -o \"session-manager-plugin.rpm\"\nsudo yum install -y session-manager-plugin.rpm\n```\n\n- セッションを開始する\n\n```\n$ aws ssm start-session --target i-0885acfxxxxxxxxxx\n\nStarting session with SessionId: hoge-03cf7369b9c7be3cd\nsh-4.2$\n```\n\n無事つながった\n\nssm-userで接続されるが`sudo su -`でrootにもなれるようなのでトラブル対応でも活用できそう\n\ncli経由でセッションを張れるのであればシステムのデプロイ時にSSH経由でなくSessionManagerでコマンド実行できるかなーと思ったができなそう\n\nそういう用途であれば`Run Command`のほうがあっているっぽいので次はRunCommandを調べる\n",
          "objectID": "aws/session_manager",
          "_snippetResult": {
            "text": {
              "value": "ので下記参照\n\n[(Optional) Install the Session __ais-highlight__M__/ais-highlight__anager Plugin for the AWS CLI - AWS Systems __ais-highlight__M__/ais-highlight__anager](https://docs.aws.amazon.com/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/session-__ais-highlight__m__/ais-highlight__anager-working-with-install-plugin.html)\n\n[https://docs.aws.amazon.com/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/session-__ais-highlight__m__/ais-highlight__anager-working-with-install-plugin",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "AWS Session __ais-highlight__M__/ais-highlight__anagerお試し",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-03-17",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "aws/session___ais-highlight__m__/ais-highlight__anager",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/aws/session___ais-highlight__m__/ais-highlight__anager",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "aws/session___ais-highlight__m__/ais-highlight__anager",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# AWS SessionManagerお試し\n\nSessionManagerを使えばSSH経由でなくてもEC2に接続できるということで試しも兼ねて調べた\n\nSessionManagerを使うにあたっての前提として対象のインスタンスにSSMエージェントがインストールされている必要がある\n\n## SSMエージェントとは\n\nSystemManager経由で各インスタンス（リソース）に対して更新、管理、および設定を可能にするもの\n\n要はいろいろな操作をSystemManager経由で行うためにインスタンス側でよしなにやってくれるためのエージェントという感じ\n\n[SSM エージェント について - AWS Systems __ais-highlight__M__/ais-highlight__anager](https://docs.aws.amazon.com/ja_jp/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/prereqs-ssm-agent.html)\n\n[https://docs.aws.amazon.com/ja_jp/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/prereqs-ssm-agent.html:embed:cite]\n\nSSMエージェントを使い始めるための手順などは次に書いてあるとおり\n\n[SSM エージェント の使用 - AWS Systems __ais-highlight__M__/ais-highlight__anager](https://docs.aws.amazon.com/ja_jp/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/ssm-agent.html)\n\n[https://docs.aws.amazon.com/ja_jp/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/ssm-agent.html:embed:cite]\n\n最新のAmazonLinux2やUbuntuだと最初からインストールされている場合もある\n\nSSMエージェントが入っていない場合は下記参考にインストールする\n\n[Amazon EC2 Linux インスタンスに SSM エージェント を手動でインストールする - AWS Systems __ais-highlight__M__/ais-highlight__anager](https://docs.aws.amazon.com/ja_jp/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/sysman-__ais-highlight__m__/ais-highlight__anual-agent-install.html#agent-install-al)\n\n[https://docs.aws.amazon.com/ja_jp/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/sysman-__ais-highlight__m__/ais-highlight__anual-agent-install.html#agent-install-al:embed:cite]\n\n\n古い記事だとIAMRoleに`AmazonEC2RoleforSSM`を設定すると書いてあるが現在は`AmazonSSMManagedInstanceCore`のよう(※2020-03-13現在)\n\n- SSMを実行可能なロールの作成をする\n\n![alt](session___ais-highlight__m__/ais-highlight__anager01.png)\n\n最低限のポリシーをアタッチ\n\n![alt](session___ais-highlight__m__/ais-highlight__anager02.png)\n\n対象インスタンスのIAMRoleに上記で設定したロールをアタッチして準備OK\n\n再起動させたらSessionManagerの画面リストに出てきた\n\n![alt](session___ais-highlight__m__/ais-highlight__anager03.png)\n\nここから `セッションを開始`するとブラウザ上でコンソールが出てくる\n\n![alt](session___ais-highlight__m__/ais-highlight__anager04.png)\n\n## 端末からの実行\n\n[AWS Systems __ais-highlight__M__/ais-highlight__anager Session __ais-highlight__M__/ais-highlight__anager for Shell Accessで__ais-highlight__M__/ais-highlight__acからLinux EC2インスタンスに端末でアクセスする ｜ Developers.IO](https://dev.classmethod.jp/cloud/ssm-session-__ais-highlight__m__/ais-highlight__anager-from-__ais-highlight__m__/ais-highlight__ac-to-linux-ec2/)\n\n[https://dev.classmethod.jp/cloud/ssm-session-__ais-highlight__m__/ais-highlight__anager-from-__ais-highlight__m__/ais-highlight__ac-to-linux-ec2/:embed:cite]\n\n上記に従いサクッと実行しようと思ったらエラーになった\n\nプラグインが必要な模様\n\n- error\n\n```\nSessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-__ais-highlight__m__/ais-highlight__anager/session-__ais-highlight__m__/ais-highlight__anager-plugin-not-found\n```\n\nよく読むとプラグインのインストールも必要だったが飛ばしてしまっていたのでインストールする\n\nOSによってインストール手順が違うので下記参照\n\n[(Optional) Install the Session __ais-highlight__M__/ais-highlight__anager Plugin for the AWS CLI - AWS Systems __ais-highlight__M__/ais-highlight__anager](https://docs.aws.amazon.com/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/session-__ais-highlight__m__/ais-highlight__anager-working-with-install-plugin.html)\n\n[https://docs.aws.amazon.com/systems-__ais-highlight__m__/ais-highlight__anager/latest/userguide/session-__ais-highlight__m__/ais-highlight__anager-working-with-install-plugin.html:embed:cite]\n\n今回はCentOS7なのでrpmを取ってきてyumでインストールした\n\n```\ncurl \"https://s3.amazonaws.com/session-__ais-highlight__m__/ais-highlight__anager-downloads/plugin/latest/linux_64bit/session-__ais-highlight__m__/ais-highlight__anager-plugin.rpm\" -o \"session-__ais-highlight__m__/ais-highlight__anager-plugin.rpm\"\nsudo yum install -y session-__ais-highlight__m__/ais-highlight__anager-plugin.rpm\n```\n\n- セッションを開始する\n\n```\n$ aws ssm start-session --target i-0885acfxxxxxxxxxx\n\nStarting session with SessionId: hoge-03cf7369b9c7be3cd\nsh-4.2$\n```\n\n無事つながった\n\nssm-userで接続されるが`sudo su -`でrootにもなれるようなのでトラブル対応でも活用できそう\n\ncli経由でセッションを張れるのであればシステムのデプロイ時にSSH経由でなくSessionManagerでコマンド実行できるかなーと思ったができなそう\n\nそういう用途であれば`Run Command`のほうがあっているっぽいので次はRunCommandを調べる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        },
        {
          "title": "GCPのSecret Managerを使ってみる",
          "date": "2020-12-03",
          "slug": "gcp/secret_manager",
          "url": "http://localhost:8001/gcp/secret_manager",
          "section": "gcp/secret_manager",
          "tags": ["GoogleCloudPlatform", "Ruby"],
          "text": "# GCPのSecret Managerを使ってみる\n\nこの記事は[Google Cloud Platform Advent Calendar 2020](https://qiita.com/advent-calendar/2020/gcp)3日目の記事です\n\nAWSだとParameterStoreなどがあるがGCPだとなんなんだろうということで調べて使ってみた\n\n## Secret Manager\n\n外部サービスのAPIキーやパスワードなどの秘匿情報を含むデータをGCP上で管理できるサービス\n\n[Secret Manager  |  Google Cloud](https://cloud.google.com/secret-manager?hl=ja)\n\n[https://cloud.google.com/secret-manager?hl=ja:embed:cite]\n\n今回は実際にローカルの開発環境から使ってみる\n\n## データの登録\n\nコマンドラインから登録する\n\n```shell\n$ echo 'hoge fuga' | gcloud secrets create my-secret --data-file=-\n```\n\n標準入力から入力する方法以外にもいろいろある\n\n```shell\n$ echo -n $TOGGL_API_TOKEN | gcloud secrets create 'toggl/token' --data-file=-\nERROR: (gcloud.secrets.create) INVALID_ARGUMENT: Resource ID [toggl/token] is not in a valid format.\n```\n\nAWSのパラメータストアのノリで`/`区切りがいけるかなと試してみたがだめだった\n\n`/` は使えない模様\n\n```shell\n$ echo -n $TOGGL_API_TOKEN | gcloud secrets create 'toggl-token' --data-file=-\nCreated version [1] of the secret [toggl-token].\n```\n\n## 取得\n\n```shell\n$ gcloud secrets versions access latest --secret='my-secret'\nhoge fuga\n```\n\n## 更新\n\n```shell\n$ echo -n 'hoge fuga piyo' | gcloud secrets versions add my-secret --data-file=-\n```\n\n値が変わっていることが確認できる\n\n```shell\n$ gcloud secrets versions access latest --secret='my-secret'\nhoge fuga piyo\n```\n\n## Rubyの実装で試してみる\n\nCloudRunからキーを参照して使う予定だったのでいったんローカルでサーバを起動して動作させられるか試す\n\n事前にサービスアカウントを作成して`Secret Manager のシークレット アクセサー`のロールを追加しておく\n\n- app.rb\n\n```ruby\nrequire \"google/cloud/secret_manager\"\nrequire \"sinatra\"\n\npost \"/\" do\n  client = Google::Cloud::SecretManager.secret_manager_service\n  key = client.secret_version_path project: project_id, secret: 'my-secret', secret_version: 'latest'\n  res = client.access_secret_version name: key\n  p 'secret ======'\n  p res.payload\n  p res.payload.data\nend\n```\n\n- サーバの起動\n\n```shell\n$ ruby app.rb\n```\n\n- アクセス\n\n```shell\n$ curl http://127.0.0.1:8080\n```\n\n適当にアクセスしてログを見る\n\n- ログ\n\n```shell\n\"secret ======\"\n<Google::Cloud::SecretManager::V1::SecretPayload: data: \"hoge fuga piyo\">\n\"hoge fuga piyo\"\n```\n\n`gcloud`コマンドでは意識しなかったがsecretが保存されているパスを指定する必要がある\n\nサンプルでいうと\n\n`projects/#{project_id}/secrets/{secret_name}/versions/latest`\n\n`project_id`が必要\n\n`GOOGLE_APPLICATION_CREDENTIALS`にサービスアカウントのキーを置いておけばそのあたりよしなにやってくれるのかと思っていたらそんなことはなく\n\nPermissionDeniedで怒られた\n\n```\n 2020-10-30 10:40:12 - Google::Cloud::PermissionDeniedError - 7:Secret Manager API has not been used in project 111111111111 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/secretmanager.googleapis.com/overview?project=111111111111 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.. debug_error_string:{\"created\":\"@1604054412.050131516\",\"description\":\"Error received from peer ipv4:172.217.27.74:443\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1062,\"grpc_message\":\"Secret Manager API has not been used in project 111111111111 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/secretmanager.googleapis.com/overview?project=111111111111 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry.\",\"grpc_status\":7}:\n        /usr/local/bundle/gems/google-cloud-secret_manager-v1-0.5.0/lib/google/cloud/secret_manager/v1/secret_manager_service/client.rb:826:in `rescue in access_secret_version'\n        /usr/local/bundle/gems/google-cloud-secret_manager-v1-0.5.0/lib/google/cloud/secret_manager/v1/secret_manager_service/client.rb:792:in `access_secret_version'\n        ./app.rb:21:in `block in <main>'\n```\n\nプロジェクトIDがないと別のプロジェクト的なものと解釈されてAPI有効にしろ!などと言われるっぽい(該当プロジェクトでは有効にしている)\n\nここで出てくるPROJECT_NUMBER的なもの(111111111111)はどのプロジェクトなのかは探せなかったので不明\n\n結構詰まったが最終的にはGitHubでコード検索して実装方法を探して解決した\n\n## 過去のバージョンの値を取得する\n\nここのバージョンを指定することで過去の値も取ることができる\n\n- ログ\n\n```\n\"projects/sampleproject-0000000/secrets/my-secret/versions/1\"\n<Google::Cloud::SecretManager::V1::SecretPayload: data: \"hoge fuga\">\n\"hoge fuga\"\n```\n\nあまり過去のバージョンのキーを指定するケースが思い浮かばないがそういうこともできる\n\n## おわり\n\n簡単に使用できた\n\n各種言語のクライアントライブラリもあるので導入は簡単にできそう\n\n実際に使っていくと管理対象が増えてきたときにどうやって管理するのかが心配ではある\n\nAWSのパラメータストアだと`/`区切りでパスを指定できて特定のパスまでの情報を一括で取得できたりしてよくできているなと思った\n\n一方GCPだとそうではなさそうなので命名規則でなんとかするくらいしか思い浮かばず\n\n<!-- textlint-disable ja-hiragana-keishikimeishi -->\nそもそも用途がーみたいな話もありそうだなと思いつつ、どのような運用が良いのか答えが出ていないので詳しい方にアドバイスとかもらえたら嬉しい\n<!-- textlint-enable ja-hiragana-keishikimeishi -->",
          "objectID": "gcp/secret_manager",
          "_snippetResult": {
            "text": {
              "value": "lib/google/cloud/secret___ais-highlight__m__/ais-highlight__anager/v1/secret___ais-highlight__m__/ais-highlight__anager_service/client.rb:826:in `rescue in access_secret_version'\n        /usr/local/bundle/gems/google-cloud-secret___ais-highlight__m__/ais-highlight__anager-v1-0.5.0/lib/google/cloud/secret___ais-highlight__m__/ais-highlight__anager/v1/secret___ais-highlight__m__/ais-highlight__anager_service/client.rb:792:in `access_secret_version'\n        ./app.rb:21:in",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "title": {
              "value": "GCPのSecret __ais-highlight__M__/ais-highlight__anagerを使ってみる",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-12-03",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "gcp/secret___ais-highlight__m__/ais-highlight__anager",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "url": {
              "value": "http://localhost:8001/gcp/secret___ais-highlight__m__/ais-highlight__anager",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "section": {
              "value": "gcp/secret___ais-highlight__m__/ais-highlight__anager",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "Ruby", "matchLevel": "none", "matchedWords": [] }
            ],
            "text": {
              "value": "# GCPのSecret __ais-highlight__M__/ais-highlight__anagerを使ってみる\n\nこの記事は[Google Cloud Platform Advent Calendar 2020](https://qiita.com/advent-calendar/2020/gcp)3日目の記事です\n\nAWSだとParameterStoreなどがあるがGCPだとなんなんだろうということで調べて使ってみた\n\n## Secret __ais-highlight__M__/ais-highlight__anager\n\n外部サービスのAPIキーやパスワードなどの秘匿情報を含むデータをGCP上で管理できるサービス\n\n[Secret __ais-highlight__M__/ais-highlight__anager  |  Google Cloud](https://cloud.google.com/secret-__ais-highlight__m__/ais-highlight__anager?hl=ja)\n\n[https://cloud.google.com/secret-__ais-highlight__m__/ais-highlight__anager?hl=ja:embed:cite]\n\n今回は実際にローカルの開発環境から使ってみる\n\n## データの登録\n\nコマンドラインから登録する\n\n```shell\n$ echo 'hoge fuga' | gcloud secrets create __ais-highlight__m__/ais-highlight__y-secret --data-file=-\n```\n\n標準入力から入力する方法以外にもいろいろある\n\n```shell\n$ echo -n $TOGGL_API_TOKEN | gcloud secrets create 'toggl/token' --data-file=-\nERROR: (gcloud.secrets.create) INVALID_ARGUMENT: Resource ID [toggl/token] is not in a valid format.\n```\n\nAWSのパラメータストアのノリで`/`区切りがいけるかなと試してみたがだめだった\n\n`/` は使えない模様\n\n```shell\n$ echo -n $TOGGL_API_TOKEN | gcloud secrets create 'toggl-token' --data-file=-\nCreated version [1] of the secret [toggl-token].\n```\n\n## 取得\n\n```shell\n$ gcloud secrets versions access latest --secret='__ais-highlight__m__/ais-highlight__y-secret'\nhoge fuga\n```\n\n## 更新\n\n```shell\n$ echo -n 'hoge fuga piyo' | gcloud secrets versions add __ais-highlight__m__/ais-highlight__y-secret --data-file=-\n```\n\n値が変わっていることが確認できる\n\n```shell\n$ gcloud secrets versions access latest --secret='__ais-highlight__m__/ais-highlight__y-secret'\nhoge fuga piyo\n```\n\n## Rubyの実装で試してみる\n\nCloudRunからキーを参照して使う予定だったのでいったんローカルでサーバを起動して動作させられるか試す\n\n事前にサービスアカウントを作成して`Secret __ais-highlight__M__/ais-highlight__anager のシークレット アクセサー`のロールを追加しておく\n\n- app.rb\n\n```ruby\nrequire \"google/cloud/secret___ais-highlight__m__/ais-highlight__anager\"\nrequire \"sinatra\"\n\npost \"/\" do\n  client = Google::Cloud::SecretManager.secret___ais-highlight__m__/ais-highlight__anager_service\n  key = client.secret_version_path project: project_id, secret: '__ais-highlight__m__/ais-highlight__y-secret', secret_version: 'latest'\n  res = client.access_secret_version name: key\n  p 'secret ======'\n  p res.payload\n  p res.payload.data\nend\n```\n\n- サーバの起動\n\n```shell\n$ ruby app.rb\n```\n\n- アクセス\n\n```shell\n$ curl http://127.0.0.1:8080\n```\n\n適当にアクセスしてログを見る\n\n- ログ\n\n```shell\n\"secret ======\"\n<Google::Cloud::SecretManager::V1::SecretPayload: data: \"hoge fuga piyo\">\n\"hoge fuga piyo\"\n```\n\n`gcloud`コマンドでは意識しなかったがsecretが保存されているパスを指定する必要がある\n\nサンプルでいうと\n\n`projects/#{project_id}/secrets/{secret_name}/versions/latest`\n\n`project_id`が必要\n\n`GOOGLE_APPLICATION_CREDENTIALS`にサービスアカウントのキーを置いておけばそのあたりよしなにやってくれるのかと思っていたらそんなことはなく\n\nPermissionDeniedで怒られた\n\n```\n 2020-10-30 10:40:12 - Google::Cloud::PermissionDeniedError - 7:Secret __ais-highlight__M__/ais-highlight__anager API has not been used in project 111111111111 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/secretmanager.googleapis.com/overview?project=111111111111 then retry. If you enabled this API recently, wait a few __ais-highlight__m__/ais-highlight__inutes for the action to propagate to our systems and retry.. debug_error_string:{\"created\":\"@1604054412.050131516\",\"description\":\"Error received from peer ipv4:172.217.27.74:443\",\"file\":\"src/core/lib/surface/call.cc\",\"file_line\":1062,\"grpc___ais-highlight__m__/ais-highlight__essage\":\"Secret __ais-highlight__M__/ais-highlight__anager API has not been used in project 111111111111 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/secretmanager.googleapis.com/overview?project=111111111111 then retry. If you enabled this API recently, wait a few __ais-highlight__m__/ais-highlight__inutes for the action to propagate to our systems and retry.\",\"grpc_status\":7}:\n        /usr/local/bundle/gems/google-cloud-secret___ais-highlight__m__/ais-highlight__anager-v1-0.5.0/lib/google/cloud/secret___ais-highlight__m__/ais-highlight__anager/v1/secret___ais-highlight__m__/ais-highlight__anager_service/client.rb:826:in `rescue in access_secret_version'\n        /usr/local/bundle/gems/google-cloud-secret___ais-highlight__m__/ais-highlight__anager-v1-0.5.0/lib/google/cloud/secret___ais-highlight__m__/ais-highlight__anager/v1/secret___ais-highlight__m__/ais-highlight__anager_service/client.rb:792:in `access_secret_version'\n        ./app.rb:21:in `block in <main>'\n```\n\nプロジェクトIDがないと別のプロジェクト的なものと解釈されてAPI有効にしろ!などと言われるっぽい(該当プロジェクトでは有効にしている)\n\nここで出てくるPROJECT_NUMBER的なもの(111111111111)はどのプロジェクトなのかは探せなかったので不明\n\n結構詰まったが最終的にはGitHubでコード検索して実装方法を探して解決した\n\n## 過去のバージョンの値を取得する\n\nここのバージョンを指定することで過去の値も取ることができる\n\n- ログ\n\n```\n\"projects/sampleproject-0000000/secrets/__ais-highlight__m__/ais-highlight__y-secret/versions/1\"\n<Google::Cloud::SecretManager::V1::SecretPayload: data: \"hoge fuga\">\n\"hoge fuga\"\n```\n\nあまり過去のバージョンのキーを指定するケースが思い浮かばないがそういうこともできる\n\n## おわり\n\n簡単に使用できた\n\n各種言語のクライアントライブラリもあるので導入は簡単にできそう\n\n実際に使っていくと管理対象が増えてきたときにどうやって管理するのかが心配ではある\n\nAWSのパラメータストアだと`/`区切りでパスを指定できて特定のパスまでの情報を一括で取得できたりしてよくできているなと思った\n\n一方GCPだとそうではなさそうなので命名規則でなんとかするくらいしか思い浮かばず\n\n<!-- textlint-disable ja-hiragana-keishikimeishi -->\nそもそも用途がーみたいな話もありそうだなと思いつつ、どのような運用が良いのか答えが出ていないので詳しい方にアドバイスとかもらえたら嬉しい\n<!-- textlint-enable ja-hiragana-keishikimeishi -->",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            }
          }
        }
      ],
      "nbHits": 305,
      "page": 0,
      "nbPages": 16,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": { "nbHits": true, "typo": true },
      "query": "m",
      "params": "facets=%5B%5D&highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&page=0&query=m&tagFilters=",
      "index": "hatenablog",
      "renderingContent": {},
      "processingTimeMS": 18,
      "processingTimingsMS": {
        "afterFetch": {
          "format": { "highlighting": 6, "snippeting": 9, "total": 17 },
          "total": 17
        },
        "getIdx": { "total": 1 },
        "total": 18
      }
    },
    {
      "hits": [
        {
          "url": "https://til.swfz.io//entries/markdownlint/",
          "text": "\n[DavidAnson/markdownlint: A Node.js style checker and lint tool for Markdown/CommonMark files.](https://github.com/DavidAnson/markdownlint)\n\nMarkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .markdownlint.yml\n\n```yaml\nMD007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
          "date": "2022-07-26",
          "title": "markdownlintを使ってみた",
          "tags": ["markdownlint"],
          "description": "markdownlint",
          "slug": "/entries/markdownlint/",
          "timeToRead": 1,
          "objectID": "df9fc27d-5a94-581e-bb15-bc6d9e79d00d",
          "_snippetResult": {
            "text": {
              "value": "\n[DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint: A Node.js style checker and lint tool for __ais-highlight__M__/ais-highlight__arkdown/CommonMark files.](https://github.com/DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint)\n\n__ais-highlight__M__/ais-highlight__arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくら",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n[DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint: A Node.js style checker and lint tool for __ais-highlight__M__/ais-highlight__arkdown/CommonMark files.](https://github.com/DavidAnson/__ais-highlight__m__/ais-highlight__arkdownlint)\n\n__ais-highlight__M__/ais-highlight__arkdownのlinter\n\n- インデントは○で!\n- Headingの後は改行入れて!\n- 1行の文字数どのくらいまで\n\nなどいろいろ指摘してくれる\n\n<!-- textlint-disable prh -->\nCLIも用意されているのでCI用途でも使えるし、エディタの拡張をつかってエディタ上にほかのlinterと同様警告を表示できる\n<!-- textlint-enable prh -->\n\nプライベートの記事執筆環境で、デフォルトの2だと警告が出ているためリストのインデントを4に設定した\n\nVS Codeだとショートカット`F8`, `Shift+F8`で警告箇所へジャンプできるが\n\ntextlintの警告（本来ジャンプして直したい箇所）と合わせてジャンプ対象になってしてしまう\n\n- .__ais-highlight__m__/ais-highlight__arkdownlint.yml\n\n```yaml\n__ais-highlight__M__/ais-highlight__D007:\n  indent: 4\n```\n\n地味に邪魔だったので今の自分の環境に合わせて警告が出ないようにした\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-07-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__arkdownlintを使ってみた",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__m__/ais-highlight__arkdownlint",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "__ais-highlight__m__/ais-highlight__arkdownlint",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__arkdownlint/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysqldump_in_docker_compose/",
          "text": "\ndocker-composeからmysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database mysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database mysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
          "date": "2020-09-18",
          "title": "docker-composeからmysqldumpコマンドを実行する",
          "tags": ["Docker", "MySQL"],
          "description": "exec -Tを使う",
          "slug": "/entries/mysqldump_in_docker_compose/",
          "timeToRead": 1,
          "objectID": "a8119391-1f4e-58b2-9087-150d4279cbfe",
          "_snippetResult": {
            "text": {
              "value": "\ndocker-composeから__ais-highlight__m__/ais-highlight__ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database __ais-highlight__m__/ais-highlight__ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database __ais-highlight__m__/ais-highlight__ysql -u root -phoge hoge < hoge_dump",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\ndocker-composeから__ais-highlight__m__/ais-highlight__ysqldumpやdumpファイルの入れ込みを行う\n\n- dump\n\n```shell\ndocker-compose exec database __ais-highlight__m__/ais-highlight__ysqldump -u root -phoge hoge > develop.sql\n```\n\n- 入れ込み\n\n```shell\ndocker-compose exec -T database __ais-highlight__m__/ais-highlight__ysql -u root -phoge hoge < hoge_dump.sql\n```\n\n`-T` がポイント\n\n```\n    -T                Disable pseudo-tty allocation. By default `docker-compose exec`\n                      allocates a TTY.\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-09-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "docker-composeから__ais-highlight__m__/ais-highlight__ysqldumpコマンドを実行する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Docker", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "exec -Tを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ysqldump_in_docker_compose/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/msw_mock_svg/",
          "text": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.me/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\nmswを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということでmswを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - Mock Service Worker Docs](https://mswjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev msw\nmkdir src/mocks\ntouch src/mocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx msw init static/ --save\n```\n\nすると`static/mockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/mocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-mock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/mocks/browser.js\n\n```javascript\n// src/mocks/browser.js\nimport { setupWorker } from 'msw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/mocks/handler.ts\n\n```typescript\nimport { rest } from 'msw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to mock an img src url? · Issue #461 · mswjs/msw](https://github.com/mswjs/msw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\nmswを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
          "date": "2021-12-29",
          "title": "mswでSVGをモックする",
          "tags": ["JavaScript", "TypeScript", "Gatsby", "msw"],
          "description": "Pixelaを題材としてモックしてみた",
          "slug": "/entries/msw_mock_svg/",
          "timeToRead": 3,
          "objectID": "75a9abd2-0b34-54b0-b919-36e1513da0ed",
          "_snippetResult": {
            "text": {
              "value": "にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev __ais-highlight__m__/ais-highlight__sw\n__ais-highlight__m__/ais-highlight__kdir src/__ais-highlight__m__/ais-highlight__ocks\ntouch src/__ais-highlight__m__/ais-highlight__ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx __ais-highlight__m__/ais-highlight__sw",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__sw___ais-highlight__m__/ais-highlight__ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n本ブログでPixelaのグラフを表示させるようにした\n\n表示するだけなら下記にあるようにiframeで呼び出すだけでOK\n\n[草グラフを iframe タグで簡単に埋め込む（Pixela v1.12.1） - えいのうにっき](https://blog.a-know.__ais-highlight__m__/ais-highlight__e/entry/2019/06/16/210915)\n\nが、Gatsbyなどで開発しているときなどは特にリクエストを外部に送る必要がないためURLを出し分けするなりモックするなどできたら良いなと思っていた\n\nこれができていればuseEffectでミスって無限ループしてしまったときなども特に心配せずに開発できる\n\n__ais-highlight__m__/ais-highlight__swを使えば外部リクエストをモックできるので行けそう?だったがiframeの中身のコンテンツのモックはできないようなのでSVGを表示する方法にする\n\nということで__ais-highlight__m__/ais-highlight__swを使ってSVGをモックするようにしてみた\n\n## install\n\n[Install - Getting Started - __ais-highlight__M__/ais-highlight__ock Service Worker Docs](https://__ais-highlight__m__/ais-highlight__swjs.io/docs/getting-started/install)\n\n基本的にはドキュメントを見て進めるでOKそう\n\n```shell\nyarn add --dev __ais-highlight__m__/ais-highlight__sw\n__ais-highlight__m__/ais-highlight__kdir src/__ais-highlight__m__/ais-highlight__ocks\ntouch src/__ais-highlight__m__/ais-highlight__ocks/handlers.ts\n```\n\npublicディレクトリに作成する\n\ngatsbyなので`static/`\n\n```\nnpx __ais-highlight__m__/ais-highlight__sw init static/ --save\n```\n\nすると`static/__ais-highlight__m__/ais-highlight__ockServiceWorker.js`というファイルが生成される\n\n\n## svgファイルをモックする\n\n必要な修正をする\n\n- gatsby-browser.js\n\n```javascript\nconst startWorker = async () => {\n  const { worker } = require(\"./src/__ais-highlight__m__/ais-highlight__ocks/browser\")\n  await worker.start({\n    ServiceWorker: {\n      url: \"/pixela-__ais-highlight__m__/ais-highlight__ock\",\n    },\n  })\n}\n\nexport const onClientEntry = () => {\n  if (process.env.NODE_ENV === \"development\") {\n    startWorker()\n  }\n}\n```\n\nGatsbyのレンダリング初期にモック処理ができるか調べてみた\n\n[Gatsbyドキュメント Doc -> Recipes ざっくりまとめ - 奇をてらったテクノロジー](https://kiotera-tech.com/gatsby_doc_recipes_summary)\n\n[https://kiotera-tech.com/gatsby_doc_recipes_summary:embed:cite]\n\nGatsbyのライフサイクル`onClientEntry`を使うことで可能っぽい\n\n`onClientEntry`の処理時に`startWorker`を動かすようにした\n\nこのライフサイクルを考慮せず`startWorker`を書いてしまうとタイミングによってはモックされたりされなかったり…という現象に見舞われた\n\n- src/__ais-highlight__m__/ais-highlight__ocks/browser.js\n\n```javascript\n// src/__ais-highlight__m__/ais-highlight__ocks/browser.js\nimport { setupWorker } from '__ais-highlight__m__/ais-highlight__sw'\nimport { handlers } from './handler'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n```\n\n- src/__ais-highlight__m__/ais-highlight__ocks/handler.ts\n\n```typescript\nimport { rest } from '__ais-highlight__m__/ais-highlight__sw'\nimport svgImage from './pixela.svg'\n\nexport const handlers = [\n  rest.get('https://pixe.la/v1/users/swfz/graphs/til-pageviews', async (req, res, ctx) => {\n    const svgBuffer = await fetch(svgImage).then((res) => res.arrayBuffer())\n\n    return res(ctx.status(200), ctx.body(svgBuffer))\n  }),\n  rest.post('https://undefined-1.algolianet.com/1/indexes/*/queries', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({results: {hits: []}}))\n  })\n]\n```\n\nsvgファイルは一度curlなり何なりでローカルに持ってきて保存しておく→`./pixela.svg`\n\nおまけでalgoliaへのリクエストも開発時はほとんど使わないので定義した\n\n## SVGのモック処理\n\nsvgをモックするのどうすれば良いのかと思ったが\n\n画像と同じような感じでOKだったので`arrayBuffer`を使う\n\n[Possible to __ais-highlight__m__/ais-highlight__ock an img src url? · Issue #461 · __ais-highlight__m__/ais-highlight__swjs/__ais-highlight__m__/ais-highlight__sw](https://github.com/__ais-highlight__m__/ais-highlight__swjs/__ais-highlight__m__/ais-highlight__sw/issues/461)\n\nモックできているかどうかの確認はモック用のSVGはPixelaの色を変えてからローカルに保存したのでdev用は赤、本番は青といった感じで別れている\n\n## まとめ\n\n__ais-highlight__m__/ais-highlight__swを使って開発時はpixelaへのSVGリクエストをモックして開発時はアクセスが行かないようにした\n\nリクエスト先のURLを出し分けせずにモックできるのは非常に体験が良い\n\n外部のサービスやツールを使っていてsandbox用とかで分けられていない場合などいろんな用途に使えそう\n\n他にも用途いろいろありそうなので使っていこうと思った",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-12-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__swでSVGをモックする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "Gatsby", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "Pixelaを題材としてモックしてみた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__sw___ais-highlight__m__/ais-highlight__ock_svg/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/mysql_direct_gz/",
          "text": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\nmysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接MySQLに流し込む\n\n```shell\nzcat dump.gz | mysql -u user -p password dbname \n```\n",
          "date": "2021-01-22",
          "title": "MySQLでgzipをそのまま流し込む",
          "tags": ["MySQL"],
          "description": "",
          "slug": "/entries/mysql_direct_gz/",
          "timeToRead": 1,
          "objectID": "25ff08d9-c14a-5578-b660-137c5c714081",
          "_snippetResult": {
            "text": {
              "value": "したファイルを生成する\n\n```shell\n__ais-highlight__m__/ais-highlight__ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接__ais-highlight__M__/ais-highlight__ySQLに流し込む\n\n```shell\nzcat dump.gz | __ais-highlight__m__/ais-highlight__ysql -u user -p password dbname \n```\n",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n- dump\n\n一時的にファイルを生成せず圧縮したファイルを生成する\n\n```shell\n__ais-highlight__m__/ais-highlight__ysqldump -u user -p password dbname | gzip > dump.gz \n```\n\n- リストア\n\ngzファイルから直接__ais-highlight__M__/ais-highlight__ySQLに流し込む\n\n```shell\nzcat dump.gz | __ais-highlight__m__/ais-highlight__ysql -u user -p password dbname \n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-01-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__M__/ais-highlight__ySQLでgzipをそのまま流し込む",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              {
                "value": "__ais-highlight__M__/ais-highlight__ySQL",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ysql_direct_gz/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/multi_ssh_command/",
          "text": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
          "date": "2020-06-20",
          "title": "多段SSHをワンライナーで行う",
          "tags": ["ssh", "ワンライナー", "ShellScript"],
          "description": "ssh -o ProxyCommand",
          "slug": "/entries/multi_ssh_command/",
          "timeToRead": 1,
          "objectID": "01010979-2db3-54b9-ad97-90882bf80ade",
          "_snippetResult": {
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__m__/ais-highlight__ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n## Step Server\n\n- x.x.x.x\n\n## VPC内のEC2\n\n- 10.0.1.2\n\n```\nssh -i ~/.ssh/hoge.pem  ec2-user@10.0.1.2 -o ProxyCommand='ssh -i ~/.ssh/hoge.pem -W %h:%p ec2-user@x.x.x.x'\n```",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2020-06-20",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "多段SSHをワンライナーで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "ssh", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "ワンライナー",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ShellScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ssh -o ProxyCommand",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__m__/ais-highlight__ulti_ssh_command/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/algolia_mock_with_msw/",
          "text": "\nAlgoliaの検索リクエストをmswでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、mswで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONをmswを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスがmsw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"msw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
          "date": "2022-08-12",
          "title": "Algoliaのレスポンスをmswでモックして開発ではダミーレスポンスを扱う",
          "tags": ["Algolia", "msw", "TypeScript"],
          "description": "実際のJSONを用意する",
          "slug": "/entries/algolia_mock_with_msw/",
          "timeToRead": 3,
          "objectID": "c8728ebf-22ac-5299-ba20-c595cab71ff1",
          "_snippetResult": {
            "text": {
              "value": "\nAlgoliaの検索リクエストを__ais-highlight__m__/ais-highlight__swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしな",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/algolia___ais-highlight__m__/ais-highlight__ock_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nAlgoliaの検索リクエストを__ais-highlight__m__/ais-highlight__swでモックした\n\n開発時は検索用のAPIキーを登録せずにインデックスへのアクセスもしないようにすれば良くない？\n\n空レスポンスを返すようにしておけば良くない？\n\nみたいな話はあるものの、検索にかかるUI部分を開発するならある程度実際にリクエストした時のレスポンスが欲しくなる\n\nかと言ってAlgoliaに毎度リクエストさせてしまうと無料枠がどんどん減っていく…\n\nということで、__ais-highlight__m__/ais-highlight__swで解決した\n\n## やっていること\n- 実際のレスポンスデータをdev toolsのNetworkからレスポンス内容を取得してきてJSONに保存\n    - 特定文字列(`BigQuery`)を順次入力した場合のレスポンスを逐次取得\n        - `B`と入力した際のレスポンス\n        - `Bi`と入力した際のレスポンス\n        - `Big`と入力した際のレスポンス\n        - `BigQ`と入力した際のレスポンス\n        - `BigQu`と入力した際のレスポンス\n        - `BigQue`と入力した際のレスポンス\n        - `BigQuer`と入力した際のレスポンス\n        - `BigQuery`と入力した際のレスポンス\n- 先工程で保存したJSONを__ais-highlight__m__/ais-highlight__swを用いて返すように設定する\n\n「検索文字列の変化によっって返ってくる件数や内容が変わる」というのを再現したかったので固定値ではあるが検索文字列が変化した場合は文字数にあったレスポンスが__ais-highlight__m__/ais-highlight__sw経由で返るようにした\n\n実際のコードは下記\n\n- handler.ts\n\n```typescript\nimport { rest } from \"__ais-highlight__m__/ais-highlight__sw\"\nimport query0Words from \"./algolia-search-response-0-words.json\"\nimport query1Words from \"./algolia-search-response-1-words.json\"\nimport query2Words from \"./algolia-search-response-2-words.json\"\nimport query3Words from \"./algolia-search-response-3-words.json\"\nimport query4Words from \"./algolia-search-response-4-words.json\"\nimport query5Words from \"./algolia-search-response-5-words.json\"\nimport query6Words from \"./algolia-search-response-6-words.json\"\nimport query7Words from \"./algolia-search-response-7-words.json\"\nimport query8Words from \"./algolia-search-response-8-words.json\"\n\nexport const handlers = [\n  rest.post(\"https://*.algolia.net/1/indexes/*/queries\", (req, res, ctx) => {\n    const empty = query0Words\n\n    const wordCountResponseMap = [\n      empty,       // 空\n      query1Words, // B\n      query2Words, // Bi\n      query3Words, // Big\n      query4Words, // BigQ\n      query5Words, // BigQu\n      query6Words, // BigQue\n      query7Words, // BigQuer\n      query8Words, // BigQuery\n    ]\n\n    const bodyString = req.body as string\n\n    if (bodyString.length === 0) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    const body = JSON.parse(bodyString)\n    const params = [\n      ...new URLSearchParams(body.requests[0].params).entries(),\n    ].reduce((obj, e) => ({ ...obj, [e[0]]: e[1] }), {} as { query: string })\n\n    if (\n      !params.query ||\n      params.query.length === 0 ||\n      params.query.length > wordCountResponseMap.length\n    ) {\n      return res(ctx.status(200), ctx.json(empty))\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json(wordCountResponseMap[params.query.length])\n    )\n  }),\n]\n```\n\n`import`している実際のレスポンスを保存したJSONはAlgoliaでの設定などにより変わるのでここでは割愛する\n\nAlgoliaのレスポンスを完全再現はできないので次のような挙動にしている\n\n<!-- textlint-disable prh -->\n- どの文字列を入力したとしても開発時は`BigQuery`と入力した場合のレスポンスを返す\n- 検索文字列の入力文字数によってモック用のレスポンスを返す\n    - 1文字入力時は`B`が入力された時のモック用レスポンスを返す\n    - 2文字入力時は`Bi`が入力された時のモック用レスポンスを返す\n    - 3文字入力時は`Big`が入力された時のモック用レスポンスを返す\n    - 8文字まで同様\n- 検索文字列が用意している文字列以上入力された場合は何も文字を入力していない場合のレスポンスを返す(`query0Words`)\n<!-- textlint-enable prh -->\n\nこれで検索UIの開発はかなり捗ったのでメモとして残しておく\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-08-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Algoliaのレスポンスを__ais-highlight__m__/ais-highlight__swでモックして開発ではダミーレスポンスを扱う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Algolia", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "実際のJSONを用意する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/algolia___ais-highlight__m__/ais-highlight__ock_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/secret_manager_with_cli/",
          "text": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
          "date": "2021-04-06",
          "title": "SecretManagerの作成や更新をCLIで行う",
          "tags": ["GoogleCloudPlatform", "SecretManager"],
          "description": "secrets versions add",
          "slug": "/entries/secret_manager_with_cli/",
          "timeToRead": 1,
          "objectID": "ba54f21d-4493-567b-a3fa-279d78422d20",
          "_snippetResult": {
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレ",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/secret___ais-highlight__m__/ais-highlight__anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n作成は`secrets`だけど更新は`secrets versions`に対しての操作が必要\n\n- シークレットの作成\n\n```shell\necho -n $TOKEN | gcloud secrets create HOGE_TOKEN --replication-policy=automatic --data-file=-\n```\n\n- シークレットの更新\n\n```shell\necho -n $TOKEN | gcloud secrets versions add HOGE_TOKEN --data-file=-\n```\n\nechoのみだと末尾の改行も含まれてしまうので`-n`が必要\n\n```\n -n     do not output the trailing newline\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-04-06",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "SecretManagerの作成や更新をCLIで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "SecretManager",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "secrets versions add",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/secret___ais-highlight__m__/ais-highlight__anager_with_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gem_maintenance/",
          "text": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
          "date": "2021-01-04",
          "title": "Gemのメンテ時などで使用するコマンドの覚書",
          "tags": ["Ruby", "Gem"],
          "description": "リリースとかまで",
          "slug": "/entries/gem_maintenance/",
          "timeToRead": 2,
          "objectID": "4cda0d7b-303c-5ca5-888b-cc14e0621894",
          "_snippetResult": {
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化し",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gem___ais-highlight__m__/ais-highlight__aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n毎度忘れるので自分用のメモとして\n\n`hatenablog_publisher`を例として上げておく\n\n[swfz/hatenablog_publisher: hatenablog publish with imagefile](https://github.com/swfz/hatenablog_publisher)\n\nCDとかで自動化しているわけではないのでそのうち…\n\n## ローカルでの修正\n\n適当なディレクトリにチェックアウトして使う側のGemfileを正\n\n```diff\n+# gem 'hatenablog_publisher'\n+gem 'hatenablog_publisher', path: '/home/vagrant/sandbox/hatenablog_publisher'\n```\n\n## 動作確認\n\nデバッグしたりして動作確認する\n\n## リリース\n\nversion.rbを修正（パッチ、マイナーなど上げる）\n\nGemfile.lockはbuildすると自動でバージョン変えてくれる\n\n### ありがちエラー\n\n```\nThere are files that need to be committed first.\n```\n\n未コミットがない状態だと実行できるのでstashなりcommitなりしておく\n\n```\nrake build\nrake release\n```\n\n### 前提\n\n前提としてRubyGemsのcredentialsが`~/.gem/credentials`に必要\n\n## 使う側で更新\n\n```\nbundle update hatenablog_publisher\n```\n\n```\nbundle update --source hatenablog_publisher\n```\n\n### 2022-05-07追記\n\n対象のGemだけ更新する場合\n\n\n- 参考\n[bundle updateで特定のgemのみ更新する時に気をつけるべきポイント - 10nin blog](https://scrapbox.io/10nin/bundle_update%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AEgem%E3%81%AE%E3%81%BF%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%B9%E3%81%8D%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88)\n\nsourceで指定するより`--conservative`のほうが良いらしい\n\n```\nbundle update --conservative activesupport\n```\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2021-01-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Gemのメンテ時などで使用するコマンドの覚書",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Ruby", "matchLevel": "none", "matchedWords": [] },
              { "value": "Gem", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "リリースとかまで",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gem___ais-highlight__m__/ais-highlight__aintenance/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/netlify_manual_deploy/",
          "text": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get more Operations.\nError: Operations quota exceeded. Change plan to get more Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node_modules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your main site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to main site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== 'master' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `master`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
          "date": "2021-07-03",
          "title": "Netlifyに手動でデプロイする",
          "tags": ["Netlify", "Gatsby"],
          "description": "netlify-cliを使う",
          "slug": "/entries/netlify_manual_deploy/",
          "timeToRead": 4,
          "objectID": "2031610b-8a69-521a-8efe-7c3719d8f208",
          "_snippetResult": {
            "text": {
              "value": "まったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\nError: Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\n```\n\n途中で落ちてしまいデプロイ",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/netlify___ais-highlight__m__/ais-highlight__anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n割と月の早い段階でAlgoliaの使用制限で継続的デプロイができなくなってしまったのでCLI経由でデプロイできないか調べて試した\n\n## 前提\n\n- Netlifyでビルドとデプロイを行っていてビルド時に都度Algoliaのインデックス更新している\n- DependabotやRenovateなどのパッケージの更新でも上記処理が走ってしまっていたので利用上限に達してしまったよう\n\n- build時エラーログ\n\n```\nERROR\n\nfailed to index to Algolia Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\nError: Operations quota exceeded. Change plan to get __ais-highlight__m__/ais-highlight__ore Operations.\n```\n\n途中で落ちてしまいデプロイできないのでIndexの再生成だけ除外して記事をデプロイする\n\n- Netlify-cliのインストール\n\n```shell\nyarn add -D netlify-cli\n```\n\n- ログイン\n\n```\nyarn netlify login\n```\n\nブラウザに遷移して`Authorize`をクリックして認証する\n\nconfigファイルにtokenが出力される\n\nファイルの場所は `~/.config/netlify/config.json`に置かれる（OSによる）\n\n- デプロイ\n\n`.env.production`にはデプロイに必要な環境変数が入っている\n\n```\n$ envfile .env.production yarn netlify deploy\nyarn run v1.22.10\n$ /home/user/til/node___ais-highlight__m__/ais-highlight__odules/.bin/netlify deploy\nThis folder isn't linked to a site yet\n? What would you like to do? Link this directory to an existing site\n\nnetlify link will connect this folder to a site on Netlify\n\n? How do you want to link this folder to a site? Use current git remote origin (https://github.com/swfz/til)\n\nLooking for sites connected to 'https://github.com/swfz/til'...\n\n\nDirectory Linked\n\nSite url:  https://til.swfz.io\n\nSite id saved to /home/user/til/.netlify/state.json\n\nYou can now run other `netlify` cli commands in this directory\nDeploy path: /home/user/til/public\nDeploying to draft URL...\n✔ Finished hashing 641 files\n✔ CDN requesting 377 files\n✔ Finished uploading 377 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/hoge/deploys/xxxxxxxxxxxxxxxxxxxxxxxxxxx\nWebsite Draft URL: https://xxxxxxxxxxxxxxxxxxxxxxxxxxxx--hoge.netlify.app\n\nIf everything looks good on your draft URL, deploy it to your __ais-highlight__m__/ais-highlight__ain site URL with the --prod flag.\nnetlify deploy --prod\n\nDone in 118.77s.\n```\n\n`--prod`オプションを付けない場合はデプロイプレビュー用のよう\n\n- 本番デプロイ\n\n```\n$ envfile .env.production yarn build\n$ envfile .env.production yarn netlify deploy --prod\nDeploy path: /home/user/deploy-til/public\nDeploying to __ais-highlight__m__/ais-highlight__ain site URL...\n✔ Finished hashing 450 files\n✔ CDN requesting 249 files\n✔ Finished uploading 249 assets\n✔ Deploy is live!\n\nLogs:              https://app.netlify.com/sites/.....\nUnique Deploy URL: https://......netlify.app\nWebsite URL:       https://til.swfz.io\nDone in 51.37s.\n```\n\npublic以下のファイル群をNetlifyにアップロードする\n\nこれで無事デプロイできた\n\nCLIのドキュメントは下記\n\n[Get started with Netlify CLI | Netlify Docs](https://docs.netlify.com/cli/get-started/)\n\n## Algoliaのインデックス更新のコントロール\n\nとりあえず手動デプロイで当座はしのげるようになったが来月も同じ様になってしまうと困るので対策する\n\nAlgoliaのIndexingが必要なのは記事の更新があったときのみなので条件によって挙動を分ける\n\nドキュメントでは`netlify.toml`に設定書けば良いよ、となっているがGUIからの基本的な設定（主にシークレットなどの情報）とうまい具合にマージしてくれるわけではないらしい\n\nそうなると各種キーがデプロイ時に必要なのでパブリックなリポジトリでは`netlify.toml`を使って設定は行えない\n\n[File-based configuration | Netlify Docs](https://docs.netlify.com/configure-builds/file-based-configuration/)\n\n[https://docs.netlify.com/configure-builds/file-based-configuration/:embed:cite]\n\nドキュメントを眺めていると\n\n`$CACHED_COMMIT_REF`、`$COMMIT_REF`という環境変数が用意されているようなのでそれを用いてラップするコマンドを書いてデプロイするようにした\n\n- deploy.sh\n\n```bash\n#!/bin/bash\n\necho $CACHED_COMMIT_REF\necho $COMMIT_REF\n\n# 差分があると終了コード1\ngit diff --quiet $CACHED_COMMIT_REF $COMMIT_REF content/blog/entries/\n\nrc=$?\n\nif [ \"$rc\" = \"1\" ]; then\n  echo \"content changed.\"\n  CONTENT_CHANGED=true gatsby build\nelse\n  echo \"content not changed.\"\n  CONTENT_CHANGED=false gatsby build\nfi\n```\n\n記事のディレクトリに変更があるかどうかで`CONTENT_CHANGED`環境変数を切り分ける\n\n- gatsby-config.js\n\n```javascript\nskipIndexing: (process.env.BRANCH !== '__ais-highlight__m__/ais-highlight__aster' || process.env.CONTENT_CHANGED === 'false'),\n```\n\nこれでAlgoliaへのインデックス情報の更新は\n\n- `__ais-highlight__m__/ais-highlight__aster`ブランチのとき\n- 記事情報が更新されたとき\n\n<!-- textlint-disable prh -->\nが満たされて初めて更新されるようになった\n<!-- textlint-enable prh -->\n\nここまでやっていまさらだが、ざっとしか調べてないのでもし検索でリミットに達していたのなら来月も手動デプロイが発生するかもw",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-07-03",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Netlifyに手動でデプロイする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Netlify", "matchLevel": "none", "matchedWords": [] },
              { "value": "Gatsby", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "netlify-cliを使う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/netlify___ais-highlight__m__/ais-highlight__anual_deploy/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "4",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/node_map/",
          "text": "\nSet,Mapを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## Map\n\n```javascript\nconst uniq = new Map();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [Map Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
          "date": "2020-06-29",
          "title": "ES2015のMap,Setで重複カット",
          "tags": ["ES2015", "JavaScript"],
          "description": "Map Setを使うことで重複カット的なことが簡単に行える",
          "slug": "/entries/node_map/",
          "timeToRead": 1,
          "objectID": "01172dcf-31fe-5816-b48f-13a57bfc9c26",
          "_snippetResult": {
            "text": {
              "value": "ようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## __ais-highlight__M__/ais-highlight__ap\n\n```javascript\nconst uniq = new __ais-highlight__M__/ais-highlight__ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/node___ais-highlight__m__/ais-highlight__ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nSet,__ais-highlight__M__/ais-highlight__apを使うことで今までごにょごにょしてた部分がスッキリ書けるようになる\n\n## Set\n\n```javascript\nconst allNames = ['a','b','c','c','d','b','a'];\nconst names = [...new Set(allNames)];\n// ['a','b','c','d']\n```\n\n## __ais-highlight__M__/ais-highlight__ap\n\n```javascript\nconst uniq = new __ais-highlight__M__/ais-highlight__ap();\nconst users = [\n  {id: 'aaa', name: 'hoge'},\n  {id: 'aaa', name: 'hoge'},\n  {id: 'bbb', name: 'fuga'},\n]\n\nfor (let u of users) {\n  uniq.set(u['id'], u)\n}\n\nconsole.log(uniq.values());\n//  { id: 'aaa', name: 'hoge' },\n//  { id: 'bbb', name: 'fuga' },\n\nconsole.log(uniq.entries());\n// [__ais-highlight__M__/ais-highlight__ap Entries] {\n//   [ 'aaa', { id: 'aaa', name: 'hoge' } ],\n//   [ 'bbb', { id: 'bbb', name: 'fuga' } ]\n// }\n\nconsole.log(uniq.size); // 2\n```\n\nあまり観測範囲で使っているの見ないが便利なので使っていきたい\n\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-06-29",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "ES2015の__ais-highlight__M__/ais-highlight__ap,Setで重複カット",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "ES2015", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__M__/ais-highlight__ap Setを使うことで重複カット的なことが簡単に行える",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/node___ais-highlight__m__/ais-highlight__ap/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/ruby_front_matter_parser/",
          "text": "\n## metadata\n\nGatsbyなどでも使っているMarkdownにタイトルなどの情報を付与するための構文\n\nfront_matterと言うらしい\n\nRubyでMarkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront_matterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include metadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-metadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.md\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front_matter_parser\"\ntags:\n  - Ruby\n  - Markdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(main)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(main)> parsed = FrontMatterParser::Parser.parse_file('hoge.md', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front_matter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front_matter_parser\",\n   \"tags\"=>[\"Ruby\", \"Markdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front_matter_parser: Ruby library to parse files or strings with a front matter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front_matter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
          "date": "2020-09-14",
          "title": "Rubyでmarkdownのmetadata(front_matter)をパースする",
          "tags": ["Ruby", "Markdown"],
          "description": "front_matter_parser",
          "slug": "/entries/ruby_front_matter_parser/",
          "timeToRead": 2,
          "objectID": "e71a004c-2195-512e-856e-4561c762e977",
          "_snippetResult": {
            "text": {
              "value": "\n## __ais-highlight__m__/ais-highlight__etadata\n\nGatsbyなどでも使っている__ais-highlight__M__/ais-highlight__arkdownにタイトルなどの情報を付与するための構文\n\nfront___ais-highlight__m__/ais-highlight__atterと言うらしい\n\nRubyで__ais-highlight__M__/ais-highlight__arkdownをパースして",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/ruby_front___ais-highlight__m__/ais-highlight__atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n## __ais-highlight__m__/ais-highlight__etadata\n\nGatsbyなどでも使っている__ais-highlight__M__/ais-highlight__arkdownにタイトルなどの情報を付与するための構文\n\nfront___ais-highlight__m__/ais-highlight__atterと言うらしい\n\nRubyで__ais-highlight__M__/ais-highlight__arkdownをパースしてはてなブログにPOSTするためのスクリプトを書いていてこのfront___ais-highlight__m__/ais-highlight__atterにも対応させるかーという流れになった\n\nYAMLのGemでパースできるかと思ってちょっと調べてみたがそうでもなかった\n\n[ruby - How to include __ais-highlight__m__/ais-highlight__etadata in a template file? - Stack Overflow](https://stackoverflow.com/questions/538650/how-to-include-__ais-highlight__m__/ais-highlight__etadata-in-a-template-file)\n\n上記試してみたが`Psych::SyntaxError`が出てしまい面倒になったのでGemを探すことにした\n\n結局こっちを使うことに\n\n[waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser: Ruby library to parse files or strings with a front __ais-highlight__m__/ais-highlight__atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser)\n\n中身的には結構愚直にやってた\n\n## サンプル\n\n- hoge.__ais-highlight__m__/ais-highlight__d\n\n```\n---\ntitle: サンプルタイトル\ndate: 2020-09-14\ndescription: \"front___ais-highlight__m__/ais-highlight__atter_parser\"\ntags:\n  - Ruby\n  - __ais-highlight__M__/ais-highlight__arkdown\n---\n\n\n## sub title1\n- list1\n- list2\n- list2\n\n## sub title2\n\nhoge fuga\n```\n\n- parse\n\n```ruby\n[8] pry(__ais-highlight__m__/ais-highlight__ain)> yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n=> #<FrontMatterParser::Loader::Yaml:0x00007fffdb031d20 @whitelist_classes=[Time, Date]>\n[9] pry(__ais-highlight__m__/ais-highlight__ain)> parsed = FrontMatterParser::Parser.parse_file('hoge.__ais-highlight__m__/ais-highlight__d', loader: yaml_loader)\n=> #<FrontMatterParser::Parsed:0x00007fffdaac8c58\n @content=\"## sub title1\\n- list1\\n- list2\\n- list2\\n\\n## sub title2\\n\\nhoge fuga\\n\\n\",\n @front___ais-highlight__m__/ais-highlight__atter=\n  {\"title\"=>\"サンプルタイトル\",\n   \"date\"=>#<Date: 2020-09-14 ((2459107j,0s,0n),+0s,2299161j)>,\n   \"description\"=>\"front___ais-highlight__m__/ais-highlight__atter_parser\",\n   \"tags\"=>[\"Ruby\", \"__ais-highlight__M__/ais-highlight__arkdown\"]}>\n```\n\nyaml_loaderでwhitelistにDateやTimeなど日付関連のクラスをwhitelistに追加している\n\nこれを追加していないと日付や時間のフォーマットが入っていた場合に下記のように怒られてしまう\n\n`Psych::DisallowedClass: Tried to load unspecified class: Date`\n\nとりあえず使うならこのくらいでOKそう\n\n## 2022-05-08追記\n\n追記時点では執筆時と違いallowlistとして指定する必要がある\n\nREADMEもそういう記述になっている\n\n[waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser: Ruby library to parse files or strings with a front __ais-highlight__m__/ais-highlight__atter. It has automatic syntax detection.](https://github.com/waiting-for-dev/front___ais-highlight__m__/ais-highlight__atter_parser)\n\n差分としては下記のようになる\n\n```diff\n- yaml_loader = FrontMatterParser::Loader::Yaml.new(whitelist_classes: [Time, Date])\n+ yaml_loader = FrontMatterParser::Loader::Yaml.new(allowlist_classes: [Time, Date])\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-09-14",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Rubyで__ais-highlight__m__/ais-highlight__arkdownの__ais-highlight__m__/ais-highlight__etadata(front___ais-highlight__m__/ais-highlight__atter)をパースする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Ruby", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__M__/ais-highlight__arkdown",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              }
            ],
            "description": {
              "value": "front___ais-highlight__m__/ais-highlight__atter_parser",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/ruby_front___ais-highlight__m__/ais-highlight__atter_parser/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/cloudwatch_logs_multi_line_log/",
          "text": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`multi_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"multi_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route matches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
          "date": "2021-04-02",
          "title": "CloudWatchLogsで複数行またいだログを適切に扱う",
          "tags": ["AWS", "CloudWatchLogs"],
          "description": "multi_line_start_parttern",
          "slug": "/entries/cloudwatch_logs_multi_line_log/",
          "timeToRead": 1,
          "objectID": "e70e9bba-0cf7-5871-bc3e-0b2b73be6cd4",
          "_snippetResult": {
            "text": {
              "value": "複数行のログでも1つのまとまりとして扱いたい\n\nそこで`__ais-highlight__m__/ais-highlight__ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現に",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/cloudwatch_logs___ais-highlight__m__/ais-highlight__ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nCloudWatchLogsエージェントを使ってログを集める際のはなし\n\nRailsのログから`FATAL`,`ERROR`などのログだけ抽出してSlackに投げようというような運用はよくある\n\nCloudWatchLogsにログを集めて行う場合はLogsのサブスクリプションフィルタを使って対象を絞ってLambdaなどを介して通知する\n\nが、スタックトレースを伴うエラーなどのログは改行が含まれているのでデフォルトの設定だと1行1行が別々のログとして扱われてしまう\n\n複数行のログでも1つのまとまりとして扱いたい\n\nそこで`__ais-highlight__m__/ais-highlight__ulti_line_start_pattern`の設定をする\n\n## 設定\n\nオプションはこの正規表現にマッチする行がスタートですよという意味合い\n\nFluentdとかでもこういうのあったね\n\n[CloudWatch Logs エージェントのリファレンス - Amazon CloudWatch Logs](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AgentReference.html)\n\n- /opt/aws/amazon-cloudwatch-agent/bin/config.json\n\n```json\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\n            \"file_path\": \"/path/to/log/hoge.log\",\n            \"log_group_name\": \"/cwl-test/dev/rails\",\n            \"log_stream_name\": \"{instance_id}\",\n            \"__ais-highlight__m__/ais-highlight__ulti_line_start_pattern\": \"[F|E|W|I|D], .*\"\n          }\n        ]\n      }\n    }\n  },\n```\n\n`Rails.logger`を通してログを出力した場合は基本的にログ1件の単位が上記の正規表現で対応できる状態になる\n\nこんなログが1件として扱われる\n\n```\nF, [2021-04-02T17:40:01.079206 #21599] FATAL -- : \nActionController::RoutingError (No route __ais-highlight__m__/ais-highlight__atches [GET] \"/hoge\"):\n.....\n.....\n.....\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-04-02",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "CloudWatchLogsで複数行またいだログを適切に扱う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "CloudWatchLogs",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__m__/ais-highlight__ulti_line_start_parttern",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "slug": {
              "value": "/entries/cloudwatch_logs___ais-highlight__m__/ais-highlight__ulti_line_log/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/jest_with_msw/",
          "text": "\n開発用に定義したmswの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../mocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // mswでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"msw\"\nimport { setupServer } from \"msw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + mswのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
          "date": "2022-08-19",
          "title": "mswのモックをjestのテストでも使う",
          "tags": ["Jest", "msw", "TypeScript"],
          "description": "開発時と同様",
          "slug": "/entries/jest_with_msw/",
          "timeToRead": 1,
          "objectID": "3cb05eab-dd49-525f-9761-98eaccf45fa7",
          "_snippetResult": {
            "text": {
              "value": "ト\", async () => {\n    // __ais-highlight__m__/ais-highlight__swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"__ais-highlight__m__/ais-highlight__sw\"\nimport { setupServer } from \"__ais-highlight__m__/ais-highlight__sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/jest_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\n開発用に定義した__ais-highlight__m__/ais-highlight__swの設定をJestでも使いたい案件\n\n参考のまんまだけどめちゃくちゃ簡単だった\n\nテスト用のファイルに下記のように書くだけ\n\n- search.tsx\n\n```tsx\nimport { handlers } from \"../../__ais-highlight__m__/ais-highlight__ocks/handler\"\ndescribe(\"Search\", () => {\n  const user = userEvent.setup()\n  const server = setupServer(...handlers)\n\n  beforeEach(() => {\n    server.listen()\n  })\n\n  afterEach(() => {\n    server.close()\n  })\n\n  it(\"検索UIのテスト\", async () => {\n    // __ais-highlight__m__/ais-highlight__swでのモックレスポンスが適用される\n    .....\n    .....\n    .....\n    .....\n  })\n})\n```\n\n- handler.ts\n\n```ts\nimport { rest } from \"__ais-highlight__m__/ais-highlight__sw\"\nimport { setupServer } from \"__ais-highlight__m__/ais-highlight__sw/node\"\n\nexport const handlers = [\n  rest.post(\"https://example.com/*\", (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({})\n    )\n  }),\n]\n```\n\n`setupServer`で事前定義した`handlers`を読ませ`beforeEach`で各テストの実行前にサーバ起動する\n\n終わったら落とすようにしている\n\nこれだけでよい\n\nとても楽\n\n開発時とテスト時で同じ設定を使えるのもメンテナンス上とてもよい\n\n外部へのリクエストが発生する機能はどんどん活用していくモチベーションが上がった\n\n### 参考\n- [Jest + @testing-library/react + __ais-highlight__m__/ais-highlight__swのtips - Qiita](https://qiita.com/shibukawa/items/4d431ee4f98c80b682ec)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-08-19",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__m__/ais-highlight__swのモックをjestのテストでも使う",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "tags": [
              { "value": "Jest", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__m__/ais-highlight__sw",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["m"]
              },
              {
                "value": "TypeScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "開発時と同様",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/jest_with___ais-highlight__m__/ais-highlight__sw/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/s3_content_disposition_with_metadata/",
          "text": "\nS3でpresigned_urlを発行してファイルをDLさせる場合（サンプルはAWS-SDKのRubyクライアントを使用）\n\nS3にあるファイルを別名でダウンロードさせるためには`response_content_disposition`の指定を良しなにする\n\n```\n  response_content_disposition: \"attachment; filename=hoge.txt\"\n```\n\n上記の場合はDL時`hoge.txt`というファイル名でDLされる\n\nまた、S3へのファイル作成時に`metadata`というキーで任意のパラメータ指定が可能\n\n下記のようにファイル生成時の情報を元にファイル名を決めたいと言うようなケースにも対応できる\n\n以下例\n\n## ファイル作成時\n\n```ruby\ns3client = Aws::S3::Client.new\ns3client.put_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  body: File.read(filename),\n  content_type: 'text/csv',\n  metadata: {\n    hoge: 'fuga'\n  }\n)\n```\n\n## presigned url生成時\n\n```ruby\ns3client = Aws::S3::Client.new\n\nobject = s3client.head_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key'\n)\nmetadata = object.metadata\n\nsigner = Aws::S3::Presigner.new\nsigner.presigned_url(\n  :get_object,\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  expires_in: 300,\n  response_content_disposition: \"attachment; filename=#{metadata['hoge']}.txt\"\n)\n```\n\nファイル生成時に`metadata.hoge`の値`fuga`をファイル名に含めることができた\n\n上記例だと`fuga.txt`というファイル名でダウンロードできる\n",
          "date": "2021-07-25",
          "title": "S3のpresigned_url発行時にキー以外の名前のファイルをDL可能にする",
          "tags": ["S3", "AWS"],
          "description": "response_content_disposition",
          "slug": "/entries/s3_content_disposition_with_metadata/",
          "timeToRead": 1,
          "objectID": "d7bc3477-f972-50b8-9cda-1587fc460c7d",
          "_snippetResult": {
            "text": {
              "value": "csv',\n  __ais-highlight__m__/ais-highlight__etadata: {\n    hoge: 'fuga'\n  }\n)\n```\n\n## presigned url生成時\n\n```ruby\ns3client = Aws::S3::Client.new\n\nobject = s3client.head_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key'\n)\n__ais-highlight__m__/ais-highlight__etadata = object.__ais-highlight__m__/ais-highlight__etadata\n\nsigner = Aws::S3::Presigner.new\nsigner.presigned_url(\n  :get_object,\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  expires_in: 300,\n  response_content_disposition",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/s3_content_disposition_with___ais-highlight__m__/ais-highlight__etadata/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "text": {
              "value": "\nS3でpresigned_urlを発行してファイルをDLさせる場合（サンプルはAWS-SDKのRubyクライアントを使用）\n\nS3にあるファイルを別名でダウンロードさせるためには`response_content_disposition`の指定を良しなにする\n\n```\n  response_content_disposition: \"attachment; filename=hoge.txt\"\n```\n\n上記の場合はDL時`hoge.txt`というファイル名でDLされる\n\nまた、S3へのファイル作成時に`__ais-highlight__m__/ais-highlight__etadata`というキーで任意のパラメータ指定が可能\n\n下記のようにファイル生成時の情報を元にファイル名を決めたいと言うようなケースにも対応できる\n\n以下例\n\n## ファイル作成時\n\n```ruby\ns3client = Aws::S3::Client.new\ns3client.put_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  body: File.read(filename),\n  content_type: 'text/csv',\n  __ais-highlight__m__/ais-highlight__etadata: {\n    hoge: 'fuga'\n  }\n)\n```\n\n## presigned url生成時\n\n```ruby\ns3client = Aws::S3::Client.new\n\nobject = s3client.head_object(\n  bucket: 'sample-bucket',\n  key: 'sample-key'\n)\n__ais-highlight__m__/ais-highlight__etadata = object.__ais-highlight__m__/ais-highlight__etadata\n\nsigner = Aws::S3::Presigner.new\nsigner.presigned_url(\n  :get_object,\n  bucket: 'sample-bucket',\n  key: 'sample-key',\n  expires_in: 300,\n  response_content_disposition: \"attachment; filename=#{__ais-highlight__m__/ais-highlight__etadata['hoge']}.txt\"\n)\n```\n\nファイル生成時に`__ais-highlight__m__/ais-highlight__etadata.hoge`の値`fuga`をファイル名に含めることができた\n\n上記例だと`fuga.txt`というファイル名でダウンロードできる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-07-25",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "S3のpresigned_url発行時にキー以外の名前のファイルをDL可能にする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "S3", "matchLevel": "none", "matchedWords": [] },
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "response_content_disposition",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/s3_content_disposition_with___ais-highlight__m__/ais-highlight__etadata/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/start_pocket_api/",
          "text": "\nまず`My Applications`から`CREATE APP`でアプリケーションを作成して`consumer key`を取得する\n\n取得した`consumer key`を環境変数に入れておく\n\n```shell\n$ export CONSUMER_KEY=xxxxx\n```\n\n## request tokenの発行\n\n適当なリダイレクト先を指定してrequest tokenを生成する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\n   https://getpocket.com/v3/oauth/request \\\n   -d @-<<EOS\n{\n  \"consumer_key\" : \"${CONSUMER_KEY}\",\n  \"redirect_uri\":\"http://localhost:8001/\"\n}\nEOS\ncode=xxxxx\n```\n\n結果を環境変数に入れておく\n\n```shell\n$ export REQUEST_TOKEN=xxxxx\n```\n\n## ブラウザへ遷移してアプリケーションのアクセス許可を行う\n\nリダイレクト先は適当に\n\n```shell\nopen \"https://getpocket.com/auth/authorize?request_token=${REQUEST_TOKEN}&redirect_uri=http://localhost:8001/\"\n```\n\n## access tokenの発行\n\n先の手順で得たrequest tokenを用いてaccess tokenの発行する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/oauth/authorize \\\n-d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"code\":\"${REQUEST_TOKEN}\"\n}\nEOS\naccess_token=xxxxx&username=hoge\n```\n\n`access_token=`の部分を環境変数に入れておく\n\n```shell\n$ export ACCESS_TOKEN=xxxxx\n```\n\nこれで準備が完了した\n\n## 何かしら問い合わせてみる\n\n記事データを取得してみる\n\n```shell\ncurl -o res.json -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/get -d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"access_token\":\"${ACCESS_TOKEN}\",\n  \"state\":\"unread\",\n  \"detailType\":\"complete\",\n  \"count\":3\n}\nEOS\n```\n\n[Pocket API: Retrieving a User's Pocket Data](https://getpocket.com/developer/docs/v3/retrieve)\n\nretrieveのAPIの仕様についてはこの辺\n\n## おまけ\n\nここで得たJSONをBigQueryに放り込んでよしなにやろうとしたが一筋縄では行かなかった\n\n次のエラーはレスポンスのJSONファイルをそのままGCSにあげて`bq load`しようとした結果\n\n```\nError in query string: Error processing job 'project-111111:bqjob_r75b06933ac2f4481_0000017942c36b05_1': Invalid field name \"3292257344\". Fields must contain only letters, numbers, and\nunderscores, start with a letter or underscore, and be at most 300 characters long. Table: sample_8bb5a901_3d95_41f4_9512_e7f4fad8a737_source\n```\n\nエラー文言自体は`文字またはアンダースコアで始まり`の部分に違反しているのでエラーがでているがそもそもこのキーがIDなので記事によって可変であるためスキーマ定義ができない\n\njson形式が微妙すぎるのでどうしてもフォーマットしてあげないとダメそう\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": {\n    \"3324677936\": {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    \"3324677937\": {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n```\n\nこんな感じで数値キーのハッシュとして出力されている\n\n配列で表現してほしかった…\n\nということで数値キーになっている要素を数値キーを削除した形で保持させる\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": [\n    {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n  ]\n```\n\nこんな感じ\n\n中身を見た感じ`.list`以外にも同様の形式だったのでそちらも同様に配列に変更する必要がある\n\n### ハッシュ→配列にする必要がある要素\n\n執筆時点で把握しているのは下記\n\n- .list\n- .list.images\n- .list.videos\n- .list.authors\n\n### jqでよしなにやる\n\n```\ncat res.json| jq  -cr '.list=(.list|to_entries|map(.value)|map(.images=if has(\"images\") then .images|to_entries|map(.value) else [] end)|map(.videos=if has(\"videos\") then .videos|to_entries|map(.value) else [] end)|map(.authors=if has(\"authors\") then .authors|to_entries|map(.value) else [] end))' > list.json\n```\n\nキー自体がそもそもない場合もあったのでその場合は空配列にする\n\n### BigQueryに入れ込む\n\n```\nbq load --replace --autodetect --source_format=NEWLINE_DELIMITED_JSON sample_dataset.sample list.json\n```\n\nこれでOK",
          "date": "2021-05-07",
          "title": "PocketのデータをAPI経由でBigQueryに取り込む",
          "tags": ["Pocket", "BigQuery", "GoogleCloudPlatform", "jq"],
          "description": "ACCESS KEYの発行とRetrieveエンドポイントを叩くまで、おまけでBigQueryにいれてみた",
          "slug": "/entries/start_pocket_api/",
          "timeToRead": 3,
          "objectID": "d0cde5d5-f1ec-5985-81c7-88e10adaf52c",
          "_snippetResult": {
            "text": {
              "value": "る\n\n```\ncat res.json| jq  -cr '.list=(.list|to_entries|__ais-highlight__m__/ais-highlight__ap(.value)|__ais-highlight__m__/ais-highlight__ap(.images=if has(\"images\") then .images|to_entries|__ais-highlight__m__/ais-highlight__ap(.value) else [] end)|__ais-highlight__m__/ais-highlight__ap(.videos=if has(\"videos\") then .videos|to_entries|__ais-highlight__m__/ais-highlight__ap(.value) else [] end)|__ais-highlight__m__/ais-highlight__ap(.authors=if has(\"authors\") then .authors|to_entries|__ais-highlight__m__/ais-highlight__ap(.value) else",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/start_pocket_api/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\nまず`__ais-highlight__M__/ais-highlight__y Applications`から`CREATE APP`でアプリケーションを作成して`consumer key`を取得する\n\n取得した`consumer key`を環境変数に入れておく\n\n```shell\n$ export CONSUMER_KEY=xxxxx\n```\n\n## request tokenの発行\n\n適当なリダイレクト先を指定してrequest tokenを生成する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\n   https://getpocket.com/v3/oauth/request \\\n   -d @-<<EOS\n{\n  \"consumer_key\" : \"${CONSUMER_KEY}\",\n  \"redirect_uri\":\"http://localhost:8001/\"\n}\nEOS\ncode=xxxxx\n```\n\n結果を環境変数に入れておく\n\n```shell\n$ export REQUEST_TOKEN=xxxxx\n```\n\n## ブラウザへ遷移してアプリケーションのアクセス許可を行う\n\nリダイレクト先は適当に\n\n```shell\nopen \"https://getpocket.com/auth/authorize?request_token=${REQUEST_TOKEN}&redirect_uri=http://localhost:8001/\"\n```\n\n## access tokenの発行\n\n先の手順で得たrequest tokenを用いてaccess tokenの発行する\n\n```shell\n$ curl -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/oauth/authorize \\\n-d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"code\":\"${REQUEST_TOKEN}\"\n}\nEOS\naccess_token=xxxxx&username=hoge\n```\n\n`access_token=`の部分を環境変数に入れておく\n\n```shell\n$ export ACCESS_TOKEN=xxxxx\n```\n\nこれで準備が完了した\n\n## 何かしら問い合わせてみる\n\n記事データを取得してみる\n\n```shell\ncurl -o res.json -H \"Content-Type: application/json; charset=UTF-8\" -X POST \\\nhttps://getpocket.com/v3/get -d @-<<EOS\n{\n  \"consumer_key\":\"${CONSUMER_KEY}\",\n  \"access_token\":\"${ACCESS_TOKEN}\",\n  \"state\":\"unread\",\n  \"detailType\":\"complete\",\n  \"count\":3\n}\nEOS\n```\n\n[Pocket API: Retrieving a User's Pocket Data](https://getpocket.com/developer/docs/v3/retrieve)\n\nretrieveのAPIの仕様についてはこの辺\n\n## おまけ\n\nここで得たJSONをBigQueryに放り込んでよしなにやろうとしたが一筋縄では行かなかった\n\n次のエラーはレスポンスのJSONファイルをそのままGCSにあげて`bq load`しようとした結果\n\n```\nError in query string: Error processing job 'project-111111:bqjob_r75b06933ac2f4481_0000017942c36b05_1': Invalid field name \"3292257344\". Fields __ais-highlight__m__/ais-highlight__ust contain only letters, numbers, and\nunderscores, start with a letter or underscore, and be at __ais-highlight__m__/ais-highlight__ost 300 characters long. Table: sample_8bb5a901_3d95_41f4_9512_e7f4fad8a737_source\n```\n\nエラー文言自体は`文字またはアンダースコアで始まり`の部分に違反しているのでエラーがでているがそもそもこのキーがIDなので記事によって可変であるためスキーマ定義ができない\n\njson形式が微妙すぎるのでどうしてもフォーマットしてあげないとダメそう\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": {\n    \"3324677936\": {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    \"3324677937\": {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n```\n\nこんな感じで数値キーのハッシュとして出力されている\n\n配列で表現してほしかった…\n\nということで数値キーになっている要素を数値キーを削除した形で保持させる\n\n```json\n{\n  \"status\": 1,\n  \"complete\": 0,\n  \"list\": [\n    {\n      \"item_id\": \"3324677936\",\n      \"resolved_id\": \"3324677936\",\n      .....\n    },\n    {\n      \"item_id\": \"3324677937\",\n      \"resolved_id\": \"3324677937\",\n      .....\n    },\n    .....\n  ]\n```\n\nこんな感じ\n\n中身を見た感じ`.list`以外にも同様の形式だったのでそちらも同様に配列に変更する必要がある\n\n### ハッシュ→配列にする必要がある要素\n\n執筆時点で把握しているのは下記\n\n- .list\n- .list.images\n- .list.videos\n- .list.authors\n\n### jqでよしなにやる\n\n```\ncat res.json| jq  -cr '.list=(.list|to_entries|__ais-highlight__m__/ais-highlight__ap(.value)|__ais-highlight__m__/ais-highlight__ap(.images=if has(\"images\") then .images|to_entries|__ais-highlight__m__/ais-highlight__ap(.value) else [] end)|__ais-highlight__m__/ais-highlight__ap(.videos=if has(\"videos\") then .videos|to_entries|__ais-highlight__m__/ais-highlight__ap(.value) else [] end)|__ais-highlight__m__/ais-highlight__ap(.authors=if has(\"authors\") then .authors|to_entries|__ais-highlight__m__/ais-highlight__ap(.value) else [] end))' > list.json\n```\n\nキー自体がそもそもない場合もあったのでその場合は空配列にする\n\n### BigQueryに入れ込む\n\n```\nbq load --replace --autodetect --source_format=NEWLINE_DELIMITED_JSON sample_dataset.sample list.json\n```\n\nこれでOK",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-05-07",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "PocketのデータをAPI経由でBigQueryに取り込む",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Pocket", "matchLevel": "none", "matchedWords": [] },
              { "value": "BigQuery", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "jq", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "ACCESS KEYの発行とRetrieveエンドポイントを叩くまで、おまけでBigQueryにいれてみた",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/start_pocket_api/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/tfenv/",
          "text": "\n[tfutils/tfenv: Terraform version manager](https://github.com/tfutils/tfenv)\n\nTerraformのバージョンを切り替えて使用するためのツール\n\n### インストール\n\n```shell\n$ git clone https://github.com/tfutils/tfenv.git ~/.tfenv\n$ mkdir ~/.local/bin\n$ ln -s ~/.tfenv/bin/* ~/.local/bin\n```\n\n### PATHへの追加\n\n- .bashrc\n\n```\nexport PATH=\"$HOME/.tfenv/bin:$PATH\"\n```\n\n当たり前だが既存のパスより前にtfenvのパスが先にないと既存でterraformを使っている場合そっちが先に見つかってしまうのでtfenvのパスを先にする\n\n### 切り替え、使用\n\n```\n$ tfenv install 0.14.6\n$ tfenv use 0.14.6\n$ terraform --version\nTerraform v0.14.6\n```\n",
          "date": "2021-02-13",
          "title": "tfenvを使いTerraformのバージョンを切り替える",
          "tags": ["Terraform"],
          "description": "tfenv",
          "slug": "/entries/tfenv/",
          "timeToRead": 1,
          "objectID": "c2cc61fc-bb15-51f6-b648-3e7b00b73da7",
          "_snippetResult": {
            "text": {
              "value": "\n[tfutils/tfenv: Terraform version __ais-highlight__m__/ais-highlight__anager](https://github.com/tfutils/tfenv)\n\nTerraformのバージョンを切り替えて使用するためのツール\n\n### インストール\n\n```shell\n$ git clone https://github.com/tfutils/tfenv.git",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/tfenv/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n[tfutils/tfenv: Terraform version __ais-highlight__m__/ais-highlight__anager](https://github.com/tfutils/tfenv)\n\nTerraformのバージョンを切り替えて使用するためのツール\n\n### インストール\n\n```shell\n$ git clone https://github.com/tfutils/tfenv.git ~/.tfenv\n$ __ais-highlight__m__/ais-highlight__kdir ~/.local/bin\n$ ln -s ~/.tfenv/bin/* ~/.local/bin\n```\n\n### PATHへの追加\n\n- .bashrc\n\n```\nexport PATH=\"$HOME/.tfenv/bin:$PATH\"\n```\n\n当たり前だが既存のパスより前にtfenvのパスが先にないと既存でterraformを使っている場合そっちが先に見つかってしまうのでtfenvのパスを先にする\n\n### 切り替え、使用\n\n```\n$ tfenv install 0.14.6\n$ tfenv use 0.14.6\n$ terraform --version\nTerraform v0.14.6\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-02-13",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "tfenvを使いTerraformのバージョンを切り替える",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Terraform", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "tfenv",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/tfenv/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/zx_arguments/",
          "text": "\n```shell\nzx query.mjs hoge\n[\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/node',\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/zx',\n  'query.mjs',\n  'hoge'\n]\n```\n\n普通のnodeスクリプトだと`process.argv.slice(2)`でコマンドライン引数のリストを取得するが、zxの場合には`process.argv.slice(3)`になる\n",
          "date": "2022-06-21",
          "title": "zx使用時のコマンドライン引数のリスト",
          "tags": ["zx", "JavaScript"],
          "description": "process.argv",
          "slug": "/entries/zx_arguments/",
          "timeToRead": 1,
          "objectID": "949f37a7-3fa6-51ed-9f67-66d6346e744c",
          "_snippetResult": {
            "text": {
              "value": "\n```shell\nzx query.__ais-highlight__m__/ais-highlight__js hoge\n[\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/node',\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/zx',\n  'query.__ais-highlight__m__/ais-highlight__js',\n  'hoge'\n]\n```\n\n普通のnodeスクリプトだと`process.argv.slice(2)`でコマン",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/zx_arguments/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n```shell\nzx query.__ais-highlight__m__/ais-highlight__js hoge\n[\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/node',\n  '/home/user/.anyenv/envs/nodenv/versions/16.13.0/bin/zx',\n  'query.__ais-highlight__m__/ais-highlight__js',\n  'hoge'\n]\n```\n\n普通のnodeスクリプトだと`process.argv.slice(2)`でコマンドライン引数のリストを取得するが、zxの場合には`process.argv.slice(3)`になる\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-06-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "zx使用時のコマンドライン引数のリスト",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "zx", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "process.argv",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/zx_arguments/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/javascript_destructuring_assignment/",
          "text": "\n[分割代入 - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n## 連想配列\n\nできるのは知ってたけどGatsbyのチュートリアル動画を見てたら下記のような代入をしていてなるほどとなったのでメモ\n\n```javascript\n> const response = {code: 200, body: {name: 'hoge', id: 1}}\nundefined\n> response\n{ code: 200, body: { name: 'hoge', id: 1 } }\n> const { name } = response.body\nundefined\n> name\n'hoge'\n\n// 下記と同様\n> const name2 = response.body.name\nundefined\n> name2\n'hoge'\n```\n\n例のパターンだとどちらでも良いといえば良いが多少スッキリする\n\nまた、複数代入したいみたいなときは有効かなと感じる\n\n```javascript\n> const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};\nundefined\n> a\n10\n> b\n20\n> rest\n{ c: 30, d: 40 }\n```\n\n`...rest`で残りの連想配列も代入できるのが地味に良い\n\n## 配列\n\n```javascript\n> const [a, b, ...rest] = [10, 20, 30, 40, 50];\nundefined\n> a\n10\n> b\n20\n> rest\n[ 30, 40, 50 ]\n```\n\nこちらも`...rest`で残りの要素を代入できる\n\n直近だとGoogleFormsの解答結果を集計する際に相性が良かった\n\nスプレッドシートのデータ扱う場合は基本的に2次元配列であることと、A列のデータは○、B列のデータは△みたいに固定になっていることが多いのでそれを分割代入で代入してよしなにやるパターンでサッと書ける\n\n便利さを実感したので今後意識しておこうと思った\n",
          "date": "2021-08-12",
          "title": "JavaScriptの分割代入",
          "tags": ["JavaScript"],
          "description": "メモ",
          "slug": "/entries/javascript_destructuring_assignment/",
          "timeToRead": 1,
          "objectID": "5db7c80c-6692-5591-ac07-32031398a4be",
          "_snippetResult": {
            "text": {
              "value": "\n[分割代入 - JavaScript | __ais-highlight__M__/ais-highlight__DN](https://developer.__ais-highlight__m__/ais-highlight__ozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n## 連想配列\n\nできるのは知ってたけどGatsbyのチュートリアル動画を見てたら",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/javascript_destructuring_assignment/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n[分割代入 - JavaScript | __ais-highlight__M__/ais-highlight__DN](https://developer.__ais-highlight__m__/ais-highlight__ozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n## 連想配列\n\nできるのは知ってたけどGatsbyのチュートリアル動画を見てたら下記のような代入をしていてなるほどとなったのでメモ\n\n```javascript\n> const response = {code: 200, body: {name: 'hoge', id: 1}}\nundefined\n> response\n{ code: 200, body: { name: 'hoge', id: 1 } }\n> const { name } = response.body\nundefined\n> name\n'hoge'\n\n// 下記と同様\n> const name2 = response.body.name\nundefined\n> name2\n'hoge'\n```\n\n例のパターンだとどちらでも良いといえば良いが多少スッキリする\n\nまた、複数代入したいみたいなときは有効かなと感じる\n\n```javascript\n> const {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};\nundefined\n> a\n10\n> b\n20\n> rest\n{ c: 30, d: 40 }\n```\n\n`...rest`で残りの連想配列も代入できるのが地味に良い\n\n## 配列\n\n```javascript\n> const [a, b, ...rest] = [10, 20, 30, 40, 50];\nundefined\n> a\n10\n> b\n20\n> rest\n[ 30, 40, 50 ]\n```\n\nこちらも`...rest`で残りの要素を代入できる\n\n直近だとGoogleFormsの解答結果を集計する際に相性が良かった\n\nスプレッドシートのデータ扱う場合は基本的に2次元配列であることと、A列のデータは○、B列のデータは△みたいに固定になっていることが多いのでそれを分割代入で代入してよしなにやるパターンでサッと書ける\n\n便利さを実感したので今後意識しておこうと思った\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2021-08-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "JavaScriptの分割代入",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "メモ",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/javascript_destructuring_assignment/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/dd/",
          "text": "\n```shell\n$ dd if=/dev/zero of=1K_M.out bs=1K count=1\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000412943 s, 2.5 MB/s\n```\n\n```\n$ ls -al 1K_M.out\n-rw-rw-r-- 1 vagrant vagrant 1024 Oct 24 04:46 1K_M.out\n```\n\nディスク的には4KBで固定のよう\n\n```\n$ du -sh 1K_M.out\n4.0K    1K_M.out\n```\n\n`1K_M.out`というファイル名にnull文字で埋める、1KBで1ファイル作成する\n\n容量によって確認したいことが変わる場合など容量を合わせていくの意外と面倒だったりするのでそういうときに使える\n",
          "date": "2020-10-23",
          "title": "特定の容量のダミーファイルを生成する",
          "tags": ["Command"],
          "description": "dd",
          "slug": "/entries/dd/",
          "timeToRead": 1,
          "objectID": "d63f5431-3ba6-5a2b-ab2b-593c03496128",
          "_snippetResult": {
            "text": {
              "value": "__ais-highlight__M__/ais-highlight__.out bs=1K count=1\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000412943 s, 2.5 __ais-highlight__M__/ais-highlight__B/s\n```\n\n```\n$ ls -al 1K___ais-highlight__M__/ais-highlight__.out\n-rw-rw-r-- 1 vagrant vagrant 1024 Oct 24 04:46 1K___ais-highlight__M__/ais-highlight__.out\n```\n\nディス",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/dd/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n```shell\n$ dd if=/dev/zero of=1K___ais-highlight__M__/ais-highlight__.out bs=1K count=1\n1+0 records in\n1+0 records out\n1024 bytes (1.0 kB) copied, 0.000412943 s, 2.5 __ais-highlight__M__/ais-highlight__B/s\n```\n\n```\n$ ls -al 1K___ais-highlight__M__/ais-highlight__.out\n-rw-rw-r-- 1 vagrant vagrant 1024 Oct 24 04:46 1K___ais-highlight__M__/ais-highlight__.out\n```\n\nディスク的には4KBで固定のよう\n\n```\n$ du -sh 1K___ais-highlight__M__/ais-highlight__.out\n4.0K    1K___ais-highlight__M__/ais-highlight__.out\n```\n\n`1K___ais-highlight__M__/ais-highlight__.out`というファイル名にnull文字で埋める、1KBで1ファイル作成する\n\n容量によって確認したいことが変わる場合など容量を合わせていくの意外と面倒だったりするのでそういうときに使える\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2020-10-23",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "特定の容量のダミーファイルを生成する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Command", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "dd",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/dd/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/gh_cli_add_scope/",
          "text": "\n[gh auth login | GitHub CLI](https://cli.github.com/manual/gh_auth_login)\n\nghコマンドの権限周りで何か怒られた場合はこの操作で権限を追加する\n\n変更するためには再度ログインが必要\n\n- プロジェクトへのread権限、codespaceへのread/write権限を追加する図\n\n```\ngh auth login --scopes 'read:project,codespace'\n```\n\nGraphQLでいうProjectV2（GitHub Issues beta）へのアクセスには`project`への権限が必要\n\nGitHub CLI自体はOAuthで認証しているのでスコープの指定方法は次のドキュメントを参照すればよさそう\n\n[OAuth Appのスコープ - GitHub Docs](https://docs.github.com/ja/developers/apps/building-oauth-apps/scopes-for-oauth-apps)",
          "date": "2022-07-04",
          "title": "GitHub CLIコマンドでscopeを設定する",
          "tags": ["GitHub CLI", "GitHub"],
          "description": "--scopes",
          "slug": "/entries/gh_cli_add_scope/",
          "timeToRead": 1,
          "objectID": "bdf57954-32b4-52e6-80cc-b0ed133dc7f8",
          "_snippetResult": {
            "text": {
              "value": "\n[gh auth login | GitHub CLI](https://cli.github.com/__ais-highlight__m__/ais-highlight__anual/gh_auth_login)\n\nghコマンドの権限周りで何か怒られた場合はこの操作で権限を追加する\n\n変更する",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/gh_cli_add_scope/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\n[gh auth login | GitHub CLI](https://cli.github.com/__ais-highlight__m__/ais-highlight__anual/gh_auth_login)\n\nghコマンドの権限周りで何か怒られた場合はこの操作で権限を追加する\n\n変更するためには再度ログインが必要\n\n- プロジェクトへのread権限、codespaceへのread/write権限を追加する図\n\n```\ngh auth login --scopes 'read:project,codespace'\n```\n\nGraphQLでいうProjectV2（GitHub Issues beta）へのアクセスには`project`への権限が必要\n\nGitHub CLI自体はOAuthで認証しているのでスコープの指定方法は次のドキュメントを参照すればよさそう\n\n[OAuth Appのスコープ - GitHub Docs](https://docs.github.com/ja/developers/apps/building-oauth-apps/scopes-for-oauth-apps)",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["m"]
            },
            "date": {
              "value": "2022-07-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub CLIコマンドでscopeを設定する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "GitHub CLI",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "--scopes",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/gh_cli_add_scope/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 109,
      "page": 0,
      "nbPages": 6,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": { "nbHits": true, "typo": true },
      "query": "m",
      "params": "facets=%5B%5D&highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&page=0&query=m&tagFilters=",
      "index": "til",
      "renderingContent": {},
      "processingTimeMS": 7,
      "processingTimingsMS": {
        "afterFetch": {
          "format": { "highlighting": 2, "snippeting": 3, "total": 6 },
          "total": 6
        },
        "total": 7
      }
    }
  ]
}
